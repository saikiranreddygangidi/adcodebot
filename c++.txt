String is Palindrome
=====================
#include <iostream>
#include <string.h>
using namespace std;
int main()
{
    char str1[20], str2[20];
    int i, j, len = 0, flag = 0;
    cout << "Enter the string : ";
    gets(str1);
    len = strlen(str1) - 1;
    for (i = len, j = 0; i >= 0 ; i--, j++)
        str2[j] = str1[i];
    if (strcmp(str1, str2))
        flag = 1;
    if (flag == 1)
        cout << str1 << " is not a palindrome";
    else
        cout << str1 << " is a palindrome";
    return 0;
}.
#1  Fibonacci fibo fibonacci Series 

#include <iostream>  
using namespace std;  
int main() 
{  
    int num1=0,num2=1,num3,i,number;    
    cout<<"Enter the number of elements: ";    
    cin>>number;   

    //printing 0 and 1    
    cout<<n1<<" "<<n2<<" ";
    
    for(i=2;i<number;++i) 

    /*
    Here loop starts from 2 because 
    0 and 1 are already printed    
    */

    {    
    num3=num1+num2;    
    cout<<num3<<" ";    
    num1=num2;    
    num2=num3;    
    }    
    return 0;  
}  .

---------------

#2  prime prime number Prime Number

#include <iostream>  
using namespace std;  
int main()  
{  
    int num, i, count=0, flag=0;  
    cout << "Enter the number to find Prime: ";  
    cin >> num;  
    m=n/2; 

    /---for loop begins---/
    
    for(i = 2; i <= count; i++)  
    {  
        if(num % i == 0)  
        {  
        cout<<"Number is not Prime."<<endl;  
        flag=1;  
        break;  
        }  
    } 

    /---for loop ends---/
    
    if (flag==0)  
        cout << "Number is Prime."<<endl;  
    return 0;  

} .

---------------------------
#3  palindrome Palindrome 

#include <iostream>  
using namespace std;  
int main()  
{  
    int num,r,sum=0,temp;    
    cout<<"Enter a number=";    
    cin>>num;    
    temp=n;    

    /---While loop begins---/
    while(n>0)    
    {    
    r=n%10;    
    sum=(sum*10)+r;    
    n=n/10;    
    }
    /---While loop ends---/

    if(temp==sum)    
    cout<<"Number is Palindrome.";    
    else    
    cout<<"Number is not Palindrome.";   
    return 0; 

}  .


---------------------------
#4  Factorial factorial fact Fact

#include <iostream>  
using namespace std;  
int main()  
{  
  int i,fact=1,number;    
  cout<<"Enter any Number: ";    
  cin>>number;  

  /---for loop begins---/  

  for(i=1;i<=number;i++)
  {    
      fact=fact*i;    
  }   

  /---for loop ends---/


  cout<<"Factorial of " <<number<<" is: "<<fact<<endl;  
  return 0;  
}  .

---------------------------
#5 Armstrong Number armstrong number

#include <iostream>  
using namespace std;  
int main()  
{  
    int num,r,sum=0,temp;    
    cout<<"Enter the Number=  ";    
    cin>>num;    
    temp=num;  

    /---While loop begins---/  

    while(num>0)    
    {    
    r=num%10;    
    sum=sum+(r*r*r);    
    num=num/10;    
    } 

    /---While loop ends---/    

    if(temp==sum)    
    cout<<"Armstrong Number."<<endl;    
    else    
    cout<<"Not Armstrong Number."<<endl;   
    return 0;  
}  .


---------------------------
#6 Sum of digits sum of digits Sum of Digits

#include <iostream>  
using namespace std;  
int main()  
{  
    int num,sum=0,m;    
    cout<<"Enter a number: ";    
    cin>>num; 

    /---While loop begins---/ 

    while(n>0)    
    {    
    m=n%10;    
    sum=sum+m;    
    n=n/10;    
    }    

    /---While loop ends---/ 

    cout<<"Sum is= "<<sum<<endl;    
    return 0;  

}  .



---------------------------
#7 Reverse a number reverse a number reverse number

#include <iostream>  
using namespace std;  
int main()  
 {  
    int n, reverse=0, rem;    
    cout<<"Enter a number: ";    
    cin>>n;   

    /---While loop begins---/ 

    while(n!=0)    
    {    
        rem=n%10;      
        reverse=reverse*10+rem;    
        n/=10;    
    }  

    /---While loop ends---/  

    cout<<"Reversed Number: "<<reverse<<endl;     
    return 0;   
 } .

---------------------------
#8 swap two numbers Swap two numbers swapping swap

#include <iostream>  
using namespace std;  

int main()  
{  
    int a=3, b=10;      
    cout<<"Before swap a= "<<a<<" b= "<<b<<endl;      
    a=a*b; //a=30 (3*10)    
    b=a/b; //b=3 (30/10)    
    a=a/b; //a=10 (30/3)    
    cout<<"After swap a= "<<a<<" b= "<<b<<endl;      
    return 0;  
}  .

--------------------------
#9 matrix multiplication Matrix Multiplication

#include <iostream>  
using namespace std;  
int main()  
{  
    int a[10][10],b[10][10],mul[10][10],r,c,i,j,k;    
    cout<<"enter the number of row=";    
    cin>>r;    
    cout<<"enter the number of column=";    
    cin>>c;    
    cout<<"enter the first matrix element=\n";   

    /---for loop begins---/

    for(i=0;i<r;i++)    
    {    
    for(j=0;j<c;j++)    
    {    
    cin>>a[i][j];  
    }    
    }  
    /---for loop ends---/  

    cout<<"enter the second matrix element=\n";  

    /---for loop begins---/  
    for(i=0;i<r;i++)    
    {    
    for(j=0;j<c;j++)    
    {    
    cin>>b[i][j];    
    }    
    }  
    /---for loop ends---/  

    cout<<"multiply of the matrix=\n"; 
    /---for loop begins---/   
    for(i=0;i<r;i++)    
    {    
    for(j=0;j<c;j++)    
    {    
    mul[i][j]=0;    
    for(k=0;k<c;k++)    
    {    
    mul[i][j]+=a[i][k]*b[k][j];    
    }    
    }    
    }
    /---for loop ends---/ 

    /--for loop to print result--/  
    for(i=0;i<r;i++)    
    {    
    for(j=0;j<c;j++)    
    {    
    cout<<mul[i][j]<<" ";    
    }    
    cout<<"\n";    
    }  
    /---for loop ends---/ 

    return 0;  
}  .

#10 convert decimal to binary

#include <iostream>  
using namespace std;  
int main()  
{  
    int a[10], n, i;    
    cout<<"Enter the number to convert: ";    
    cin>>n;  

    /---for loop begins---/   
    for(i=0; n>0; i++)    
    {    
    a[i]=n%2;    
    n= n/2;  
    } 
    /---for loop ends---/ 
       
    cout<<"Binary of the given number= ";  
    
    /---for loop begins---/   
    for(i=i-1; i>=0; i--)    
    {    
        cout<<a[i];    
    }  
    /---for loop ends---/   
}  ...

#Disjoint Set Union on trees
==========================
// CPP code to find maximum subtree such 
// that all nodes are even in weight 
#include<bits/stdc++.h> 

using namespace std; 

#define N 100010 

// Structure for Edge 
struct Edge 
{ 
    int u, v; 
}; 

/* 
    'id': stores parent of a node. 
    'sz': stores size of a DSU tree. 
*/
int id[N], sz[N]; 

// Function to assign root 
int Root(int idx) 
{ 
    int i = idx; 
    
    while(i != id[i]) 
        id[i] = id[id[i]], i = id[i]; 
    
    return i; 
} 

// Function to find Union 
void Union(int a, int b) 
{ 
    int i = Root(a), j = Root(b); 
    
    if (i != j) 
    { 
        if(sz[i] >= sz[j]) 
        { 
            id[j] = i, sz[i] += sz[j]; 
            sz[j] = 0; 
        } 
        else
        { 
            id[i] = j, sz[j] += sz[i]; 
            sz[i] = 0; 
        } 
    } 
} 

// Utility function for Union 
void UnionUtil(struct Edge e[], int W[], int q) 
{ 

    for(int i = 0; i < q; i++) 
    { 
        // Edge between 'u' and 'v' 
        int u, v; 
        u = e[i].u, v = e[i].v; 

        // 0-indexed nodes 
        u--, v--; 

        // If weights of both 'u' and 'v' 
        // are even then we make union of them. 
        if(W[u] % 2 == 0 && W[v] % 2 == 0) 
                    Union(u,v); 
    } 
} 

// Function to find maximum 
// size of DSU tree 
int findMax(int n, int W[]) 
{ 
    int maxi = 0; 
    for(int i = 1; i <= n; i++) 
        if(W[i] % 2 == 0) 
            maxi = max(maxi, sz[i]); 
            
    return maxi; 
} 

// Driver code 
int main() 
{ 
    /* 
        Nodes are 0-indexed in this code 
        So we have to make necessary changes 
        while taking inputs 
    */

    // Weights of nodes 
    int W[] = {1, 2, 6, 4, 2, 0, 3}; 

    // Number of nodes in a tree 
    int n = sizeof(W) / sizeof(W[0]); 

    // Initializing every node as 
    // a tree with single node. 
    for(int i = 0; i < n; i++) 
            id[i] = i, sz[i] = 1; 

    Edge e[] = {{1, 2}, {1, 3}, {2, 4}, 
                {2, 5}, {4, 6}, {6, 7}}; 

    int q = sizeof(e) / sizeof(e[0]); 

    UnionUtil(e, W, q); 

    // Find maximum size of DSU tree. 
    int maxi = findMax(n, W); 

    printf("Maximum size of the subtree with "); 
    printf("even weighted nodes = %d\n", maxi); 
    
    return 0; 
} .
