 C Program to Check if a given Integer is Odd or Even 
================================ EOPN
#include <stdio.h> void main(){    int ival, remainder;     printf("Enter an integer : ");    scanf("%d", &ival);    remainder = ival % 2;    if (remainder == 0)        printf("%d is an even integer\n", ival);    else        printf("%d is an odd integer\n", ival);}
================================ EOKW
--------------------------------
output:
 
Case 1:
Enter an integer : 24
24 is an even integer
 
Case 2:
Enter an integer : 75
75 is an odd integer
 
Case 3:
Enter an integer : 0
0 is an even integer
--------------------------------
#include <stdio.h>
 
void main()
{
    int ival, remainder;
 
    printf("Enter an integer : ");
    scanf("%d", &ival);
    remainder = ival % 2;
    if (remainder == 0)
        printf("%d is an even integer\n", ival);
    else
        printf("%d is an odd integer\n", ival);
}
 . 
*******************
 C Program to Calculate the Sum of Odd & Even Numbers 
================================ EOPN
 #include <stdio.h> void main(){    int i, num, odd_sum = 0, even_sum = 0;     printf("Enter the value of num\n");    scanf("%d", &num);    for (i = 1; i <= num; i++)    {        if (i % 2 == 0)            even_sum = even_sum + i;        else            odd_sum = odd_sum + i;    }    printf("Sum of all odd numbers  = %d\n", odd_sum);    printf("Sum of all even numbers = %d\n", even_sum);}
================================ EOKW
--------------------------------
output:
Case 1:
Enter the value of num
10
Sum of all odd numbers  = 25
Sum of all even numbers = 30
 
Case 2:
Enter the value of num
100
Sum of all odd numbers  = 2500
Sum of all even numbers = 2550
--------------------------------
 
#include <stdio.h>
 
void main()
{
    int i, num, odd_sum = 0, even_sum = 0;
 
    printf("Enter the value of num\n");
    scanf("%d", &num);
    for (i = 1; i <= num; i++)
    {
        if (i % 2 == 0)
            even_sum = even_sum + i;
        else
            odd_sum = odd_sum + i;
    }
    printf("Sum of all odd numbers  = %d\n", odd_sum);
    printf("Sum of all even numbers = %d\n", even_sum);
}
 . 
*******************
 C Program to Check if a given Integer is Positive or Negative 
================================ EOPN
#include <stdio.h> void main(){    int number;     printf("Enter a number \n");    scanf("%d", &number);    if (number >= 0)        printf("%d is a positive number \n", number);    else        printf("%d is a negative number \n", number);}
================================ EOKW
--------------------------------
output:
Case:1
Enter a number
-10
-10 is a negative number
 
Case:2
Enter a number
45
45 is a positive number
--------------------------------
#include <stdio.h>
 
void main()
{
    int number;
 
    printf("Enter a number \n");
    scanf("%d", &number);
    if (number >= 0)
        printf("%d is a positive number \n", number);
    else
        printf("%d is a negative number \n", number);
}
 . 
*******************
 C Program to Find the Number of Integers Divisible by 5  
================================ EOPN
/* * C program to find the number of integers divisible by  * 5 between the given range num1 and num2, where num1 < num2. * * Also find the sum of all these integer numbers which are divisible * by 5 and display the total. 
================================ EOKW
--------------------------------
output:
Case:1
Enter the value of num1 and num2
12 17
Integers divisible by 5 are
 15,
Number of integers divisible by 5 between 12 and 17 = 1
Sum of all integers that are divisible by 5 = 15
 
Case:2
Enter the value of num1 and num2
1 10
Integers divisible by 5 are
 5,10
Number of integers divisible by 5 between 1 and 10 = 2
Sum of all integers that are divisible by 5 = 15
--------------------------------
/*
 * C program to find the number of integers divisible by 
 * 5 between the given range num1 and num2, where num1 < num2.
 *
 * Also find the sum of all these integer numbers which are divisible
 * by 5 and display the total.
 */
#include <stdio.h>
 
void main()
{
    int i, num1, num2, count = 0, sum = 0;
 
    printf("Enter the value of num1 and num2 \n");
    scanf("%d %d", &num1, &num2);
    /* Count the number and compute their sum*/
    printf("Integers divisible by 5 are \n");
    for (i = num1; i < num2; i++)
    {
        if (i % 5 == 0)
        {
            printf("%3d,", i);
            count++;
            sum = sum + i;
        }
    }
    printf("\n Number of integers divisible by 5 between %d and %d =
 %d\n", num1, num2, count);
    printf("Sum of all integers that are divisible by 5 = %d\n", sum);
}
 . 
*******************
 C Program to Read Two Integers M and N & Swap their Values 
================================ EOPN
/* * C program to read two integers M and N and to swap their values. * Use a user-defined function for swapping. Output the values of M * and N before and after swapping. 
================================ EOKW
--------------------------------
output:
Enter the values of M and N
2 3
Before Swapping:M =  2.00    N =  3.00
After Swapping:M  =  3.00    N =  2.00
--------------------------------
/*
 * C program to read two integers M and N and to swap their values.
 * Use a user-defined function for swapping. Output the values of M
 * and N before and after swapping.
 */
#include <stdio.h>
void swap(float *ptr1, float  *ptr2);
 
void main()
{
    float m, n;
 
    printf("Enter the values of M and N \n");
    scanf("%f %f", &m, &n);
    printf("Before Swapping:M = %5.2ftN = %5.2f\n", m, n);
    swap(&m, &n);
    printf("After Swapping:M  = %5.2ftN = %5.2f\n", m, n);
}
/*  Function swap - to interchanges the contents of two items */
void swap(float *ptr1, float *ptr2)
{
    float temp;
 
    temp = *ptr1;
    *ptr1 = *ptr2;
    *ptr2 = temp;
}
 . 
*******************
 C Program to Accept two Integers and Check if they are Equal 
================================ EOPN
/* * C program to accept two integers and check if they are equal 
================================ EOKW
--------------------------------
output:
Case:1
Enter the values for M and N
3 3
M and N are equal
 
Case:2
Enter the values for M and N
5 8
M and N are not equal
--------------------------------
/*
 * C program to accept two integers and check if they are equal
 */
#include <stdio.h>
void main()
{
    int m, n;
 
    printf("Enter the values for M and N\n");
    scanf("%d %d", &m, &n);
    if (m == n)
        printf("M and N are equal\n");
    else
        printf("M and N are not equal\n");
}
 . 
*******************
 C Program to Compute the Sum of Digits in a given Integer 
================================ EOPN
/* * C program to accept an integer & find the sum of its digits 
================================ EOKW
--------------------------------
output:
Enter the number
300
Given number = 300
Sum of the digits 300 = 3
 
 
Enter the number
16789
Given number = 16789
Sum of the digits 16789 = 31
--------------------------------
/*
 * C program to accept an integer & find the sum of its digits
 */
#include <stdio.h>
 
void main()
{
    long num, temp, digit, sum = 0;
 
    printf("Enter the number \n");
    scanf("%ld", &num);
    temp = num;
    while (num > 0)
    {
        digit = num % 10;
        sum  = sum + digit;
        num /= 10;
    }
    printf("Given number = %ld\n", temp);
    printf("Sum of the digits %ld = %ld\n", temp, sum);
}
 . 
*******************
 C Program to Convert the given Binary Number into Decimal 
================================ EOPN
/* * C program to convert the given binary number into decimal 
================================ EOKW
--------------------------------
output:
 
Enter a binary number(1s and 0s)
10101001
The Binary number is = 10101001
Its decimal equivalent is = 169
--------------------------------
/*
 * C program to convert the given binary number into decimal
 */
#include <stdio.h>
 
void main()
{
    int  num, binary_val, decimal_val = 0, base = 1, rem;
 
    printf("Enter a binary number(1s and 0s) \n");
    scanf("%d", &num); /* maximum five digits */
    binary_val = num;
    while (num > 0)
    {
        rem = num % 10;
        decimal_val = decimal_val + rem * base;
        num = num / 10 ;
        base = base * 2;
    }
    printf("The Binary number is = %d \n", binary_val);
    printf("Its decimal equivalent is = %d \n", decimal_val);
}
 . 
*******************
 C Program to Convert a Decimal Number to Binary & Count the Number of 1s 
================================ EOPN
/*
 * C program to accept a decimal number and convert it to binary
 * and count the number of 1's in the binary number
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm46.c
$ a.out
Enter a decimal integer
134
Input number is = 134
Its binary equivalent is = 10000110
No.of 1's in the binary number is = 3
--------------------------------
 . 
*******************
 C Program to Convert a Given Number of Days in terms of Years, Weeks & Days 
================================ EOPN
/* * C program to convert given number of days to a measure of time given * in years, weeks and days. For example 375 days is equal to 1 year * 1 week and 3 days (ignore leap year) 
================================ EOKW
--------------------------------
output:
Case:1
Enter the number of days
29
29 is equivalent to 0 years, 4 weeks and 1 days
 
Case:2
Enter the number of days
1000
1000 is equivalent to 2 years, 38 weeks and 4 days
--------------------------------
/*
 * C program to convert given number of days to a measure of time given
 * in years, weeks and days. For example 375 days is equal to 1 year
 * 1 week and 3 days (ignore leap year)
 */
#include <stdio.h>
#define DAYSINWEEK 7
 
void main()
{
    int ndays, year, week, days;
 
    printf("Enter the number of days\n");
    scanf("%d", &ndays);
    year = ndays / 365;
    week =(ndays % 365) / DAYSINWEEK;
    days =(ndays % 365) % DAYSINWEEK;
    printf ("%d is equivalent to %d years, %d weeks and %d daysn",
            ndays, year, week, days);
}
 . 
*******************
C Program to Convert Binary to Octal
================================ EOPN
/* * C Program to Convert Binary to Octal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the value for  binary number: 10101
Equivalent octal value: 25
--------------------------------
/*
 * C Program to Convert Binary to Octal
 */
 #include <stdio.h>
 
int main()
{
    long int binarynum, octalnum = 0, j = 1, remainder;
 
    printf("Enter the value for  binary number: ");
    scanf("%ld", &binarynum);
    while (binarynum != 0)
    {
        remainder = binarynum % 10;
        octalnum = octalnum + remainder * j;
        j = j * 2;
        binarynum = binarynum / 10;
    }
    printf("Equivalent octal value: %lo", octalnum);
    return 0;
}
 . 
*******************
C Program to Convert Binary to Hexadecimal
================================ EOPN
/* * C Program to Convert Binary to Hexadecimal  
================================ EOKW
--------------------------------
output:
Output:
Enter the binary number: 10000
Equivalent hexadecimal value: 10
--------------------------------
/*
 * C Program to Convert Binary to Hexadecimal 
 */
#include <stdio.h>
 
int main()
{
    long int binaryval, hexadecimalval = 0, i = 1, remainder;
 
    printf("Enter the binary number: ");
    scanf("%ld", &binaryval);
    while (binaryval != 0)
    {
        remainder = binaryval % 10;
        hexadecimalval = hexadecimalval + remainder * i;
        i = i * 2;
        binaryval = binaryval / 10;
    }
    printf("Equivalent hexadecimal value: %lX", hexadecimalval);
    return 0;
}
 . 
*******************
C Program to Convert Decimal to Octal 
================================ EOPN
/* * C program to Convert Decimal to Octal 
================================ EOKW
--------------------------------
output:
Output:
Enter the decimal number: 68
Equivalent octal value of decimal no 68: 104
--------------------------------
/*
 * C program to Convert Decimal to Octal
 */
#include <stdio.h>
 
int main()
{
    long decimalnum, remainder, quotient;
    int octalNumber[100], i = 1, j;
 
    printf("Enter the decimal number: ");
    scanf("%ld", &decimalnum);
    quotient = decimalnum;
    while (quotient != 0)
    {
        octalNumber[i++] = quotient % 8;
        quotient = quotient / 8;
    }
    printf("Equivalent octal value of decimal no %d: ", decimalnum);
    for (j = i - 1; j > 0; j--)
        printf("%d", octalNumber[j]);
    return 0;
}
 . 
*******************
C program to Convert Decimal to Hexadecimal
================================ EOPN
/* * C program to Convert Decimal to Hexadecimal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter decimal number: 12
Equivalent hexadecimal value of 12 : C
--------------------------------
/*
 * C program to Convert Decimal to Hexadecimal
 */
#include <stdio.h>
 
int main()
{
    long decimalnum, quotient, remainder;
    int i, j = 0;
    char hexadecimalnum[100];
 
    printf("Enter decimal number: ");
    scanf("%ld", &decimalnum);
 
    quotient = decimalnum;
 
    while (quotient != 0)
    {
        remainder = quotient % 16;
        if (remainder < 10)
            hexadecimalnum[j++] = 48 + remainder;
        else
            hexadecimalnum[j++] = 55 + remainder;
        quotient = quotient / 16;
    }
 
    // display integer into character
    for (i = j; i >= 0; i--)
            printf("%c", hexadecimalnum[i]);
    return 0;
}
 . 
*******************
C Program to Convert Roman Number to Decimal Number
================================ EOPN
/
================================ EOKW
--------------------------------
output:
Output:
Enter any roman number (Valid digits are I, V, X, L, C, D, M):
XVII
Its decimal value is: 17
--------------------------------
/*
/*
 * C Program to Convert Roman Number to Decimal Number
 */
 
#include<stdio.h>
#include<string.h>
 
int digit(char);
 
int main(){
 
    char roman_Number[1000];
    int i=0;
    long int number =0;
 
    printf("Enter any roman number (Valid digits are I, V, X, L, C, D, M):  \n");
    scanf("%s",roman_Number);
 
    while(roman_Number[i]){
 
         if(digit(roman_Number[i]) < 0){
             printf("Invalid roman digit : %c",roman_Number[i]);
             return 0;
         }
 
         if((strlen(roman_Number) -i) > 2){
             if(digit(roman_Number[i]) < digit(roman_Number[i+2])){
                 printf("Invalid roman number");
                 return 0;
             }
         }
 
         if(digit(roman_Number[i]) >= digit(roman_Number[i+1]))
             number = number + digit(roman_Number[i]);
         else{
             number = number + (digit(roman_Number[i+1]) - digit(roman_Number[i]));
             i++;
         }
         i++;
    }
 
    printf("Its decimal value is : %ld",number);
 
    return 0;
 
}
 
int digit(char c){
 
    int value=0;
 
    switch(c){
         case 'I': value = 1; break;
         case 'V': value = 5; break;
         case 'X': value = 10; break;
         case 'L': value = 50; break;
         case 'C': value = 100; break;
         case 'D': value = 500; break;
         case 'M': value = 1000; break;
         case '\0': value = 0; break;
         default: value = -1; 
    }
 
    return value;
}
 . 
*******************
C Program to Convert Octal to Binary
================================ EOPN
/* * C Program to Convert Octal to Binary 
================================ EOKW
--------------------------------
output:
Output:
 
Enter any octal number: a
Equivalent binary value:
Invalid octal digit a
 
 
Enter any octal number: 160
Equivalent binary value: 001110000
--------------------------------
/*
 * C Program to Convert Octal to Binary
 */
#include <stdio.h>
#define MAX 1000
 
int main()
{
    char octalnum[MAX];
    long i = 0;
 
    printf("Enter any octal number: ");
    scanf("%s", octalnum);
    printf("Equivalent binary value: ");
    while (octalnum[i])
    {
        switch (octalnum[i])
        {
        case '0':
            printf("000"); break;
        case '1':
            printf("001"); break;
        case '2':
            printf("010"); break;
        case '3':
            printf("011"); break;
        case '4':
            printf("100"); break;
        case '5':
            printf("101"); break;
        case '6':
            printf("110"); break;
        case '7':
            printf("111"); break;
        default:
            printf("\n Invalid octal digit %c ", octalnum[i]);
            return 0;
        }
        i++;
    }
    return 0;
}
 . 
*******************
C Program to Convert Hexadecimal to Binary
================================ EOPN
/* * C Program to Convert Hexadecimal to Binary 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the value for hexadecimal ab
Equivalent binary value: 10101011
--------------------------------
/*
 * C Program to Convert Hexadecimal to Binary
 */
#include <stdio.h>
#define MAX 1000
 
int main()
{
    char binarynum[MAX], hexa[MAX];
    long int i = 0;
 
    printf("Enter the value for hexadecimal ");
    scanf("%s", hexa);
    printf("\n Equivalent binary value: ");
    while (hexa[i])
    {
        switch (hexa[i])
        {
        case '0':
            printf("0000"); break;
        case '1':
            printf("0001"); break;
        case '2':
            printf("0010"); break;
        case '3':
            printf("0011"); break;
        case '4':
            printf("0100"); break;
        case '5':
            printf("0101"); break;
        case '6':
            printf("0110"); break;
        case '7':
            printf("0111"); break;
        case '8':
            printf("1000"); break;
        case '9':
            printf("1001"); break;
        case 'A':
            printf("1010"); break;
        case 'B':
            printf("1011"); break;
        case 'C':
            printf("1100"); break;
        case 'D':
            printf("1101"); break;
        case 'E':
            printf("1110"); break;
        case 'F':
            printf("1111"); break;
        case 'a':
            printf("1010"); break;
        case 'b':
            printf("1011"); break;
        case 'c':
            printf("1100"); break;
        case 'd':
            printf("1101"); break;
        case 'e':
            printf("1110"); break;
        case 'f':
            printf("1111"); break;
        default:
            printf("\n Invalid hexa digit %c ", hexa[i]);
            return 0;
        }
        i++;
    }
    return 0;
}
 . 
*******************
C Program to Convert Numbers to Roman Numerals
================================ EOPN
/* * C Program to Convert Numbers to Roman Numerals 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the number: 500
Roman number is be: D
--------------------------------
/*
 * C Program to Convert Numbers to Roman Numerals
 */
#include <stdio.h>
 
void predigit(char num1, char num2);
void postdigit(char c, int n);
 
char romanval[1000];
int i = 0;
int main()
{
    int j;
    long number;
 
    printf("Enter the number: ");
    scanf("%d", &number);
    if (number <= 0)
    {
        printf("Invalid number");
        return 0;
    }
    while (number != 0)
    {
        if (number >= 1000)
        {
            postdigit('M', number / 1000);
            number = number - (number / 1000) * 1000;
        }
        else if (number >= 500)
        {
            if (number < (500 + 4 * 100))
            {
                postdigit('D', number / 500);
                number = number - (number / 500) * 500;
            }
            else
            {
                predigit('C','M');
                number = number - (1000-100);
            }
        }
        else if (number >= 100)
        {
            if (number < (100 + 3 * 100)) 
            {
                postdigit('C', number / 100);
                number = number - (number / 100) * 100;
            }
            else
            {
                predigit('L', 'D');
                number = number - (500 - 100);
            }
        }
        else if (number >= 50 )
        {
            if (number < (50 + 4 * 10))
            {
                postdigit('L', number / 50);
                number = number - (number / 50) * 50;
            }
            else
            {
                predigit('X','C');
                number = number - (100-10);
            }
        }
        else if (number >= 10)
        {
            if (number < (10 + 3 * 10))
            {
                postdigit('X', number / 10);
                number = number - (number / 10) * 10;
            }
            else
            {
                predigit('X','L');
                number = number - (50 - 10);
            }
        }
        else if (number >= 5)
        {
            if (number < (5 + 4 * 1))
            {
                postdigit('V', number / 5);
                number = number - (number / 5) * 5;
            }
            else
            {
                predigit('I', 'X');
                number = number - (10 - 1);
            }
        }
        else if (number >= 1)
        {
            if (number < 4)
            {
                postdigit('I', number / 1);
                number = number - (number / 1) * 1;
            }
            else
            {
                predigit('I', 'V');
                number = number - (5 - 1);
            }
        }
    }
    printf("Roman number is: ");
    for(j = 0; j < i; j++)
        printf("%c", romanval[j]);
    return 0;
}
 
void predigit(char num1, char num2)
{
    romanval[i++] = num1;
    romanval[i++] = num2;
}
 
void postdigit(char c, int n)
{
    int j;
    for (j = 0; j < n; j++)
        romanval[i++] = c;
}
 . 
*******************
C Program to Convert Octal to Decimal 
================================ EOPN
/* * C Program to Convert Octal to Decimal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter any octal number: 67
Equivalent decimal value: 55
--------------------------------
/*
 * C Program to Convert Octal to Decimal
 */
#include <stdio.h>
#include <math.h>
 
int main()
{
 
    long int octal, decimal = 0;
    int i = 0;
 
    printf("Enter any octal number: ");
    scanf("%ld", &octal);
    while (octal != 0)
    {
        decimal =  decimal +(octal % 10)* pow(8, i++);
        octal = octal / 10;
    }
    printf("Equivalent decimal value: %ld",decimal);
    return 0;
}
 . 
*******************
C Program to Convert a Number Decimal System to Binary System using Recursion
================================ EOPN
/*  
 * C Program to Convert a Number Decimal System to Binary System using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm31.c
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010.
--------------------------------
 . 
*******************
C Program to Convert Binary Code of a Number into its Equivalent Grays Code without using Recursion
================================ EOPN
/*  
 * C Program to Convert Binary Code of a Number into its Equivalent 
 * Gray's Code without using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm26.c -lm
$ a.out
Enter a binary number: 1111001010
The gray code of 1111001010 is 1000101111
--------------------------------
 . 
*******************
C Program to Convert Binary Code of a Number into its Equivalent Grays Code using Recursion
================================ EOPN
/* 
 * C Program to Convert Binary Code of a Number into its Equivalent 
 * Gray's Code using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm21.c
$ a.out
Enter a binary number:  1011101
The gray code of 1011101 is 1110011
--------------------------------
 . 
*******************
C Program to find Sum of Digits of a Number using Recursion
================================ EOPN
/*  
 * C Program to find Sum of Digits of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm25.c
$ a.out
Enter the number: 2345
Sum of digits in 2345 is 14
--------------------------------
 . 
*******************
C Program to find Reverse of a Number using Recursion
================================ EOPN
/*  
 * C program to find the reverse of a number using recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm34.c
$ a.out
Enter an integer number to reverse: 1234
The reverse of 1234 is 4321.
--------------------------------
 . 
*******************
C Program to find Sum of N Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Sum of N Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm33.c
$ a.out
Enter the Nth number: 3
Sum of first N numbers is 6
 
$ a.out
Enter the Nth number: 5
Sum of first N numbers is 15
--------------------------------
 . 
*******************
C Program to find whether a Number is Prime or Not using Recursion
================================ EOPN
/*
 * C Program to find whether a Number is Prime or Not using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm24.c
$ a.out
Enter a number: 456
456 is not a prime number
 
$ a.out
Enter a number: 89
89 is a prime number
--------------------------------
 . 
*******************
C Program to Print Binary Equivalent of an Integer using Recursion
================================ EOPN
/*  
 * C Program to Print Binary Equivalent of an Integer using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc binary_recr.c -o binary_recr
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010
--------------------------------
 . 
*******************
C Program to find Product of 2 Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Product of 2 Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm20.c
$ a.out
Enter two numbers to find their product: 176 340
Product of 176 and 340 is 59840
--------------------------------
 . 
*******************
 C Program to Find the Biggest of 3 Numbers 
================================ EOPN
/* * C program to find the biggest of three numbers 
================================ EOKW
--------------------------------
output:
Case:1
Enter the values of num1, num2 and num3
6 8 10
num1 = 6  num2 = 8  num3 = 10
num3 is the greatest among three
 
Case:2
Enter the values of num1, num2 and num3
10 87 99
num1 = 10  num2 = 87  num3 = 99
num3 is the greatest among three
--------------------------------
/*
 * C program to find the biggest of three numbers
 */
#include <stdio.h>
 
void main()
{
    int num1, num2, num3;
 
    printf("Enter the values of num1, num2 and num3\n");
    scanf("%d %d %d", &num1, &num2, &num3);
    printf("num1 = %d\tnum2 = %d\tnum3 = %d\n", num1, num2, num3);
    if (num1 > num2)
    {
        if (num1 > num3)
        {
            printf("num1 is the greatest among three \n");
        }
        else
        {
            printf("num3 is the greatest among three \n");
        }
    }
    else if (num2 > num3)
        printf("num2 is the greatest among three \n");
    else
        printf("num3 is the greatest among three \n");
}
 . 
*******************
 C Program to Reverse a Given Number 
================================ EOPN
 #include <stdio.h> void main(){    long  num, reverse = 0, temp, remainder;     printf("Enter the number\n");    scanf("%ld", &num);    temp = num;    while (num > 0)    {        remainder = num % 10;        reverse = reverse * 10 + remainder;        num /= 10;    }    printf("Given number = %ld\n", temp);    printf("Its reverse is = %ld\n", reverse);}
================================ EOKW
--------------------------------
output:
Case:1
Enter the number
567865
Given number   = 567865
Its reverse is = 568765
 
Case:2
Enter the number
00001
Given number   = 00001
Its reverse is = 10000
--------------------------------
 
#include <stdio.h>
 
void main()
{
    long  num, reverse = 0, temp, remainder;
 
    printf("Enter the number\n");
    scanf("%ld", &num);
    temp = num;
    while (num > 0)
    {
        remainder = num % 10;
        reverse = reverse * 10 + remainder;
        num /= 10;
    }
    printf("Given number = %ld\n", temp);
    printf("Its reverse is = %ld\n", reverse);
}
 . 
*******************
 C Program to Reverse a Number & Check if it is a Palindrome 
================================ EOPN
  #include <stdio.h> void main(){    int num, temp, remainder, reverse = 0;     printf("Enter an integer \n");    scanf("%d", &num);    /*  original number is stored at temp 
================================ EOKW
--------------------------------
output:
Case:1
Enter an integer
6789
Given number is = 6789
Its reverse is  = 9876
Number is not a palindrome
 
Case:2
Enter an integer
58085
Given number is = 58085
Its reverse is  = 58085
Number is a palindrome
--------------------------------
 
 
#include <stdio.h>
 
void main()
{
    int num, temp, remainder, reverse = 0;
 
    printf("Enter an integer \n");
    scanf("%d", &num);
    /*  original number is stored at temp */
    temp = num;
    while (num > 0)
    {
        remainder = num % 10;
        reverse = reverse * 10 + remainder;
        num /= 10;
    }
    printf("Given number is = %d\n", temp);
    printf("Its reverse is  = %d\n", reverse);
    if (temp == reverse)
        printf("Number is a palindrome \n");
    else
        printf("Number is not a palindrome \n");
}
 . 
*******************
C Program to Find the Sum of two Binary Numbers
================================ EOPN
/* * C Program to Find the Sum of two Binary Numbers 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the first binary number: 100000
Enter the second binary number: 101010
Sum of two binary numbers: 1001010
--------------------------------
/*
 * C Program to Find the Sum of two Binary Numbers
 */
#include <stdio.h>
 
int main()
{
 
    long binary1, binary2;
    int i = 0, remainder = 0, sum[20];
 
    printf("Enter the first binary number: ");
    scanf("%ld", &binary1);
    printf("Enter the second binary number: ");
    scanf("%ld", &binary2);
    while (binary1 != 0 || binary2 != 0)
    {
        sum[i++] =(binary1 % 10 + binary2 % 10 + remainder) % 2;
        remainder =(binary1 % 10 + binary2 % 10 + remainder) / 2;
        binary1 = binary1 / 10;
        binary2 = binary2 / 10;
    }
    if (remainder != 0)
        sum[i++] = remainder;
    --i;
    printf("Sum of two binary numbers: ");
    while (i >= 0)
        printf("%d", sum[i--]);
    return 0;
}
 . 
*******************
C Program to Find Multiplication of two Binary Numbers
================================ EOPN
/* * C Program to Find Multiplication of two Binary Numbers 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the first binary number: 10010
Enter the second binary number: 10101
Product of two binary numbers: 101111010
--------------------------------
/*
 * C Program to Find Multiplication of two Binary Numbers
 */
#include <stdio.h>
 
int binaryproduct(int, int);
 
int main()
{
 
    long binary1, binary2, multiply = 0;
    int digit, factor = 1;
 
    printf("Enter the first binary number: ");
    scanf("%ld", &binary1);
    printf("Enter the second binary number: ");
    scanf("%ld", &binary2);
    while (binary2 != 0)
    {
        digit =  binary2 % 10;
        if (digit == 1)
        {
            binary1 = binary1 * factor;
            multiply = binaryproduct(binary1, multiply);
        }
        else
            binary1 = binary1 * factor;
        binary2 = binary2 / 10;
        factor = 10;
    }
    printf("Product of two binary numbers: %ld", multiply);
    return 0;
}
 
int binaryproduct(int binary1, int binary2)
{
    int i = 0, remainder = 0, sum[20];
    int binaryprod = 0;
 
    while (binary1 != 0 || binary2 != 0)
    {
        sum[i++] =(binary1 % 10 + binary2 % 10 + remainder) % 2;
        remainder =(binary1 % 10 + binary2 % 10 + remainder) / 2;
        binary1 = binary1 / 10;
        binary2 = binary2 / 10;
    }
    if (remainder != 0)
        sum[i++] = remainder;
    --i;
    while (i >= 0)
        binaryprod = binaryprod * 10 + sum[i--];
    return binaryprod;
}
 . 
*******************
C Program to find Product of 2 Numbers without using Recursion
================================ EOPN
/*  
 * C Program to find Product of 2 Numbers without using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm19.c
$ a.out
Enter two numbers to find their product:  89  458
Product of 89 and 458 is 40762
--------------------------------
 . 
*******************
C Program to Check whether a given Number is Armstrong
================================ EOPN
/*
 * C Program to Check whether a given Number is Armstrong
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm41.c -lm
$ a.out
enter a number370
The given no is armstrong no
 
$ a.out
enter a number1500
The given no is not a armstrong no
--------------------------------
 . 
*******************
C Program to Check whether a given Number is Perfect Number
================================ EOPN
/*
 * C Program to Check whether a given Number is Perfect Number
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm42.c
$ a.out
Enter a Number
6
Entered Number is perfect number
 
$ a.out
Enter a Number
100
Entered Number is not a perfect number
--------------------------------
 . 
*******************
C Program to Print Armstrong Number from 1 to 1000
================================ EOPN
/*
 * C Program to Print Armstrong Number from 1 to 1000
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm44.c
$ a.out
Print all Armstrong numbers between 1 and 1000:
 
Amstrong no is:1
Amstrong no is:153
Amstrong no is:370
Amstrong no is:371
Amstrong no is:407
--------------------------------
 . 
*******************
C Program to Add two Complex Numbers
================================ EOPN
/*
 * C Program to Add two Complex Numbers
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm55.c
$ a.out
Enter value of a and b complex number a + ib.
value of complex number a is = 10
value of complex number b is = 12
Enter value of c and d complex number c + id.
value of complex number c is = 15
value of complex number d is = 22
complex numbers sum is = 25 + 34i
--------------------------------
 . 
*******************
C Program to Generate Fibonacci Series of N Numbers using Command-Line Argument
================================ EOPN
/*
 * C program to generate Fibonacci Series. Fibonacci Series
 * is 0 1 1 2 3 5 8 13 21 ...
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm40.c
$ a.out
Enter the limit to generate the Fibonacci Series
6
Fibonacci Series is ...
0
1
1
2
3
5
--------------------------------
 . 
*******************
 C Program to Find the Sum of first 50 Natural Numbers using For Loop   
================================ EOPN
/*
 * C program to find the sum of first 50 natural numbers
 * using for loop
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm73.c
$ a.out
Sum = 1275
--------------------------------
 . 
*******************
 C Program to Swap the Contents of two Numbers using Bitwise XOR Operation 
================================ EOPN
/*
 * C program to swap the contents of two numbers using bitwise XOR
 * operation. Don't use either the temporary variable or arithmetic
 * operators
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm48.c
$ a.out
Enter two integers
45
89
 
Before swapping i= 45 and k = 89
After swapping i= 89 and k = 45
--------------------------------
 . 
*******************
 C Program to Multiply given Number by 4 using Bitwise Operators  
================================ EOPN
/*
 * C program to multiply given number by 4 using bitwise operators
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm62.c
$ a.out
Enter an integer
450
450 x 4 = 1800
--------------------------------
 . 
*******************
 C Program to Illustrate how User Authentication is Done 
================================ EOPN
/* * C program is to illustrate how user authentication is done. * Program asks for the user name and password and displays * the password as '*' character 
================================ EOKW
--------------------------------
output:
 
Enter User name: rajaraman
Enter the password <any 8 characters>: shashi12
********
Your password is :shashi12
--------------------------------
/*
 * C program is to illustrate how user authentication is done.
 * Program asks for the user name and password and displays
 * the password as '*' character
 */
#include <stdio.h>
 
void main()
{
	char password[10], username[10], ch;
	int i;
 
	printf("Enter User name: ");
	gets(username);
	printf("Enter the password < any 8 characters>: ");
	for (i = 0; i < 8; i++)
	{
            ch = getchar();
            password[i] = ch;
            ch = '*' ;
            printf("%c", ch);
	}
        password[i] = '\0';
	/*  Original password can be printed, if needed */
	printf("\n Your password is :");
	for (i = 0; i < 8; i++)
	{
            printf("%c", password[i]);
	}
}
 . 
*******************
C Program to Display the IP Address of the System
================================ EOPN
/* * C Program to Get IP Address 
================================ EOKW
--------------------------------
output:
 
IP Address is eth0 - 192.168.225.135
--------------------------------
/*
 * C Program to Get IP Address
 */
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <unistd.h>
#include <arpa/inet.h>
 
int main()
{
    int n;
    struct ifreq ifr;
    char array[] = "eth0";
 
    n = socket(AF_INET, SOCK_DGRAM, 0);
    //Type of address to retrieve - IPv4 IP address
    ifr.ifr_addr.sa_family = AF_INET;
    //Copy the interface name in the ifreq structure
    strncpy(ifr.ifr_name , array , IFNAMSIZ - 1);
    ioctl(n, SIOCGIFADDR, &ifr);
    close(n);
    //display result
    printf("IP Address is %s - %s\n" , array , inet_ntoa(( (struct sockaddr_in *)&ifr.ifr_addr )->sin_addr) );
    return 0;
}
 . 
*******************
C Program to Shutdown or Turn Off the Computer in Linux
================================ EOPN
/* * C Program to Shutdown or Turn Off the Computer in Linux. 
================================ EOKW
--------------------------------
output:
 
shutdown: Need to be root
--------------------------------
/*
 * C Program to Shutdown or Turn Off the Computer in Linux.
 */
#include <stdio.h>
 
int main()
{
    system("shutdown -P now");
    return 0;
}
 . 
*******************
 C Program to Find if a given Year is a Leap Year 
================================ EOPN
/* * C program to find whether a given year is leap year or not 
================================ EOKW
--------------------------------
output:
 
Enter a year
2012
2012 is a leap year
 
 
Enter a year
2009
2009 is not a leap year
--------------------------------
/*
 * C program to find whether a given year is leap year or not
 */
void main()
{
    int year;
 
    printf("Enter a year \n");
    scanf("%d", &year);
    if ((year % 400) == 0)
        printf("%d is a leap year \n", year);
    else if ((year % 100) == 0)
        printf("%d is a not leap year \n", year);
    else if ((year % 4) == 0)
        printf("%d is a leap year \n", year);
    else
        printf("%d is not a leap year \n", year);
}
 . 
*******************
C Program to Extract Last two Digits of a given Year
================================ EOPN
/* * C Program to Extract Last two Digits of a given Year 
================================ EOKW
--------------------------------
output:
Output:
Enter the year 2012
Last two digits of year is: 12
--------------------------------
/*
 * C Program to Extract Last two Digits of a given Year
 */
#include <stdio.h>
 
int main()
{
    int year, yr;
 
    printf("Enter the year ");
    scanf("%d", &year);
    yr = year % 100;
    printf("Last two digits of year is: %02d", yr);
    return 0;
}
 . 
*******************
 C Program to Display the Inventory of Items in a Store 
================================ EOPN
/*
 * C program to display the inventory of items in a store / shop
 * The inventory maintains details such as name, price, quantity
 * and manufacturing date of each item.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm60.c
$ a.out
Enter number of items:3
Item name:
pendrive
Item code:
123
Quantity:
6
price:
3000
Manufacturing date(dd-mm-yyyy):
30-9-2012
Item name:
computer
Item code:
124
Quantity:
10
price:
10000
Manufacturing date(dd-mm-yyyy):
30-7-2012
Item name:
optical mouse
Item code:
Quantity:
price:
Manufacturing date(dd-mm-yyyy):
             *****  INVENTORY *****
------------------------------------------------------------------
S.N.|    NAME           |   CODE   |  QUANTITY |  PRICE  | MFG.DATE
------------------------------------------------------------------
1     pendrive               123          6        3000     30/9/2012
2     computer               124          10       10000    30/7/2012
3     optical                0            0        0        0/0/0
------------------------------------------------------------------
 
$ a.out
Enter number of items:3
Item name:
pendrive
Item code:
123
Quantity:
6
price:
3000
Manufacturing date(dd-mm-yyyy):
30-9-2012
Item name:
computer
Item code:
124
Quantity:
10
price:
10000
Manufacturing date(dd-mm-yyyy):
30-7-2012
Item name:
Mouse
Item code:
125
Quantity:
10
price:
1500
Manufacturing date(dd-mm-yyyy):
30-6-2012
 
             *****  INVENTORY *****
------------------------------------------------------------------
S.N.|    NAME           |   CODE   |  QUANTITY |  PRICE    | MFG.DATE
------------------------------------------------------------------
1     pendrive               123          6        3000      30/9/2012
2     computer               124          10       10000     30/7/2012
3     Mouse                  125          10       1500      30/6/2012
------------------------------------------------------------------
--------------------------------
 . 
*******************
C Program to Display the ATM Transaction
================================ EOPN
/* * C Program to Display the ATM Transaction 
================================ EOKW
--------------------------------
output:
 
 
ENTER YOUR SECRET PIN NUMBER:1520
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 1
 
YOUR BALANCE IN Rs : 1000
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 2
 
ENTER THE AMOUNT TO WITHDRAW: 200
 
 
PLEASE COLLECT CASH
YOUR CURRENT BALANCE IS 800
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 3
 
ENTER THE AMOUNT TO DEPOSIT 5000
YOUR BALANCE IS 5800
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 1
 
YOUR BALANCE IN Rs : 5800
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 4
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 4
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: n
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
 
THANKS FOR USING OUT ATM SERVICE.
--------------------------------
/*
 * C Program to Display the ATM Transaction
 */
#include <stdio.h>
 
unsigned long amount=1000, deposit, withdraw;
int choice, pin, k;
char transaction ='y';
 
void main()
{
	while (pin != 1520)
	{
		printf("ENTER YOUR SECRET PIN NUMBER:");
		scanf("%d", &pin);
		if (pin != 1520)
		printf("PLEASE ENTER VALID PASSWORD\n");
	}
	do
	{
		printf("********Welcome to ATM Service**************\n");
		printf("1. Check Balance\n");
		printf("2. Withdraw Cash\n");
		printf("3. Deposit Cash\n");
		printf("4. Quit\n");
		printf("******************?**************************?*\n\n");
		printf("Enter your choice: ");
		scanf("%d", &choice);
		switch (choice)
		{
		case 1:
			printf("\n YOUR BALANCE IN Rs : %lu ", amount);
			break;
		case 2:
			printf("\n ENTER THE AMOUNT TO WITHDRAW: ");
			scanf("%lu", &withdraw);
			if (withdraw % 100 != 0)
			{
				printf("\n PLEASE ENTER THE AMOUNT IN MULTIPLES OF 100");
			}
			else if (withdraw >(amount - 500))
			{
				printf("\n INSUFFICENT BALANCE");
			}
			else
			{
				amount = amount - withdraw;
				printf("\n\n PLEASE COLLECT CASH");
				printf("\n YOUR CURRENT BALANCE IS%lu", amount);
			}
			break;
		case 3:
			printf("\n ENTER THE AMOUNT TO DEPOSIT");
			scanf("%lu", &deposit);
                        amount = amount + deposit;
			printf("YOUR BALANCE IS %lu", amount);
			break;
		case 4:
			printf("\n THANK U USING ATM");
			break;
		default:
			printf("\n INVALID CHOICE");
		}
		printf("\n\n\n DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n): \n");
		fflush(stdin);
		scanf("%c", &transaction);
		if (transaction == 'n'|| transaction == 'N')
                    k = 1;
	} while (!k);
	printf("\n\n THANKS FOR USING OUT ATM SERVICE");
}
 . 
*******************
 C Program to Accept the Height of a Person & Categorize as Taller, Dwarf & Average 
================================ EOPN
/* * C program to accept the height of a person in centimeter and * categorize the person based on height as taller, dwarf and * average height person 
================================ EOKW
--------------------------------
output:
Enter  the Height (in centimetres)
165
Average Height
 
Enter  the Height (in centimetres)
140
Dwarf
 
Enter  the Height (in centimetres)
190
Taller
--------------------------------
/*
 * C program to accept the height of a person in centimeter and
 * categorize the person based on height as taller, dwarf and
 * average height person
 */
 
#include <stdio.h>
void main()
{
    float height;
 
    printf("Enter  the Height (in centimetres) \n");
    scanf("%f", &height);
    if (height < 150.0)
        printf("Dwarf \n");
    else if ((height >= 150.0) && (height <= 165.0))
        printf(" Average Height \n");
    else if ((height > 165.0) && (height <= 195.0))
        printf("Taller \n");
    else
        printf("Abnormal height \n");
}
 . 
*******************
 C Program to Read a Grade & Display the Equivalent Description 
================================ EOPN
/* * C Program to accept a grade and declare the equivalent description * if code is S, then print SUPER * if code is A, then print VERY GOOD * if code is B, then print FAIR * if code is Y, then print ABSENT * if code is F, then print FAILS 
================================ EOKW
--------------------------------
output:
 
Enter the grade
s
RESULT  :  SUPER
 
Enter the grade
a
RESULT  :  VERY GOOD
 
Enter the grade
b
RESULT  :  FAIR
 
Enter the grade
y
RESULT  :  ABSENT
 
Enter the grade
f
RESULT  :  FAILS
--------------------------------
/*
 * C Program to accept a grade and declare the equivalent description
 * if code is S, then print SUPER
 * if code is A, then print VERY GOOD
 * if code is B, then print FAIR
 * if code is Y, then print ABSENT
 * if code is F, then print FAILS
 */
#include <stdio.h>
#include <ctype.h>
#include <string.h>
 
void main()
{
    char remark[15];
    char grade;
 
    printf("Enter the grade \n");
    scanf("%c", &grade);
    /*  lower case letter to upper case */
    grade = toupper(grade);
    switch(grade)
    {
    case 'S':
        strcpy(remark, " SUPER");
        break;
    case 'A':
        strcpy(remark, " VERY GOOD");
        break;
    case 'B':
        strcpy(remark, " FAIR");
        break;
    case 'Y':
        strcpy(remark, " ABSENT");
        break;
    case 'F':
        strcpy(remark, " FAILS");
        break;
    default :
        strcpy(remark, "ERROR IN GRADE \n");
        break;
    }
    printf("RESULT  : %s\n", remark);
}
 . 
*******************
 C Program to Illustrate the Concept of Unions 
================================ EOPN
/* * C program to illustrate the concept of unions 
================================ EOKW
--------------------------------
output:
 
Enter the value of n1: 10
Value of n1 = 10
Enter the value of n2: 50
Value of n2 = 50.000000
--------------------------------
/*
 * C program to illustrate the concept of unions
 */
#include <stdio.h>
 
void main()
{
    union number
    {
        int  n1;
        float n2;
    };
    union number x;
 
    printf("Enter the value of n1: ");
    scanf("%d", &x.n1);
    printf("Value of n1 = %d", x.n1);
    printf("\nEnter the value of n2: ");
    scanf("%f", &x.n2);
    printf("Value of n2 = %f\n", x.n2);
}
 . 
*******************
 C Program to Find the Size of a Union 
================================ EOPN
/* * C program to find the size of a union 
================================ EOKW
--------------------------------
output:
 
The size of union = 4
25 0.000000 
1045220557 0.200000
1045220464 0.199999
--------------------------------
/*
 * C program to find the size of a union
 */
#include <stdio.h>
 
void main()
{
    union sample
    {
        int   m;
        float n;
        char  ch;
    };
    union sample u;
 
    printf("The size of union = %d\n", sizeof(u));
    /*  initialization */
    u.m = 25;
    printf("%d %f %c\n", u.m, u.n, u.ch);
    u.n = 0.2;
    printf("%d %f %c\n", u.m, u.n, u.ch);
    u.ch = 'p';
    printf("%d %f %c\n", u.m, u.n, u.ch);
}
 . 
*******************
C Program to Display Function without using the Main Function
================================ EOPN
/* * C Program to display function without using the Main Function 
================================ EOKW
--------------------------------
output:
Output:
 
helloworld
--------------------------------
/*
 * C Program to display function without using the Main Function
 */
#include <stdio.h>
#define decode(s,t,u,m,p,e,d) m##s##u##t
#define begin decode(a,n,i,m,a,t,e)
 
int begin()
{
    printf(" helloworld ");
}
 . 
*******************
C Program to Print a Semicolon without using a Semicolon anywhere in the Code
================================ EOPN
/* * C Program to Print a Semicolon without using a Semicolon * anywhere in the code 
================================ EOKW
--------------------------------
output:
 
;
--------------------------------
/*
 * C Program to Print a Semicolon without using a Semicolon
 * anywhere in the code
 */
#include <stdio.h>
 
int main(void)
{
    //59 is the ascii value of semicolumn
    if (printf("%c ", 59))
    {
    }
    return 0;
}
 . 
*******************
C program to Increase 1 to all of the given Integer Digit
================================ EOPN
 /* * C program to Increase 1 to all of the given Integer Digit 
================================ EOKW
--------------------------------
output:
Enter a number: 3456
increasing 1 to all digits:  22
--------------------------------
 
/*
 * C program to Increase 1 to all of the given Integer Digit
 */
#include <stdio.h>
 
int main()
{
    int number, sum = 0, remainder, count;
 
    printf("Enter a number: ");
    scanf("%d", &number);
    while (number)
    {
        remainder = number % 10;
        sum  = sum + (remainder + 1);
        number /= 10;
    }
    printf("increasing 1 to all digits:  %d", sum);
    return 0;
}
 . 
*******************
C Program to Print Diamond Pattern
================================ EOPN
 /* * C Program to Print Diamond Pattern 
================================ EOKW
--------------------------------
output:
Enter number of rows
5
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
 
Enter number of rows
2
 *
***
 *
--------------------------------
 
/*
 * C Program to Print Diamond Pattern
 */
#include <stdio.h>
 
int main()
{
    int number, i, k, count = 1;
 
    printf("Enter number of rows\n");
    scanf("%d", &number);
    count = number - 1;
    for (k = 1; k <= number; k++)
    {
        for (i = 1; i <= count; i++)
            printf(" ");
        count--;
        for (i = 1; i <= 2 * k - 1; i++)
            printf("*");
        printf("\n");
     }
     count = 1;
     for (k = 1; k <= number - 1; k++)
     {
         for (i = 1; i <= count; i++)
             printf(" ");
         count++;
         for (i = 1 ; i <= 2 *(number - k)-  1; i++)
             printf("*");
         printf("\n");
      }
      return 0;
}
 . 
*******************
C Program to Print any Print Statement without using Semicolon
================================ EOPN
/* * C Program to Print any Print Statement without using Semicolon 
================================ EOKW
--------------------------------
output:
Output:
 
Hi.. Welcome to sanfoundry
--------------------------------
/*
 * C Program to Print any Print Statement without using Semicolon
 */
#include <stdio.h>
 
void main()
{
    if(printf("Hi.. Welcome to sanfoundry"))
    {
    }
}
 . 
*******************
C Program to Display its own Source Code as its Output
================================ EOPN
/* * C Program to Display its own Source Code as its Output 
================================ EOKW
--------------------------------
output:
Output:
 
/*
 * C Program to display its own source code as its output
 */
#include <stdio.h>
 
int main()
{
    FILE *fp;
    char ch;
 
    fp = fopen(__FILE__,"r");
    do
    {
        ch = getc(fp);
        putchar(ch);
     }
     while (ch != EOF);
     fclose(fp);
     return 0;
}
--------------------------------
/*
 * C Program to Display its own Source Code as its Output
 */
#include <stdio.h>
 
int main()
{
    FILE *fp;
    char ch;
 
    fp = fopen(__FILE__,"r");
    do
    {
        ch = getc(fp);
        putchar(ch);
     }
     while (ch != EOF);
     fclose(fp);
     return 0;
}
 . 
*******************
C Program to Illustrate Pass by Reference
================================ EOPN
/* * C Program to Illustrate Pass by Reference 
================================ EOKW
--------------------------------
output:
output:
the cube of the given number is 1000
--------------------------------
/*
 * C Program to Illustrate Pass by Reference
 */
#include <stdio.h>
 
void cube( int *x);
 
int main()
{
    int num = 10;
 
    cube(&num);
    printf("the cube of the given number is %d", num);
    return 0;
}
 
void  cube(int *x)
{
    *x = (*x) * (*x) * (*x);
}
 . 
*******************
C Program to Illustrate Pass by Value
================================ EOPN
/* * C Program to Illustrate Pass by Value. 
================================ EOKW
--------------------------------
output:
 
Before swapping num1 = 10 num2 = 20
After swapping num1 = 10 num2 = 20
--------------------------------
/*
 * C Program to Illustrate Pass by Value.
 */
#include <stdio.h>
 
void swap(int a, int b)
{
    int temp;
    temp = a;
    a = b;
    b = temp;
}
 
int main()
{
    int num1 = 10, num2 = 20;
 
    printf("Before swapping num1 = %d num2 = %d\n", num1, num2);
    swap(num1, num2);
    printf("After swapping num1 = %d num2 = %d \n", num1, num2);
    return 0;
}
 . 
*******************
C Program to Input 3 Arguments and Operate Appropriately on the Numbers
================================ EOPN
/*  * C Program to Input 3 Arguments and Operate Appropriately on the  * Numbers 
================================ EOKW
--------------------------------
output:
arguments entered:
5 4 +
The result of the operation is 9
 
arguments entered:
8 7 -
The result of the operation is 1
 
arguments entered:
9 6 x
The result of the operation is 54
 
arguments entered:
100 10 /
The result of the operation is 10
--------------------------------
/* 
 * C Program to Input 3 Arguments and Operate Appropriately on the 
 * Numbers
 */
#include <stdio.h>
 
void main(int argc, char * argv[])
{
    int a, b, result;
    char ch;
 
    printf("arguments entered: \n");
    a = atoi(argv[1]);
    b = atoi(argv[2]);
    ch  = *argv[3];
    printf("%d %d %c", a, b, ch);
    switch (ch)
    {
    case '+':
        result = a + b;
        break;
    case '-':
        result = a - b;
        break;
    case 'x':
        result = a * b;
        break;
    case '/':
        result = a / b;
        break;
    default:
        printf("Enter a valid choice");
    }
    printf("\nThe result of the operation is %d", result);
    printf("\n");    
}
 . 
*******************
C Program to Print the Program Name and All its Arguments
================================ EOPN
/*
 * C Program to Print the Program Name and All its Arguments
 
================================ EOKW
--------------------------------
output:
 
$ cc arg9.c
$ a.out this is  c class by sanfoundry
a.out this is c class by sanfoundry
--------------------------------
 . 
*******************
 C Program to Calculate Sum & Average of an Array 
================================ EOPN
/* * C program to read N integers into an array A and * a) Find the sum of all numbers * b) Find the average of all numbers * Display the results with suitable headings 
================================ EOKW
--------------------------------
output:
Enter the value of N
5
Enter 5 numbers (-ve, +ve and zero)
10
20
30
40
50
 
Input array elements
10
20
30
40
50
 
Sum of all numbers =  150
 
Average of all input numbers =  30
--------------------------------
/*
 * C program to read N integers into an array A and
 * a) Find the sum of all numbers
 * b) Find the average of all numbers
 * Display the results with suitable headings
 */
 
#include  <stdio.h>
 
int main()
{
    int i, num;
    float total = 0.0, average;
    printf ("Enter the value of N \n");
    scanf("%d", &num);
    int array[num];
 
    printf("Enter %d numbers (-ve, +ve and zero) \n", num);
 
    for (i = 0; i < num; i++)
    {
        scanf("%d", &array[i]);
    }
 
    printf("Input array elements \n");
 
    for (i = 0; i < num; i++)
    {
        printf("%+3d\n", array[i]);
    }
 
    /*  Summation starts */
 
    for (i = 0; i < num; i++)
    {
        total+=array[i];/* this means total=total+array[i]; */
    }
 
    average = total / num;
 
    printf("\n Sum of all numbers =  %.2f\n", total);
 
    printf("\n Average of all input numbers =  %.2f\n", average);
 
}
 . 
*******************
 C Program to Calculate the Sum of the Array Elements using Pointer 
================================ EOPN
/* * C program to read N integers and store them in an array A. * Find the sum of all these elements using pointer. 
================================ EOKW
--------------------------------
output:
Enter the size of array A
5
Enter Elements of the List
4
9
10
56
100
Sum of all elements in array = 179
--------------------------------
/*
 * C program to read N integers and store them in an array A.
 * Find the sum of all these elements using pointer.
 */
 
#include <stdio.h>
#include <malloc.h>
 
void main()
{
	int i, n, sum = 0;
	int *a;
 
     	printf("Enter the size of array A \n");
	scanf("%d", &n);
 
        a = (int *) malloc(n * sizeof(int));
 
        printf("Enter Elements of the List \n");
	for (i = 0; i < n; i++) 
        {
		scanf("%d", a + i);
	}
 
        /*  Compute the sum of all elements in the given array */
 
        for (i = 0; i < n; i++)
        {
		sum = sum + *(a + i); 
               /* this *(a+i) is used to access the value stored at the address*/
	}
 
        printf("Sum of all elements in array = %d\n", sum);
        return 0;
}
 . 
*******************
 C Program to Calculate Sum of all Elements of an Array using Pointers as Arguments 
================================ EOPN
     /*     * C program to find the sum of all elements of an array using      * pointers as arguments.    
================================ EOKW
--------------------------------
output:
 
Sum of all array elements =  3000
--------------------------------
 
    /*
     * C program to find the sum of all elements of an array using 
     * pointers as arguments.
    */
 
#include <stdio.h>
 
void main()
{
	static int array[5] = { 200, 400, 600, 800, 1000 };
	int sum;
 
  	int addnum(int *ptr);
     	sum = addnum(array);
 
        printf("Sum of all array elements = %5d\n", sum);
 
}
 
int addnum(int *ptr)
{
	int index, total = 0;
	for (index = 0; index < 5; index++) 
        {
		total += *(ptr + index);
	}
	return(total);
 
}
 . 
*******************
C Program to Compute the Sum of two One-Dimensional Arrays using Malloc 
================================ EOPN
/* * C program to find the sum of two one-dimensional arrays using * Dynamic Memory Allocation 
================================ EOKW
--------------------------------
output:
Enter the size of the arrays
5
Enter Elements of First List
23
45
67
12
90
Enter Elements of Second List
87
56
90
45
10
Resultant List is
110
101
157
57
100
--------------------------------
/*
 * C program to find the sum of two one-dimensional arrays using
 * Dynamic Memory Allocation
 */
 
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
 
void main()
{
 
        int i, n;
	int *a, *b, *c;
 
        printf("Enter the size of the arrays\n");
        scanf("%d", &n);
 
        a = (int *)malloc(n * sizeof(int));
        b = (int *)malloc(n * sizeof(int));
        c = (int *)malloc(n * sizeof(int));
 
        printf("Enter Elements of First List\n");
 
        for (i = 0; i < n; i++)
        {
  		scanf("%d", a + i);
	}
 
        printf("Enter Elements of Second List\n");
 
        for (i = 0; i < n; i++)
        {
 		scanf("%d", b + i);
	}
 
        for (i = 0; i < n; i++)
        {
		*(c + i) = *(a + i) + *(b + i);
	}
 
        printf("Resultant List is\n");
 
        for (i = 0; i < n; i++)
        {
		printf("%d\n", *(c + i));
	}
        return 0;
}
 . 
*******************
C Program to Find the Sum of Contiguous Subarray within a 1  D Array of Numbers which has the Largest Sum
================================ EOPN
/* * C Program to Find the Sum of Contiguous Subarray within a  * 1 - D Array of Numbers which has the Largest Sum 
================================ EOKW
--------------------------------
output:
Type the length of the array
8
type the elements of the array
-1
-5
5
3
-2
5
4
1
 
The largest contiguous subarray is 5  3  -2  5  4  1
The sum of the largest contiguous subarray is 16
--------------------------------
/*
 * C Program to Find the Sum of Contiguous Subarray within a 
 * 1 - D Array of Numbers which has the Largest Sum
 */
 
#include<stdio.h>
 
int main()
{
    int size,m=0,l=0;
 
    printf("Type the length of the array\n");
    scanf("%d",&size);
    int array[size];
    printf("type the elements of the array\n");
 
    for(int i=0;i<size;i++)
    {
        scanf("%d",&array[i]);
 
    }
 
    int largest=array[0];
    for(int i=0;i<size;i++)
    {
        int sum=0;
        for(int j=i;j<size;j++)
        {
            sum=sum+array[j];
            if(sum>largest)
            {
                m=i;l=j;
                largest=sum;
            }
        }
    }
 
    printf("\n The largest contigous subarray is");
    for(int z=m;z<=l;z++)
    {
        printf(" %d ",array[z]);
    }
    printf("\n The sum of the largest contigous subarray is");
    printf(" %d",largest);
    return 0;
}
 . 
*******************
 C Program to Find the Largest Two Numbers in a given Array 
================================ EOPN
/* * C program to read elements into an array and find the * largest two elements in a given array. 
================================ EOKW
--------------------------------
output:
Enter the size of the array
5
Enter the elements
2
4
5
8
7
The array elements are :
2       4       5       8       7
The FIRST LARGEST = 8
THE SECOND LARGEST = 7
--------------------------------
/*
 * C program to read elements into an array and find the
 * largest two elements in a given array.
 */
 
#include <stdio.h>
int main ()
{
    int n = 0, i = 0, largest1 = 0, largest2 = 0, temp = 0;
 
    printf ("Enter the size of the array\n");
    scanf ("%d", &n);
    int array[n];
    printf ("Enter the elements\n");
    for (i = 0; i < n; i++)
    {
        scanf ("%d", &array[i]);
    }
 
    printf ("The array elements are : \n");
    for (i = 0; i < n; i++)
    {
        printf ("%d\t", array[i]);
    }
 
    printf ("\n");
 
    largest1 = array[0];
    largest2 = array[1];
 
    if (largest1 < largest2)
    {
        temp = largest1;
        largest1 = largest2;
        largest2 = temp;
    }
 
    for (int i = 2; i < n; i++)
    {
        if (array[i] > largest1)
        {
            largest2 = largest1;
            largest1 = array[i];
        }
        else if (array[i] > largest2 && array[i] != largest1)
        {
            largest2 = array[i];
        }
    }
 
    printf ("The FIRST LARGEST = %d\n", largest1);
    printf ("THE SECOND LARGEST = %d\n", largest2);
 
    return 0;
}
 . 
*******************
 C Program to Find the Second Largest & Smallest Elements in an Array 
================================ EOPN
     /*     * C program to accept a list of data items and find the second largest     * and smallest elements in it. Compute the average of both and search     * for the average value if it is present in the array.     * Display appropriate message on successful search.    
================================ EOKW
--------------------------------
output:
Enter the value of N
4
Enter the numbers
450
340
120
670
The numbers arranged in descending order are given below
670
450
340
120
The 2nd largest number is  = 450
The 2nd smallest number is = 340
The average of 450  and 340 is = 395 is not in the array
--------------------------------
 
    /*
     * C program to accept a list of data items and find the second largest
     * and smallest elements in it. Compute the average of both and search
     * for the average value if it is present in the array.
     * Display appropriate message on successful search.
    */
 
    #include <stdio.h>
    void main ()
    {
 
        int number[30];
        int i, j, a, n, counter, average;
 
        printf("Enter the value of N\n");
        scanf("%d", &n);
 
        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
            scanf("%d", &number[i]);
 
        for (i = 0; i < n; ++i)
        {
            for (j = i + 1; j < n; ++j)
            {
                if (number[i] < number[j])
                {
                    a = number[i];
                    number[i] = number[j];
                    number[j] = a;
                }
            }
 
        }
 
        printf("The numbers arranged in descending order are given below \n");
 
        for (i = 0; i < n; ++i)
        {
            printf("%d\n", number[i]);
        }
 
        printf("The 2nd largest number is  = %d\n", number[1]);
        printf("The 2nd smallest number is = %d\n", number[n - 2]);
 
        average = (number[1] + number[n - 2]) / 2;
        counter = 0;
 
        for (i = 0; i < n; ++i)
        {
            if (average == number[i])
            {
                ++counter;
            }
        }
 
        if (counter == 0 )
            printf("The average of %d  and %d is = %d is not in the array \n",
            number[1], number[n - 2], average);
 
        else
            printf("The average of %d  and %d in array is %d in numbers \n",
            number[1], number[n - 2], counter);
    }
 . 
*******************
C Program to Find the Largest Number in an Array
================================ EOPN
/* * C program to read N integers into an array A and * a) Find the sum of all numbers * b) Find the average of all numbers * Display the results with suitable headings 
================================ EOKW
--------------------------------
output:
Enter the size of the array: 5
 
Enter 5 elements of  the array: 
12
56
34
78
100
 
largest element present in the given array is: 100
--------------------------------
/*
 * C program to read N integers into an array A and
 * a) Find the sum of all numbers
 * b) Find the average of all numbers
 * Display the results with suitable headings
 */
 
#include <stdio.h>
 
int main()
{
 
        int size, i, largest;
 
        printf("\n Enter the size of the array: ");
        scanf("%d", &size);
        int array[size];
 
        printf("\n Enter %d elements of  the array: \n", size);
 
        for (i = 0; i < size; i++)
        {   
            scanf("%d", &array[i]);
        }
 
        largest = array[0];
 
        for (i = 1; i < size; i++) 
        {
            if (largest < array[i])
            largest = array[i];
        }
 
        printf("\n largest element present in the given array is : %d", largest);
 
        return 0;
 
}
 . 
*******************
 C Program to Put Even & Odd Elements of an Array in 2 Separate Arrays 
================================ EOPN
     /*     * C Program to accept N integer number and store them in an array AR.     * The odd elements in the AR are copied into OAR and other elements     * are copied into EAR. Display the contents of OAR and EAR.    
================================ EOKW
--------------------------------
output:
Enter the size of array AR
6
Enter the elements of the array
34
56
78
90
12
39
The elements of OAR are
39
The elements of EAR are
34
56
78
90
12
--------------------------------
 
    /*
     * C Program to accept N integer number and store them in an array AR.
     * The odd elements in the AR are copied into OAR and other elements
     * are copied into EAR. Display the contents of OAR and EAR.
    */
 
    #include <stdio.h>
    void main()
    {
 
        long int ARR[10], OAR[10], EAR[10];
        int i, j = 0, k = 0, n;
 
        printf("Enter the size of array AR n");
        scanf("%d", &n);
 
        printf("Enter the elements of the array n");
        for (i = 0; i < n; i++)
        {
            scanf("%ld", &ARR[i]);
            fflush(stdin);
        }
 
        /*  Copy odd and even elements into their respective arrays */
 
        for (i = 0; i < n; i++)
        {
            if (ARR[i] % 2 == 0)
            {
                EAR[j] = ARR[i];
                j++;
            }
            else
            {
                OAR[k] = ARR[i];
                k++;
            }
        }
 
        printf("The elements of OAR are n");
        for (i = 0; i < k; i++)
        {
            printf("%ldn", OAR[i]);
        }
 
        printf("The elements of EAR are n");
        for (i = 0; i < j; i++)
        {
            printf("%ldn", EAR[i]);
        }
 
    }
 . 
*******************
 C Program to Insert an Element in a Specified Position in a given Array  
================================ EOPN
   /*   * C program to insert a particular element in a specified position   * in a given array  
================================ EOKW
--------------------------------
output:
Enter how many elements
5
Enter the elements
76
90
56
78
12
Input array elements are
76
90
56
78
12
Sorted list is
12
56
76
78
90
Enter the element to be inserted
61
Final list is
12
56
61
76
78
90
--------------------------------
 
  /*
   * C program to insert a particular element in a specified position
   * in a given array
  */
 
    #include <stdio.h>
    void main()
    {
        int array[10];
        int i, j, n, m, temp, key, pos;
 
        printf("Enter how many elements \n");
        scanf("%d", &n);
        printf("Enter the elements \n");
 
        for (i = 0; i < n; i++)
        {
            scanf("%d", &array[i]);
        }
 
        printf("Input array elements are \n");
        for (i = 0; i < n; i++)
        {
            printf("%d\n", array[i]);
        }
 
	// Sorting the elements of the array
        for (i = 0; i < n; i++)
        {
            for (j = i + 1; j < n; j++)
            {
                if (array[i] > array[j])
                {
                    temp = array[i];
                    array[i] = array[j];
                    array[j] = temp;
                }
             }
        }
 
        printf("Sorted list is \n");
        for (i = 0; i < n; i++)
        {
            printf("%d\n", array[i]);
        }
 
        printf("Enter the element to be inserted \n");
        scanf("%d", &key);
 
        for (i = 0; i < n; i++)
        {
            if (key < array[i])
            {
                pos = i;
                break;
            }
            if (key > array[n-1])
            { 
                pos = n;
                break;
            }
        }
        if (pos != n)
        {
            m = n - pos + 1 ;
            for (i = 0; i <= m; i++)
            {
                array[n - i + 2] = array[n - i + 1] ;
            }
        }
 
        array[pos] = key;
 
        printf("Final list is \n");
        for (i = 0; i < n + 1; i++)
        {
            printf("%d\n", array[i]);
        }
 
    }
 . 
*******************
 C Program to Delete the Specified Integer from an Array 
================================ EOPN
     /*     * C program to accept an array of integers and delete the     * specified integer from the list    
================================ EOKW
--------------------------------
output:
Enter how many elements
4
Enter the elements
345
234
678
987
Input array elements are
345
234
678
987
Enter the element to be deleted
234
The resultant vector is
345
678
987
--------------------------------
 
    /*
     * C program to accept an array of integers and delete the
     * specified integer from the list
    */
 
 
 
    #include <stdio.h>
    void main()
    {
        int vectorx[10];
        int i, n, pos, element, found = 0;
 
        printf("Enter how many elements\n");
        scanf("%d", &n);
        printf("Enter the elements\n");
 
        for (i = 0; i < n; i++)
        {
            scanf("%d", &vectorx[i]);
        }
 
        printf("Input array elements are\n");
        for (i = 0; i < n; i++)
        {
            printf("%d\n", vectorx[i]);
        }
 
        printf("Enter the element to be deleted\n");
        scanf("%d", &element);
 
        for (i = 0; i < n; i++)
        {
            if (vectorx[i] == element)
            {
                found = 1;
                pos = i;
                break;
            }
        }
 
        if (found == 1)
        {
            for (i = pos; i <  n - 1; i++)
            {
                vectorx[i] = vectorx[i + 1];
            }
 
            printf("The resultant vector is \n");
            for (i = 0; i < n - 1; i++)
            {
                printf("%d\n", vectorx[i]);
            }
 
        }
        else
            printf("Element %d is not found in the vector\n", element);
 
    }
 . 
*******************
 C Program to Cyclically Permute the Elements of an Array 
================================ EOPN
    /*     * C program to cyclically permute the elements of an array A.     * i.e. the content of A1 become that of A2. And A2 contains     * that of A3 & so on as An contains A1     
================================ EOKW
--------------------------------
output:
Enter the value of the n = 4
Enter the numbers
3
40
100
68
Cyclically permuted numbers are given below
40
100
68
3
--------------------------------
    /*
     * C program to cyclically permute the elements of an array A.
     * i.e. the content of A1 become that of A2. And A2 contains
     * that of A3 & so on as An contains A1
     */
 
    #include <stdio.h>
    void main ()
    {
 
        int i, n, number[30];
        printf("Enter the value of the n = ");
        scanf("%d", &n);
 
        printf("Enter the numbers\n");
        for (i = 0; i < n; ++i) 
        {
            scanf("%d", &number[i]);
        }
 
        number[n] = number[0];
        for (i = 0; i < n; ++i)
        {
            number[i] = number[i + 1];
        } 
 
        printf("Cyclically permuted numbers are given below \n");
        for (i = 0; i < n; ++i)
            printf("%d\n", number[i]);
 
    }
 . 
*******************
 C Program to Sort the Array in an Ascending Order 
================================ EOPN
     /*     * C program to accept N numbers and arrange them in an ascending order     
================================ EOKW
--------------------------------
output:
 
Enter the value of N
6
Enter the numbers
3
78
90
456
780
200
The numbers arranged in ascending order are given below
3
78
90
200
456
780
--------------------------------
 
    /*
     * C program to accept N numbers and arrange them in an ascending order
     */
 
    #include <stdio.h>
    void main()
    {
 
        int i, j, a, n, number[30];
        printf("Enter the value of N \n");
        scanf("%d", &n);
 
        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
            scanf("%d", &number[i]);
 
        for (i = 0; i < n; ++i) 
        {
 
            for (j = i + 1; j < n; ++j)
            {
 
                if (number[i] > number[j]) 
                {
 
                    a =  number[i];
                    number[i] = number[j];
                    number[j] = a;
 
                }
 
            }
 
        }
 
        printf("The numbers arranged in ascending order are given below \n");
        for (i = 0; i < n; ++i)
            printf("%d\n", number[i]);
 
    }
 . 
*******************
 C Program to Sort the Array in Descending Order 
================================ EOPN
   /*    * C program to accept a set of numbers and arrange them    * in a descending order    
================================ EOKW
--------------------------------
output:
Enter the value of N
5
Enter the numbers
234
780
130
56
90
The numbers arranged in descending order are given below
780
234
130
90
56
--------------------------------
   /*
    * C program to accept a set of numbers and arrange them
    * in a descending order
    */
 
    #include <stdio.h>
    void main ()
    {
 
        int number[30];
 
        int i, j, a, n;
        printf("Enter the value of N\n");
        scanf("%d", &n);
 
        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
	        scanf("%d", &number[i]);
 
        /*  sorting begins ... */
 
        for (i = 0; i < n; ++i) 
        {
            for (j = i + 1; j < n; ++j) 
            {
                if (number[i] < number[j]) 
                {
                    a = number[i];
                    number[i] = number[j];
                    number[j] = a;
                }
            }
        }
 
        printf("The numbers arranged in descending order are given below\n");
 
        for (i = 0; i < n; ++i) 
        {
            printf("%d\n", number[i]);
        }
 
    }
 . 
*******************
 C Program to Sort Names in an Alphabetical Order 
================================ EOPN
    /*     * C program to read N names, store them in the form of an array     * and sort them in alphabetical order. Output the given names and     * the sorted names in two columns side by side.     
================================ EOKW
--------------------------------
output:
Enter the value of n
7
Enter 7 names
heap
stack
queue
object
class
program
project
 
----------------------------------------
Input Names    Sorted names
------------------------------------------
heap           class
stack          heap
queue          object
object         program
class          project
program        queue
project        stack
------------------------------------------
--------------------------------
    /*
     * C program to read N names, store them in the form of an array
     * and sort them in alphabetical order. Output the given names and
     * the sorted names in two columns side by side.
     */
 
    #include <stdio.h>
    #include <string.h>
    void main()
    {
 
        char name[10][8], tname[10][8], temp[8];
        int i, j, n;
 
        printf("Enter the value of n \n");
        scanf("%d", &n);
        printf("Enter %d names n \n", n);
 
        for (i = 0; i < n; i++) 
        {
            scanf("%s", name[i]);
            strcpy(tname[i], name[i]);
        }
 
        for (i = 0; i < n - 1 ; i++)
        {
            for (j = i + 1; j < n; j++)
            {
                if (strcmp(name[i], name[j]) > 0) 
                {
                    strcpy(temp, name[i]);
                    strcpy(name[i], name[j]);
                    strcpy(name[j], temp);
                }
            }
        }
 
        printf("\n----------------------------------------\n");
        printf("Input NamestSorted names\n");
        printf("------------------------------------------\n");
 
        for (i = 0; i < n; i++) 
        {
            printf("%s\t\t%s\n", tname[i], name[i]);
        }
 
        printf("------------------------------------------\n");
 
    }
 . 
*******************
C Program to Merge the Elements of 2 Sorted Array
================================ EOPN
    /*     * C Program to Merge the Elements of 2 Sorted Array     
================================ EOKW
--------------------------------
output:
Enter size of array Array 1: 4
 
Enter sorted elements of array 1:
12
18
40
60
 
Enter size of array 2: 4
 
Enter sorted elements of array 2:
47
56
89
90
 
After merging:
 
12
18
40
47
56
60
89
90
--------------------------------
    /*
     * C Program to Merge the Elements of 2 Sorted Array
     */
 
    #include <stdio.h>
    void main()
    {
 
        int array1[50], array2[50], array3[100], m, n, i, j, k = 0;
        printf("\n Enter size of array Array 1: ");
        scanf("%d", &m);
 
        printf("\n Enter sorted elements of array 1: \n");
        for (i = 0; i < m; i++) 
        {
            scanf("%d", &array1[i]);
        }
 
        printf("\n Enter size of array 2: ");
        scanf("%d", &n);
 
        printf("\n Enter sorted elements of array 2: \n");
        for (i = 0; i < n; i++) 
        {
            scanf("%d", &array2[i]);
        }
 
        i = 0;
        j = 0;
 
        while (i < m && j < n) 
        {
            if (array1[i] < array2[j]) 
            {
                array3[k] = array1[i];
                i++;
            }
 
            else 
            {
                array3[k] = array2[j];
                j++;
            }
            k++;
        }
 
        if (i >= m) 
        {
            while (j < n) 
            {
                array3[k] = array2[j];
                j++;
                k++;
            }
        }
 
        if (j >= n) 
        {
            while (i < m)
            {
                array3[k] = array1[i];
                i++;
                k++;
            }
        }
 
        printf("\n After merging: \n");
        for (i = 0; i < m + n; i++) 
        {
            printf("\n%d", array3[i]);
        }
 
    }
 . 
*******************
 C Program to Split  an Array from Specified Position & Add First Part to the End 
================================ EOPN
     /*     * C program to read an array, accept a key & split the array.     * Add the first half to the end of second half.     
================================ EOKW
--------------------------------
output:
Enter the value of n
4
enter the numbers
3
678
345
876
Enter the position of the element to split the array
3
The resultant array is
876
3
678
345
--------------------------------
 
    /*
     * C program to read an array, accept a key & split the array.
     * Add the first half to the end of second half.
     */
 
    #include <stdio.h>
    void main ()
    {
 
        int number[30];
        int i, n, a, j;
 
        printf("Enter the value of n\n");
        scanf("%d", &n);
 
        printf("enter the numbers\n");
        for (i = 0; i < n; ++i)
            scanf("%d", &number[i]);
 
        printf("Enter the position of the element to split the array \n");
        scanf("%d", &a);
 
        for (i = 0; i < a; ++i) 
        {
 
            number[n] = number[0];
            for (j = 0; j < n; ++j) 
            {
                number[j] = number[j + 1];
            }
 
        }
 
        printf("The resultant array is\n");
 
        for (i = 0; i < n; ++i) 
        {
            printf("%d\n", number[i]);
        }
 
    }
 . 
*******************
 C Program to Accept an Array & Swap Elements using Pointers 
================================ EOPN
    /*     * C program to accept an array of 10 elements and swap 3rd element     * with 4th element using pointers and display the results.     
================================ EOKW
--------------------------------
output:
How many Elements...
4
Enter Elements one by one
23
67
45
15
 
Resultant Array...
X[0] = 23.000000
X[1] = 67.000000
X[2] = 15.000000
X[3] = 45.000000
--------------------------------
    /*
     * C program to accept an array of 10 elements and swap 3rd element
     * with 4th element using pointers and display the results.
     */
 
    #include <stdio.h>
    void swap34(float *ptr1, float *ptr2);
    void main()
    {
 
        float x[10];
        int i, n;
 
        printf("How many Elements...\n");
        scanf("%d", &n);
 
        printf("Enter Elements one by one\n");
        for (i = 0; i < n; i++) 
        {
            scanf("%f", x + i);
        }
 
        /*  Function call:Interchanging 3rd element by 4th */
 
        swap34(x + 2, x + 3);
        printf("\nResultant Array...\n");
 
        for (i = 0; i < n; i++) 
        {
            printf("X[%d] = %f\n", i, x[i]);
        }
 
    }
 
    /*  Function to swap the 3rd element with the 4th element in the array */
 
    void swap34(float *ptr1, float *ptr2 ) 
    {
 
        float temp;
        temp = *ptr1;
        *ptr1 = *ptr2;
        *ptr2 = temp;
 
    }
 . 
*******************
 C Program to Read an Array and Search for an Element 
================================ EOPN
     /*     * C program accept an array of N elements and a key to search.     * If the search is successful, it displays "SUCCESSFUL SEARCH".     * Otherwise, a message "UNSUCCESSFUL SEARCH" is displayed.     
================================ EOKW
--------------------------------
output:
Enter the size of an array
4
Enter the array elements
90
560
300
390
Enter the key
90
SUCCESSFUL SEARCH
 
$ a.out
Enter the size of an array
4
Enter the array elements
100
500
580
470
Enter the key
300
UNSUCCESSFUL SEARCH
--------------------------------
 
    /*
     * C program accept an array of N elements and a key to search.
     * If the search is successful, it displays "SUCCESSFUL SEARCH".
     * Otherwise, a message "UNSUCCESSFUL SEARCH" is displayed.
     */
 
    #include <stdio.h>
    void main()
    {
 
        int array[20];
        int i, low, mid, high, key, size;
 
        printf("Enter the size of an array\n");
        scanf("%d", &size);
 
        printf("Enter the array elements\n");
        for (i = 0; i < size; i++) 
        {
            scanf("%d", &array[i]);
        }
 
        printf("Enter the key\n");
        scanf("%d", &key);
 
        /*  search begins */
 
        low = 0;
        high = (size - 1);
 
        while (low <= high) 
        {
            mid = (low + high) / 2;
 
            if (key == array[mid]) 
            {
                printf("SUCCESSFUL SEARCH\n");
                return;
            }
 
            if (key < array[mid])
                high = mid - 1;
 
            else
                low = mid + 1;
 
        }
 
        printf("UNSUCCESSFUL SEARCH\n");
 
    }
 . 
*******************
C Program to accept Sorted Array and do Search using Binary Search 
================================ EOPN
/* * C program to accept N numbers sorted in ascending order * and to search for a given number using Binary Search. * Report success or failure. 
================================ EOKW
--------------------------------
output:
If the input array is {1, 2, 3, 4, 5, 6}
and the key to be searched for is 6
then the expected output will be "Search Successful".
--------------------------------
/*
 * C program to accept N numbers sorted in ascending order
 * and to search for a given number using Binary Search.
 * Report success or failure.
 */
#include <stdio.h>
 
void main()
{
    int array[10];
    int i, j, num, temp, keynum;
    int low, mid, high; 
    printf("Enter the value of num \n");
    scanf("%d", &num);
    printf("Enter the elements one by one \n");
    for (i = 0; i < num; i++)
    {
        scanf("%d", &array[i]);
    }
    printf("Input array elements \n");
    for (i = 0; i < num; i++)
    {
        printf("%d\n", array[i]);
    }
    /*  Bubble sorting begins */
    for (i = 0; i < num; i++)
    {
        for (j = 0; j < (num - i - 1); j++)
        {
            if (array[j] > array[j + 1])
            {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
    printf("Sorted array is...\n");
    for (i = 0; i < num; i++)
    {
        printf("%d\n", array[i]);
    }
    printf("Enter the element to be searched \n");
    scanf("%d", &keynum);
    /*  Binary searching begins */
    low = 1;
    high = num;
    do
    {
        mid = (low + high) / 2;
        if (keynum < array[mid])
            high = mid - 1;
        else if (keynum > array[mid])
            low = mid + 1;
    } while (keynum != array[mid] && low <= high);
    if (keynum == array[mid])
    {
        printf("SEARCH SUCCESSFUL \n");
    }
    else
    {
        printf("SEARCH FAILED \n");
    }
}
 . 
*******************
C Program to find the Biggest Number in an Array of Numbers using Recursion
================================ EOPN
     /*     * C Program to find the Biggest Number in an Array of Numbers using      * Recursion     
================================ EOKW
--------------------------------
output:
Enter size of the list:8
Printing the list:
7	6	1	3	1	7	2	4
The largest number in the list is: 7
--------------------------------
 
    /*
     * C Program to find the Biggest Number in an Array of Numbers using 
     * Recursion
     */
 
    #include <stdio.h>
    int large(int[], int, int);
 
    int main()
    {
 
        int size;
        int largest;
        int list[20];
        int i;
 
        printf("Enter size of the list:");
        scanf("%d", &size);
 
        printf("Printing the list:\n");
        for (i = 0; i < size ; i++) 
        {
            list[i] = rand() % size;
            printf("%d \t", list[i]);
        }
 
        if (size == 0) 
        {
            printf("Empty list\n");
        }
 
        else 
        {
            largest = list[0];
            largest = large(list, size - 1, largest);
            printf("\nThe largest number in the list is: %d\n", largest);
        }
 
    }
 
    int large(int list[], int position, int largest)
    {
 
        if (position == 0)
            return largest;
 
        if (position > 0) 
        {
            if (list[position] > largest)
            {
                largest = list[position];
            }
            return large(list, position - 1, largest);
        }
 
    }
 . 
*******************
C Program to Implement a Queue using an Array
================================ EOPN
/* * C Program to Implement a Queue using an Array 
================================ EOKW
--------------------------------
output:
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 10
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 15
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 20
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 30
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 2
Element deleted from queue is : 10
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 3
Queue is :
15 20 30
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 4
--------------------------------
/*
 * C Program to Implement a Queue using an Array
 */
#include <stdio.h>
 
#define MAX 50
 
void insert();
void delete();
void display();
int queue_array[MAX];
int rear = - 1;
int front = - 1;
main()
{
    int choice;
    while (1)
    {
        printf("1.Insert element to queue \n");
        printf("2.Delete element from queue \n");
        printf("3.Display all elements of queue \n");
        printf("4.Quit \n");
        printf("Enter your choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
            insert();
            break;
            case 2:
            delete();
            break;
            case 3:
            display();
            break;
            case 4:
            exit(1);
            default:
            printf("Wrong choice \n");
        } /* End of switch */
    } /* End of while */
} /* End of main() */
 
void insert()
{
    int add_item;
    if (rear == MAX - 1)
    printf("Queue Overflow \n");
    else
    {
        if (front == - 1)
        /*If queue is initially empty */
        front = 0;
        printf("Inset the element in queue : ");
        scanf("%d", &add_item);
        rear = rear + 1;
        queue_array[rear] = add_item;
    }
} /* End of insert() */
 
void delete()
{
    if (front == - 1 || front > rear)
    {
        printf("Queue Underflow \n");
        return ;
    }
    else
    {
        printf("Element deleted from queue is : %d\n", queue_array[front]);
        front = front + 1;
    }
} /* End of delete() */
 
void display()
{
    int i;
    if (front == - 1)
        printf("Queue is empty \n");
    else
    {
        printf("Queue is : \n");
        for (i = front; i <= rear; i++)
            printf("%d ", queue_array[i]);
        printf("\n");
    }
} /* End of display() */
 . 
*******************
C Program to Print the Number of Odd & Even Numbers in an Array
================================ EOPN
    /*     * C Program to Print the Number of Odd & Even Numbers in an Array     
================================ EOKW
--------------------------------
output:
Enter the size of an array
6
Enter the elements of the array
12
19
45
69
98
23
Even numbers in the array are - 12     98
 Odd numbers in the array are - 19     45     69     23
--------------------------------
    /*
     * C Program to Print the Number of Odd & Even Numbers in an Array
     */
 
    #include <stdio.h>
    void main()
    {
 
        int array[100], i, num;
        printf("Enter the size of an array \n");
 
        scanf("%d", &num);
        printf("Enter the elements of the array \n");
 
        for (i = 0; i < num; i++) 
        {
            scanf("%d", &array[i]);
        }
 
        printf("Even numbers in the array are - ");
        for (i = 0; i < num; i++) 
        {
            if (array[i] % 2 == 0) 
            {
                printf("%d \t", array[i]);
            }
        }
 
        printf("\n Odd numbers in the array are -");
        for (i = 0; i < num; i++) 
        {
            if (array[i] % 2 != 0) 
            {
                printf("%d \t", array[i]);
            }
        }
 
    }
 . 
*******************
C Program to Print All the Repeated Numbers with Frequency in an Array
================================ EOPN
/*
 * C Program to Print all the Repeated Numbers with Frequency in an Array
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm71.c
$ a.out
 duplicate elements present in the given array are  10  2
--------------------------------
 . 
*******************
C Program to Print the kth Element in the Array
================================ EOPN
/*
 * C Program to Print all the Repeated Numbers with Frequency in an Array
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm71.c
$ a.out
 duplicate elements present in the given array are  10  2
--------------------------------
 . 
*******************
C Program to Find the Number of Elements in an Array
================================ EOPN
     /*     * C Program to Find the Number of Elements in an Array     
================================ EOKW
--------------------------------
output:
Size of the given array is 7
--------------------------------
 
    /*
     * C Program to Find the Number of Elements in an Array
     */
 
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
 
    int main()
    {
        int array[] = {15, 50, 34, 20, 10, 79, 100};
        int n; 
        n = sizeof(array);
        printf("Size of the given array is %d\n", n/sizeof(int));
        return 0;
    }
 . 
*******************
C Program to Check Array bounds while Inputing Elements into the Array
================================ EOPN
    /*     * C Program to Check Array bounds while Inputing Elements into the Array     
================================ EOKW
--------------------------------
output:
12
23
56
12
14
23
12 23 56 12 14 23 6 134513824 0 -1081194040 11672807 1 -1081193996 -1081193988 -1216161720
--------------------------------
    /*
     * C Program to Check Array bounds while Inputing Elements into the Array
     */
 
    #include <stdio.h>
    int main(void)
    {
 
        int array[5], b, c;
        for (b = 0; b < 10 && (scanf("%d", &c)); b++)
                array[b] = c;
 
        for (b = 0; b < 15; b++)
        	printf("%d ", array[b]);
 
        return 0;
    }
 . 
*******************
C Program to Print the Alternate Elements in an Array
================================ EOPN
     /*     * C Program to Print the Alternate Elements in an Array     
================================ EOKW
--------------------------------
output:
12
23
45
57
68
73
84
97
120
125
Alternate elements of a given array
12
45
68
84
120
--------------------------------
 
    /*
     * C Program to Print the Alternate Elements in an Array
     */
 
    #include <stdio.h>
    void main()
    {
 
        int array[10];
        int i;
        printf("enter the element of an array \n");
        for (i = 0; i < 10; i++)
            scanf("%d", &array[i]);
 
        printf("Alternate elements of a given array \n");
        for (i = 0; i < 10; i += 2)
            printf( "%d\n", array[i]) ;
    }
 . 
*******************
C Program to Find the Odd Element given an Array with only two Different Element
================================ EOPN
/*
 * C Program to Find the Odd Element given an Array with only two Different Element
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm87.c
$ a.out
 
 The ODD elements are 7 & 3
--------------------------------
 . 
*******************
C Program to Increment Every Element of the Array by One & Print Incremented Array
================================ EOPN
     /*     * C Program to Increment every Element of the Array by one & Print Incremented Array     
================================ EOKW
--------------------------------
output:
11    21    31   41
--------------------------------
 
    /*
     * C Program to Increment every Element of the Array by one & Print Incremented Array
     */
 
    #include <stdio.h>
    void incrementArray(int[]);
    void main()
    {
 
        int i;
        int array[4] = {10, 20, 30, 40};
        incrementArray(array);
        for (i = 0; i < 4; i++)
           printf("%d\t", array[i]);   // Prints 2, 3, 4, 5
 
    }
 
    void incrementArray(int arr[])
    {
 
        int i;
        for (i = 0; i < 4; i++)
            arr[i]++;     // this alters values in array in main()
 
    }
 . 
*******************
C Program to Find the Number of Non Repeated Elements in an Array
================================ EOPN
/*
 * C Program to Find the Number of Non Repeated Elements in an Array
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm76.c
$ a.out
 
Enter size of the array: 6
 
Enter 6 elements of an array: 12
10
4
10
12
56
 
The array after removing duplicates is:  12 10 4 56
--------------------------------
 . 
*******************
C Program to Input a String & Store their Ascii Values in an Integer Array & Print the Array
================================ EOPN
    /*     * C Program to Input a String & Store their Ascii Values in an Integer Array & Print the Array     
================================ EOKW
--------------------------------
output:
Enter the no of characters present in an array
10
Enter the string of 10 characters
sanfoundry
 s = 115
 a = 97
 n = 110
 f = 102
 o = 111
 u = 117
 n = 110
 d = 100
 r = 114
 y = 121
--------------------------------
    /*
     * C Program to Input a String & Store their Ascii Values in an Integer Array & Print the Array
     */
 
    #include <stdio.h>
    void main()
    {
 
        char string[20];
        int n, count = 0;
 
        printf("Enter the no of characters present in an array \n ");
        scanf("%d", &n);
 
        printf(" Enter the string of %d characters \n" , n);
        scanf("%s", string);
 
        while (count < n)
        {
            printf(" %c = %d\n", string[count], string[count] );
            ++ count ;
        }
 
    }
 . 
*******************
C Program to Input an Array, Store the Squares of these Elements in an Array & Print it
================================ EOPN
    /*     * C Program to Input an Array, Store the Squares of these Elements in an Array & Print it     
================================ EOKW
--------------------------------
output:
100    400    900    1600
2500   3600   4900   6400
8100   10000  12100  14400
--------------------------------
    /*
     * C Program to Input an Array, Store the Squares of these Elements in an Array & Print it
     */
 
    #include <stdio.h>
    #define MAX_ROWS 3
    #define MAX_COLS 4
 
    void print_square(int [ ] );
    void main (void)
    {
 
        int i;
        int num [MAX_ROWS][MAX_COLS] = { {10, 20, 30, 40}, {50, 60, 70, 80}, {90, 100, 110, 120} };
        for (i = 0; i < MAX_ROWS; i++)
            print_square(num[i]);
 
    }
 
    void print_square(int x[ ])
    {
 
        int j;
        for (j = 0; j < MAX_COLS; j++)
            printf ("%d\t", x[j] * x[j]);
        printf("\n");
 
    }
 . 
*******************
C Program to Find the two Elements such that their Sum is Closest to Zero
================================ EOPN
 /* * C Program to Find the two Elements such that their Sum is Closest to Zero 
================================ EOKW
--------------------------------
output:
 The two elements whose sum is minimum are 15 and -10
--------------------------------
 
/*
 * C Program to Find the two Elements such that their Sum is Closest to Zero
 */
# include <stdio.h>
# include <stdlib.h>
# include <math.h>
 
void minabsvaluepair(int array[], int array_size)
{
    int count = 0;
    int l, r, min_sum, sum, min_l, min_r;
 
    /* Array should have at least two elements*/
    if (array_size < 2)
    {
        printf("Invalid Input");
        return;
    }
 
    /* Initialization of values */
    min_l = 0;
    min_r = 1;
    min_sum = array[0] + array[1];
    for (l = 0; l < array_size - 1; l++)
    {
        for (r = l + 1; r < array_size; r++)
        {
            sum = array[l] + array[r];
            if (abs(min_sum) > abs(sum))
            {
                min_sum = sum;
                min_l = l;
                min_r = r;
            }
        }
    }
    printf(" The two elements whose sum is minimum are %d and %d", array[min_l], array[min_r]);
}
 
int main()
{
    int array[] = {42, 15, -25, 30, -10, 35};
    minabsvaluepair(array, 6);
    getchar();
    return 0;
}
 . 
*******************
C Program to Find the Median of the Elements after Merging these 2 Sorted Arrays with Same Size
================================ EOPN
/*
 * C Program to Find the Median of the Elements after Merging these 2 Sorted Arrays with Same Size
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm91.c
$ a.out
Median is 34
--------------------------------
 . 
*******************
 C Program to Calculate the Addition or Subtraction & Trace of 2 Matrices 
================================ EOPN
    /*     * C program to read two matrices A(MxN) and B(MxN) and perform addition     * OR subtraction of A and B. Also, find the trace of the resultant     * matrix. Display the given matrices, their sum or differences and     * the trace.     
================================ EOKW
--------------------------------
output:
 
Enter the order of the matrix array1 and array2
3 3
Enter the elements of matrix array1
2 3 4
7 8 9
5 6 8
MATRIX array1 is
  2  3  4
  7  8  9
  5  6  8
Enter the elements of matrix array2
3 3 3
3 4 6
8 4 7
MATRIX array2 is
  3  3  3
  3  4  6
  8  4  7
Enter your option: 1 for Addition and 2 for Subtraction
1
Sum matrix is
  5  6  7
 10 12 15
 13 10 15
Trace of the resultant matrix is = 32
 
$ a.out
Enter the order of the matrix array1 and array2
3 3
Enter the elements of matrix array1
10 20 30
15 18 20
12 14 16
MATRIX array1 is
 10 20 30
 15 18 20
 12 14 16
Enter the elements of matrix array2
1 5 9
10 15 14
9 12 13
MATRIX array2 is
  1  5  9
 10 15 14
  9 12 13
Enter your option: 1 for Addition and 2 for Subtraction
2
Difference matrix is
  9 15 21
  5  3  6
  3  2  3
Trace of the resultant matrix is = 15
--------------------------------
    /*
     * C program to read two matrices A(MxN) and B(MxN) and perform addition
     * OR subtraction of A and B. Also, find the trace of the resultant
     * matrix. Display the given matrices, their sum or differences and
     * the trace.
     */
 
    #include <stdio.h>
    void trace(int arr[][10], int m, int n);
    void main()
    {
 
        int array1[10][10], array2[10][10], arraysum[10][10],
        arraydiff[10][10];
        int i, j, m, n, option;
 
        printf("Enter the order of the matrix array1 and array2 \n");
        scanf("%d %d", &m, &n);
 
        printf("Enter the elements of matrix array1 \n");
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++)
            {
                scanf("%d", &array1[i][j]);
            }
        }
 
        printf("MATRIX array1 is \n");
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++) 
            {
                printf("%3d", array1[i][j]);
            }
            printf("\n");
        }
 
        printf("Enter the elements of matrix array2 \n");
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++) 
            {
                scanf("%d", &array2[i][j]);
            }
        }
 
        printf("MATRIX array2 is \n");
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++) 
            {
                printf("%3d", array2[i][j]);
            }
            printf("\n");
        }
 
        printf("Enter your option: 1 for Addition and 2 for Subtraction \n");
        scanf("%d", &option);
 
        switch (option)
        {
 
        case 1:
            for (i = 0; i < m; i++) 
            {
                for (j = 0; j < n; j++) 
                {
                    arraysum[i][j] = array1[i][j] + array2[i][j];
                }
            }
 
            printf("Sum matrix is \n");
            for (i = 0; i < m; i++) 
            {
                for (j = 0; j < n; j++) 
                {
                    printf("%3d", arraysum[i][j]) ;
                }
                printf("\n");
            }
 
            trace (arraysum, m, n);
            break;
 
        case 2:
            for (i = 0; i < m; i++) 
            {
                for (j = 0; j < n; j++) 
                {
                    arraydiff[i][j] = array1[i][j] - array2[i][j];
                }
            }
 
            printf("Difference matrix is \n");
            for (i = 0; i < m; i++) 
            {
                for (j = 0; j < n; j++) 
                {
                    printf("%3d", arraydiff[i][j]) ;
                }
                printf("\n");
            }
            trace (arraydiff, m, n);
            break;
        }
 
    }
 
    /*  Function to find the trace of a given matrix and print it */
 
    void trace (int arr[][10], int m, int n) 
    {
 
        int i, j, trace = 0;
        for (i = 0; i < m; i++)
        {
            for (j = 0; j < n; j++) 
            {
                if (i == j)
                {
                    trace = trace + arr[i][j];
                }
            }
        }
        printf("Trace of the resultant matrix is = %d\n", trace);
    }
 . 
*******************
 C Program to Find the Transpose of a given Matrix  
================================ EOPN
/*
 * C program to accept a matrix of order MxN and find its transpose
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm85.c
$ a.out
Enter the order of the matrix
3 3
Enter the coefiicients of the matrix
3 7 9
2 7 5
6 3 4
The given matrix is
 3 7 9
 2 7 5
 6 3 4
Transpose of matrix is
 3 2 6
 7 7 3
 9 5 4
--------------------------------
 . 
*******************
 C Program to Compute the Product of Two Matrices 
================================ EOPN
     /*     * Develop functions to read a matrix, display a matrix and compute     * product of two matrices.     * Use these functions to read two MxN matrices and compute their     * product & display the result     
================================ EOKW
--------------------------------
output:
Enter the value of m and n
3 3
Enter matrix array1
4 5 6
1 2 3
3 7 8
Matrix array1
  4  5  6
  1  2  3
  3  7  8
Enter matrix array2
5 6 9
8 5 3
2 9 1
Matrix array2
  5  6  9
  8  5  3
  2  9  1
The product matrix is
 72103 57
 27 43 18
 87125 56
--------------------------------
 
    /*
     * Develop functions to read a matrix, display a matrix and compute
     * product of two matrices.
     * Use these functions to read two MxN matrices and compute their
     * product & display the result
     */
 
    #include <stdio.h>
    #define MAXROWS 10
    #define MAXCOLS 10
 
    void readMatrix(int arr[][MAXCOLS], int m, int n);
    void printMatrix(int arr[][MAXCOLS], int m, int n);
    void productMatrix(int array1[][MAXCOLS], int array2[][MAXCOLS],
    int array3[][MAXCOLS], int m, int n);
 
    void main()
    {
 
        int array1[MAXROWS][MAXCOLS], array2[MAXROWS][MAXCOLS],
        array3[MAXROWS][MAXCOLS];
        int m, n;
 
        printf("Enter the value of m and n \n");
        scanf("%d %d", &m, &n);
 
        printf("Enter Matrix array1 \n");
        readMatrix(array1, m, n);
        printf("Matrix array1 \n");
        printMatrix(array1, m, n);
 
        printf("Enter Matrix array2 \n");
        readMatrix(array2, m, n);
        printf("Matrix B \n");
        printMatrix(array2, m, n);
 
        productMatrix(array1, array2, array3, m, n);
        printf("The product matrix is \n");
        printMatrix(array3, m, n);
 
    }
 
    /*  Input Matrix array1 */
 
    void readMatrix(int arr[][MAXCOLS], int m, int n)
    {
 
        int i, j;
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++) 
            {
                scanf("%d", &arr[i][j]);
            }
        }
    }
 
    void printMatrix(int arr[][MAXCOLS], int m, int n)
    {
 
        int i, j;
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++)
            {
                printf("%3d", arr[i][j]);
            }
            printf("\n");
        }
    }
 
    /*  Multiplication of matrices */
 
    void productMatrix(int array1[][MAXCOLS], int array2[][MAXCOLS],
    int array3[][MAXCOLS], int m, int n)
    {
 
        int i, j, k;
        for (i = 0; i < m; i++) 
        {
            for (j = 0; j < n; j++) 
            {
                array3[i][j] = 0;
                for (k = 0; k < n; k++) 
                {
                    array3[i][j] = array3[i][j] + array1[i][k] * array2[k][j];
                }
            }
        }
    }
 . 
*******************
 C Program to Calculate the Sum & Difference of the Matrices   
================================ EOPN
    /*     * C program to accept two matrices and find the sum     * and difference of the matrices     
================================ EOKW
--------------------------------
output:
Enter the order of the matrix A
3 3
Enter the order of the matrix B
3 3
Enter the elements of matrix A
1 4 5
6 7 8
4 8 9
MATRIX A is
  1  4  5
  6  7  8
  4  8  9
Enter the elements of matrix B
3 6 7
8 4 2
1 5 3
MATRIX B is
  3  6  7
  8  4  2
  1  5  3
Sum matrix is
  4 10 12
 14 11 10
  5 13 12
Difference matrix is
 -2 -2 -2
 -2  3  6
  3  3  6
--------------------------------
    /*
     * C program to accept two matrices and find the sum
     * and difference of the matrices
     */
 
    #include <stdio.h>
    #include <stdlib.h>
 
    void readmatA();
    void printmatA();
    void readmatB();
    void printmatB();
 
    void sum();
    void diff();
 
    int a[10][10], b[10][10], sumarray[10][10], arraydiff[10][10];
    int i, j, row1, column1, row2, column2;
 
    void main()
    {
 
        printf("Enter the order of the matrix A \n");
        scanf("%d %d", &row1, &column1);
 
        printf("Enter the order of the matrix B \n");
        scanf("%d %d", &row2, &column2);
 
        if (row1 != row2 && column1 != column2)
        {
            printf("Addition and subtraction are possible \n");
            exit(1);
        }
 
        else 
        {
 
            printf("Enter the elements of matrix A \n");
            readmatA();
 
            printf("MATRIX A is \n");
            printmatA();
 
            printf("Enter the elements of matrix B \n");
            readmatB();
 
            printf("MATRIX B is \n");
            printmatB();
 
            sum();
            diff();
 
        }
 
    }
 
    /*  Function to read a matrix A */
 
    void readmatA() 
    {
        for (i = 0; i < row1; i++) 
        {
            for (j = 0; j < column1; j++)
            {
                scanf("%d", &a[i][j]);
            }
        }
        return;
    }
 
    /*  Function to read a matrix B */
 
    void readmatB() 
    {
        for (i = 0; i < row2; i++) 
        {
            for (j = 0; j < column2; j++) 
            {
                scanf("%d", &b[i][j]);
            }
        }
    }
 
    /*  Function to print a matrix A */
 
    void printmatA()
    {
        for (i = 0; i < row1; i++) 
        {
            for (j = 0; j < column1; j++)
            {
                printf("%3d", a[i][j]);
            }
            printf("\n");
        }
 
    }
 
    /*  Function to print a matrix B */
 
    void printmatB() 
    {
        for (i = 0; i < row2; i++) 
        {
            for (j = 0; j < column2; j++)
            {
                printf("%3d", b[i][j]);
            }
            printf("\n");
        }
 
    }
 
    /*  Function to do the sum of elements of matrix A and Matrix B */
 
    void sum() 
    {
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column2; j++) 
            {
                sumarray[i][j] = a[i][j] + b[i][j];
            }
 
        }
 
        printf("Sum matrix is \n");
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column2; j++)
            {
                printf("%3d", sumarray[i][j]) ;
            }
            printf("\n");
 
        }
        return;
 
    }
 
    /*  Function to do the difference of elements of matrix A and Matrix B */
 
    void diff()
    {
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column2; j++)
            {
                arraydiff[i][j] = a[i][j] - b[i][j];
            }
 
        }
 
        printf("Difference matrix is \n");
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column2; j++)
            {
                printf("%3d", arraydiff[i][j]);
 
            }
            printf("\n");
 
        }
        return;
 
    }
 . 
*******************
 C Program to Check if 2 Matrices are Equal 
================================ EOPN
     /*     * C Program to accept two matrices and check if they are equal     
================================ EOKW
--------------------------------
output:
Enter the order of the matrix A
2 2
Enter the order of the matrix B
2 2
Enter the elements of matrix A
23 56
45 80
Enter the elements of matrix B
50 26
39 78
MATRIX A is
 23 56
 45 80
MATRIX B is
 50 26
 39 78
Matrices can be compared
But,two matrices are not equal
 
$ a.out
Enter the order of the matrix A
2 2
Enter the order of the matrix B
2 2
Enter the elements of matrix A
10 50
15 30
Enter the elements of matrix B
10 50
15 30
MATRIX A is
 10 50
 15 30
MATRIX B is
 10 50
 15 30
Matrices can be compared
Two matrices are equal
--------------------------------
 
    /*
     * C Program to accept two matrices and check if they are equal
     */
 
    #include <stdio.h>
    #include <stdlib.h>
 
    void main() 
    {
 
        int a[10][10], b[10][10];
        int i, j, row1, column1, row2, column2, flag = 1;
 
        printf("Enter the order of the matrix A \n");
        scanf("%d %d", &row1, &column1);
 
        printf("Enter the order of the matrix B \n");
        scanf("%d %d", &row2, &column2);
 
        printf("Enter the elements of matrix A \n");
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column1; j++) 
            {
                scanf("%d", &a[i][j]);
            }
        }
 
        printf("Enter the elements of matrix B \n");
        for (i = 0; i < row2; i++) 
        {
            for (j = 0; j < column2; j++)
            {
                scanf("%d", &b[i][j]);
            }
        }
 
        printf("MATRIX A is \n");
        for (i = 0; i < row1; i++)
        {
            for (j = 0; j < column1; j++) 
            {
                printf("%3d", a[i][j]);
            }
            printf("\n");
 
        }
 
        printf("MATRIX B is \n");
        for (i = 0; i < row2; i++)
        {
            for (j = 0; j < column2; j++) 
            {
                printf("%3d", b[i][j]);
            }
            printf("\n");
 
        }
 
        /*  Comparing two matrices for equality */
 
        if (row1 == row2 && column1 == column2)
        {
            printf("Matrices can be compared \n");
            for (i = 0; i < row1; i++) 
            {
                for (j = 0; j < column2; j++)
                {
                    if (a[i][j] != b[i][j])
                    {
                        flag = 0;
                        break;
                    }
                 }
            }
        }
 
        else 
        {
            printf(" Cannot be compared\n");
            exit(1);
        }
 
        if (flag == 1)
            printf("Two matrices are equal \n");
        else
            printf("But, two matrices are not equal \n");
 
    }
 . 
*******************
 C Program to Check if a given Matrix is an Identity Matrix 
================================ EOPN
 /** C Program to check if a given matrix is an identity matrix
================================ EOKW
--------------------------------
output:
 
Enter the order of the matrix (mxn):
where m = number of rows; and
      n = number of columns
3 3
Enter the elements of the matrix
1 0 0
0 1 0
0 0 1
It is a IDENTITY MATRIX
 
Enter the order of the matrix (mxn):
where m = number of rows; and
      n = number of columns
3 3
Enter the elements of the matrix
1 2 3
4 5 6
5 8 7
It is NOT an identity matrix
--------------------------------
 
/*
* C Program to check if a given matrix is an identity matrix
*/
#include <stdio.h>
 
int main (void)
{
	int a[10][10];
	int i = 0, j = 0, row = 0, col = 0;
 
	printf ("Enter the order of the matrix (mxn):\n");
	printf ("where m = number of rows; and\n");
	printf ("      n = number of columns\n");
	scanf ("%d %d", &row, &col);
 
	int flag = 0;
 
	printf ("Enter the elements of the matrix\n");
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			scanf ("%d", &a[i][j]);
		}
	}
 
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (i == j && a[i][j] != 1)
			{
				flag = -1;
				break;
			}
			else if (i != j && a[i][j] != 0)
			{
				flag = -1;
				break;
			}
		}
	}
 
	if (flag == 0)
	{
		printf ("It is a IDENTITY MATRIX\n");
	}
	else
	{
		printf ("It is NOT an identity matrix\n");
	}
 
	return 0;
}
 . 
*******************
 C Program to Determine if a given Matrix is a Sparse Matrix 
================================ EOPN
/*
 * C program to determine if a given matrix is a sparse matrix.
 * Sparse martix has more zero elements than nonzero elements.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm86.c
$ a.out
Enter the order of the matix
3 3
Enter the co-efficients of the matix
10 20 30
5 10 15
3 6 9
The given matrix is not a sparse matrix
There are 0 number of zeros
 
$ a.out
Enter the order of the matix
3 3
Enter the co-efficients of the matix
5 0 0
0 0 5
0 5 0
The given matrix is sparse matrix
There are 6 number of zeros
--------------------------------
 . 
*******************
 C Program to Sort Rows of the Matrix in Ascending & Columns in Descendng Order 
================================ EOPN
/*
 * C program to accept a matrics of order MxN and sort all rows of the
 * matrix in ascending order and all columns in descending order
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm87.c
$ a.out
Enter the order of the matrix
3 3
Enter co-efficients of the matrix
3 7 9
2 4 8
5 2 6
The given matrix is
 3 7 9
 2 4 8
 5 2 6
After arranging rows in ascending order
 3 7 9
 2 4 8
 2 5 6
After arranging the columns in descending order
 5 7 9
 3 4 8
 2 2 6
--------------------------------
 . 
*******************
 C Program to Calculate the Sum of the Elements of each Row & Column 
================================ EOPN
/* * C program to read a matrix A (MxN) & find the following using * functions a) Sum of the elements of each row * b) Sum of the elements of each column * c) Find the sum of all the elements of the matrix * Output the computed results 
================================ EOKW
--------------------------------
output:
Enter the order of the matrix
3 3
Enter the elements of the matrix
2 3 4
7 1 5
3 8 9
Input matrix is
  2  3  4
  7  1  5
  3  8  9
Sum of row 1 = 9
Sum of row 2 = 13
Sum of row 3 = 20
Sum of column  1 = 12
Sum of column  2 = 12
Sum of column  3 = 18
Sum of all elements of matrix = 42
--------------------------------
/*
 * C program to read a matrix A (MxN) & find the following using
 * functions a) Sum of the elements of each row
 * b) Sum of the elements of each column
 * c) Find the sum of all the elements of the matrix
 * Output the computed results
 */
#include <stdio.h>
int Addrow(int array1[10][10], int k, int c);
int Addcol(int array1[10][10], int k, int r);
 
void main()
{
    int arr[10][10];
    int i, j, row, col, rowsum, colsum, sumall=0;
 
    printf("Enter the order of the matrix \n");
    scanf("%d %d", &row, &col);
    printf("Enter the elements of the matrix \n");
    for (i = 0; i < row; i++)
    {
        for (j = 0; j < col; j++)
        {
            scanf("%d", &arr[i][j]);
        }
    }
    printf("Input matrix is \n");
    for (i = 0; i < row; i++)
    {
        for (j = 0; j < col; j++)
        {
            printf("%3d", arr[i][j]);
        }
        printf("\n");
    }
    /*  computing row sum */
    for (i = 0; i < row; i++)
    {
        rowsum = Addrow(arr, i, col);
        printf("Sum of row %d = %d\n", i + 1, rowsum);
    }
    /*  computing col sum */
    for (j = 0; j < col; j++)
    {
        colsum = Addcol(arr, j, row);
        printf("Sum of column  %d = %d\n", j + 1, colsum);
    }
    /*  computation of all elements */
    for (j = 0; j < row; j++)
    {
        sumall = sumall + Addrow(arr, j, col);
    }
    printf("Sum of all elements of matrix = %d\n", sumall);
}
/*  Function to add each row */
int Addrow(int array1[10][10], int k, int c)
{
    int rsum = 0, i;
    for (i = 0; i < c; i++)
    {
        rsum = rsum + array1[k][i];
    }
    return(rsum);
}
/*  Function to add each column */
int Addcol(int array1[10][10], int k, int r)
{
    int csum = 0, j;
    for (j = 0; j < r; j++)
    {
        csum = csum + array1[j][k];
    }
    return(csum);
}
 . 
*******************
 C Program to Find the Frequency of Odd & Even Numbers in the given Matrix  
================================ EOPN
    /*     * C program to find the frequency of odd numbers     * and even numbers in the input of a matrix     
================================ EOKW
--------------------------------
output:
Enter the order of the matrix
3 3
Enter the coefficients of matrix
34 36 39
23 57 98
12 39 49
The given matrix is
 34 36 39
 23 57 98
 12 39 49
 
The frequency of occurrence of odd number  = 5
The frequency of occurrence of even number = 4
--------------------------------
    /*
     * C program to find the frequency of odd numbers
     * and even numbers in the input of a matrix
     */
 
    #include <stdio.h>
    void main()
    {
 
    	static int array[10][10];
    	int i, j, m, n, even = 0, odd = 0;
 
    	printf("Enter the order ofthe matrix \n");
    	scanf("%d %d", &m, &n);
 
    	printf("Enter the coefficients of matrix \n");
    	for (i = 0; i < m; ++i) 
        {
                for (j = 0; j < n; ++j)
                {
                     scanf("%d", &array[i][j]);
                     if ((array[i][j] % 2) == 0)
                     {
                         ++even;
                     }
                     else
                         ++odd;
                 }
 
    	}
 
    	printf("The given matrix is \n");
    	for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j) 
            {
                printf(" %d", array[i][j]);
            }
            printf("\n");
        }
 
        printf("\n The frequency of occurrence of odd number  = %d \n", odd);
        printf("The frequency of occurrence of even number = %d\n", even);
 
    }
 . 
*******************
 C Program to Accept a Matrix of Order MxN & Interchange the Diagonals 
================================ EOPN
   /*     * C program to accept a matrix of order M x N and store its elements     * and interchange the main diagonal elements of the matrix     * with that of the secondary diagonal elements     
================================ EOKW
--------------------------------
output:
Enetr the order of the matix
2 2
Enter the co-efficients of the matrix
25 30
78 43
The given matrix is
 25 30
 78 43
The matrix after changing the
main diagonal & secondary diagonal
 30 25
 43 78
--------------------------------
   /*
     * C program to accept a matrix of order M x N and store its elements
     * and interchange the main diagonal elements of the matrix
     * with that of the secondary diagonal elements
     */
 
    #include <stdio.h>
    void main ()
    {
 
        static int array[10][10];
        int i, j, m, n, a;
 
        printf("Enter the order of the matix \n");
        scanf("%d %d", &m, &n);
 
        if (m == n)
        {
            printf("Enter the co-efficients of the matrix\n");
            for (i = 0; i < m; ++i) 
            {
                for (j = 0; j < n; ++j) 
                {
                    scanf("%dx%d", &array[i][j]);
                }
            }
 
            printf("The given matrix is \n");
            for (i = 0; i < m; ++i) 
            {
                for (j = 0; j < n; ++j) 
                {
                    printf(" %d", array[i][j]);
                }
                printf("\n");
            }
 
            for (i = 0; i < m; ++i) 
            {
                a = array[i][i];
                array[i][i] = array[i][m - i - 1];
                array[i][m - i - 1] = a;
            }
 
            printf("The matrix after changing the \n");
            printf("main diagonal & secondary diagonal\n");
            for (i = 0; i < m; ++i)
            {
                for (j = 0; j < n; ++j) 
                {
                    printf(" %d", array[i][j]);
 
                }
 
                printf("\n");
 
            }
 
        }
 
        else
            printf("The given order is not square matrix\n");
 
    }
 . 
*******************
 C Program to Find the Sum of each Row & each Column of a MxN Matrix
================================ EOPN
     /*     * C program to accept a matrix of order M x N and find the sum     * of each row and each column of a matrix     
================================ EOKW
--------------------------------
output:
Enter the order of the matrix
2 2
Enter the co-efficients of the matrix
23 45
80 97
Sum of the 0 row is = 68
Sum of the 1 row is = 177
Sum of the 0 column is = 103
Sum of the 1 column is = 142
--------------------------------
 
    /*
     * C program to accept a matrix of order M x N and find the sum
     * of each row and each column of a matrix
     */
 
    #include <stdio.h>
    void main ()
    {
 
        static int array[10][10];
        int i, j, m, n, sum = 0;
 
        printf("Enter the order of the matrix\n");
        scanf("%d %d", &m, &n);
 
        printf("Enter the co-efficients of the matrix\n");
        for (i = 0; i < m; ++i)
        {
            for (j = 0; j < n; ++j) 
            {
                scanf("%d", &array[i][j]);
            }
        }
 
        for (i = 0; i < m; ++i) 
        {
            for (j = 0; j < n; ++j) 
            {
                sum = sum + array[i][j] ;
            }
 
            printf("Sum of the %d row is = %d\n", i, sum);
            sum = 0;
 
        }
        sum = 0;
        for (j = 0; j < n; ++j) 
        {
            for (i = 0; i < m; ++i)
            {
                sum = sum + array[i][j];
            }
 
            printf("Sum of the %d column is = %d\n", j, sum);
            sum = 0;
 
        }
 
    }
 . 
*******************
C Program to do the Sum of the Main & Opposite Diagonal Elements of a MxN Matrix
================================ EOPN
    /*     * C program to find accept a matrix of order M x N and find     * the sum of the  main diagonal and off diagonal elements     
================================ EOKW
--------------------------------
output:
Enter the order of the matix
2 2
Enter the co-efficients of the matrix
40 30
38 90
The given matrix is
 40 30
 38 90
 
The sum of the main diagonal elements is = 130
The sum of the off diagonal elements is   = 68
--------------------------------
    /*
     * C program to find accept a matrix of order M x N and find
     * the sum of the  main diagonal and off diagonal elements
     */
 
    #include <stdio.h>
    void main ()
    {
 
        static int array[10][10];
        int i, j, m, n, a = 0, sum = 0;
 
        printf("Enetr the order of the matix \n");
        scanf("%d %d", &m, &n);
 
        if (m == n ) 
        {
 
            printf("Enter the co-efficients of the matrix\n");
            for (i = 0; i < m; ++i)
            {
                for (j = 0; j < n; ++j)
                {
                    scanf("%d", &array[i][j]);
                }
            }
 
            printf("The given matrix is \n");
            for (i = 0; i < m; ++i) 
            {
                for (j = 0; j < n; ++j)
                {
                    printf(" %d", array[i][j]);
                }
                printf("\n");
            }
 
            for (i = 0; i < m; ++i) 
            {
                sum = sum + array[i][i];
                a = a + array[i][m - i - 1];
            }
 
            printf("\nThe sum of the main diagonal elements is = %d\n", sum);
            printf("The sum of the off diagonal elements is   = %d\n", a);
 
        }
 
        else
            printf("The given order is not square matrix\n");
 
    }
 . 
*******************
C Program to Find the Trace & Normal of a given Matrix
================================ EOPN
    /*     * C program to find the trace and normal of a matrix     *     * Trace is defined as the sum of main diagonal elements and     * Normal is defined as square root of the sum of all the elements     
================================ EOKW
--------------------------------
output:
Enter the order of the matrix
3 3
Enter the coefficients of the matrix
3  7 9
2 6 10
8 5 9
The normal of the given matrix is = 21
Trace of the matrix is = 18
--------------------------------
    /*
     * C program to find the trace and normal of a matrix
     *
     * Trace is defined as the sum of main diagonal elements and
     * Normal is defined as square root of the sum of all the elements
     */
 
    #include <stdio.h>
    #include <math.h>
 
    void main ()
    {
 
        static int array[10][10];
        int i, j, m, n, sum = 0, sum1 = 0, a = 0, normal;
 
        printf("Enter the order of the matrix\n");
        scanf("%d %d", &m, &n);
 
        printf("Enter the n coefficients of the matrix \n");
        for (i = 0; i < m; ++i) 
        {
            for (j = 0; j < n; ++j)
            {
                scanf("%d", &array[i][j]);
                a = array[i][j] * array[i][j];
                sum1 = sum1 + a;
            }
        }
 
        normal = sqrt(sum1);
        printf("The normal of the given matrix is = %d\n", normal);
        for (i = 0; i < m; ++i) 
        {
            sum = sum + array[i][i];
        }
 
        printf("Trace of the matrix is = %d\n", sum);
 
    }
 . 
*******************
C Program to Display Upper Triangular Matrix
================================ EOPN
    /*     * C Program to Display Upper Triangular Matrix     
================================ EOKW
--------------------------------
output:
Enter the r and c value:3 3
array[1][1] = 1 1 1
array[1][2] = array[1][3] = array[2][1] = 1 1 0
array[2][2] = array[2][3] = array[3][1] = 2 0 0
array[3][2] = array[3][3] = matrix is
111
110
200
 
1
11
200
--------------------------------
    /*
     * C Program to Display Upper Triangular Matrix
     */
 
    #include <stdio.h>
    void main()
    {
 
        int i, j, r, c, array[10][10];
        printf("Enter the r and c value:");
 
        scanf("%d%d", &r, &c);
        for (i = 1; i <= r; i++)
        {
            for (j = 1; j <= c; j++)
            {
                printf("array[%d][%d] = ", i, j);
                scanf("%d", &array[i][j]);
            }
        }
 
        printf("matrix is");
        for (i = 1; i <= r; i++)
        {
            for (j = 1; j <= c; j++)
            {
                printf("%d", array[i][j]);
            }
            printf("\n");
        }
 
        for (i = 1; i <= r; i++)
        {
            printf("\n");
            for (j = 1; j <= c; j++)
            {
                if (i >= j)
                {
                    printf("%d", array[i][j]);
                }
                else
                {
                    printf("\t");
                }
            }
 
        }
 
        printf("\n\n");
        for (i = 1; i <= r; i++)
        {
            printf("\n");
            for (j = 1; j <= c; j++)
            {
	            if (j >= i)
                    {
                	printf("%d", array[i][j]);
            	    }
            	    else 
                    {
                	//printf("\t");
	            }
            // printf("\n");
 
        }
 
    }
 . 
*******************
C Program to Display Lower Triangular Matrix
================================ EOPN
/*
 * C Program to Display Lower Triangular Matrix
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm15.c
$ a.out
Enter the value of Matrix : 1 2 0
1 0 0
0 0 0
Matrix is not a lower triangular matrix
 
$ a.out
Enter the value of Matrix : 1 0 0
1 1 0
1 1 1
Matrix is a Lower triangular matrix
--------------------------------
 . 
*******************
 C Program to Check if a given String is Palindrome 
================================ EOPN
 /* * C program to read a string and check if it's a palindrome, without * using library functions. Display the result. 
================================ EOKW
--------------------------------
output:
 
Enter a string
sanfoundry
sanfoundry is not a palindrome
 
 
Enter a string
malayalam
malayalam is a palindrome
--------------------------------
 
/*
 * C program to read a string and check if it's a palindrome, without
 * using library functions. Display the result.
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    char string[25], reverse_string[25] = {'\0'};
    int  i, length = 0, flag = 0;
 
    fflush(stdin);
    printf("Enter a string \n");
    gets(string);
    /*  keep going through each character of the string till its end */
    for (i = 0; string[i] != '\0'; i++)
    {
        length++;
    }
    for (i = length - 1; i >= 0; i--)
    {
       reverse_string[length - i - 1] = string[i];
    }
    /*
     * Compare the input string and its reverse. If both are equal
     * then the input string is palindrome.
     */
    for (i = 0; i < length; i++)
    {
        if (reverse_string[i] == string[i])
            flag = 1;
        else
            flag = 0;
    }
    if (flag == 1)
        printf("%s is a palindrome \n", string);
    else
        printf("%s is not a palindrome \n", string);
}
 . 
*******************
 C Program to Check if a String is a Palindrome without using the Built-in Function 
================================ EOPN
 /* * C program to find the length of a string without using the * built-in function also check whether it is a palindrome 
================================ EOKW
--------------------------------
output:
 
Enter a string
how  are you
The length of the string 'how  are you' = 12
how  are you is not a palindrome
 
 
Enter a string
madam
The length of the string 'madam' = 5
madam is a palindrome
 
 
Enter a string
mam
The length of the string 'mam' = 3
mam is a palindrome
--------------------------------
 
/*
 * C program to find the length of a string without using the
 * built-in function also check whether it is a palindrome
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    char string[25], reverse_string[25] = {'\0'};
    int i, length = 0, flag = 0;
 
    printf("Enter a string \n");
    gets(string);
    /*  keep going through each character of the string till its end */
    for (i = 0; string[i] != '\0'; i++)
    {
        length++;
    }
    printf("The length of the string '%s' = %d\n", string, length);
    for (i = length - 1; i >= 0 ; i--)
    {
        reverse_string[length - i - 1] = string[i];
    }
   /*  Check if the string is a Palindrome */
 
    for (flag = 1, i = 0; i < length ; i++)
    {
        if (reverse_string[i] != string[i])
            flag = 0;
    }
    if (flag == 1)
       printf ("%s is a palindrome \n", string);
    else
       printf("%s is not a palindrome \n", string);
}
 . 
*******************
C Program to Check whether a given String is Palindrome or not using Recursion
================================ EOPN
/*  
 * C Program to Check whether a given String is Palindrome or not 
 * using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc palindrome.c -o palindrome
$ a.out
Enter a word to check if it is a palindrome
malayalam
The entered word is a palindrome
--------------------------------
 . 
*******************
 C Program To Print Smallest and Biggest possible Word which is Palindrome in a given String 
================================ EOPN
/*  
 * C Program To Print Smallest and Biggest possible Word 
 * which is Palindrome in a given String
 
================================ EOKW
--------------------------------
output:
 
$ cc string14i.c
$ a.out
Read a string:
aba abcba abcdcba bcd
aba abcba abcdcba bcd
String aba is a Palindrome
String abcba is a Palindrome
String abcdcba is a Palindrome
The minimum palindrome is aba
The maximum palindrome is abcdcba
 
$ a.out
Read a string:
abc abcd
abc abcd
given string has no pallindrome
--------------------------------
 . 
*******************
 C Program to Find the Largest & Smallest Word in a String 
================================ EOPN
/* 
 * C Program to Find the Largest & Smallest Word in a String
 
================================ EOKW
--------------------------------
output:
 
$ gcc largestsmallest.c 
$ ./a.out
Enter string: amazing programmers exists here
The largest word is 'programmers' and smallest word is 'here' in 'amazing programmers exists here'.
--------------------------------
 . 
*******************
 C Program to read two Strings & Concatenate the Strings 
================================ EOPN
  /* * C program to read two strings and concatenate them, without using * library functions. Display the concatenated string. 
================================ EOKW
--------------------------------
output:
Enter the first string : San
Enter the second string: foundry
First string  = San
Second string = foundry
Concatenated string = Sanfoundry
--------------------------------
 
 
/*
 * C program to read two strings and concatenate them, without using
 * library functions. Display the concatenated string.
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    char string1[20], string2[20];
    int i, j, pos;
 
    /*  Initialize the string to NULL values */
    memset(string1, 0, 20);
    memset(string2, 0, 20);
 
    printf("Enter the first string : ");
    scanf("%s", string1);
    printf("Enter the second string: ");
    scanf("%s", string2);
    printf("First string  = %s\n", string1);
    printf("Second string = %s\n", string2);
 
    /*  Concate the second string to the end of the first string */
    for (i = 0; string1[i] != '\0'; i++)
    {
        /*  null statement: simply traversing the string1 */
        ;
    }
    pos = i;
    for (j = 0; string2[j] != '\0'; i++)
    {
        string1[i] = string2[j++];
    }
    /*  set the last character of string1 to NULL */
    string1[i] = '\0';
    printf("Concatenated string = %s\n", string1);
}
 . 
*******************
 C Program to Concatenate two Strings Lexically 
================================ EOPN
/*  
 * C Program to Concatenate the given two Strings Lexically
 
================================ EOKW
--------------------------------
output:
 
$ cc string17.c
$ a.out
 
Enter a string : hello this
 
Enter another string to concat : is sanfoundry
hello is sanfoundry this
--------------------------------
 . 
*******************
 C Program to Check if the Substring is present in the given String 
================================ EOPN
/*  
 * C program to accept a string and a substring and
 * check if the substring is present in the given string
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm44.c
$ a.out
Enter a string: hello
Enter search substring: world
SEARCH UNSUCCESSFUL!
 
$ a.out
Enter a string: helloworld
Enter search substring:ld
SEARCH SUCCESSFUL!
--------------------------------
 . 
*******************
 C Program to Accepts two Strings & Compare them  
================================ EOPN
 #include <stdio.h> int main (){	int count1 = 0, count2 = 0, flag = 0, i;	char string1[30], string2[30]; 	printf ("Enter the First string\n");	gets (string1); 	printf ("Enter the Second string\n");	gets (string2); 	while (string1[count1] != '\0')		count1 ++; 	while (string2[count2] != '\0')		count2 ++; 	i = 0; 	while (string1[i] == string2[i] && string1[i] != '\0')	{		i ++;	} 	if (string1[i] > string2[i])		printf ("First string is greater than Second string\n");	else if (string1[i] < string2[i])		printf("Second string is greater than First string\n");	else		printf ("Both strings are EQUAL\n"); 	return 0;}
================================ EOKW
--------------------------------
output:
Enter the First string
object
Enter the Second string
class
First string is greater than Second string
 
Enter the First string
object
Enter the Second string
object
Both strings are EQUAL
 
Enter the First string
class
Enter the Second string
object
Second string is greater than First string
--------------------------------
 
#include <stdio.h>
 
int main ()
{
	int count1 = 0, count2 = 0, flag = 0, i;
	char string1[30], string2[30];
 
	printf ("Enter the First string\n");
	gets (string1);
 
	printf ("Enter the Second string\n");
	gets (string2);
 
	while (string1[count1] != '\0')
		count1 ++;
 
	while (string2[count2] != '\0')
		count2 ++;
 
	i = 0;
 
	while (string1[i] == string2[i] && string1[i] != '\0')
	{
		i ++;
	}
 
	if (string1[i] > string2[i])
		printf ("First string is greater than Second string\n");
	else if (string1[i] < string2[i])
		printf("Second string is greater than First string\n");
	else
		printf ("Both strings are EQUAL\n");
 
	return 0;
}
 . 
*******************
 C Program to Find the Length of a String without using the Built-in Function 
================================ EOPN
 /* * C program to find the length of a string without using the * built-in function 
================================ EOKW
--------------------------------
output:
Enter a string
Sanfoundry
The length of a string is the number of characters in it
So, the length of Sanfoundry = 10
--------------------------------
 
/*
 * C program to find the length of a string without using the
 * built-in function
 */
#include <stdio.h>
 
void main()
{
    char string[50];
    int i, length = 0;
 
    printf("Enter a string \n");
    gets(string);
    /*  keep going through each character of the string till its end */
    for (i = 0; string[i] != '\0'; i++)
    {
        length++;
    }
    printf("The length of a string is the number of characters in it \n");
    printf("So, the length of %s = %d\n", string, length);
}
 . 
*******************
 C Program to Replace Lowercase Characters by Uppercase & Vice-Versa 
================================ EOPN
/* * C program to read an English sentence and replace * lowercase characters by uppercase and vice-versa. * Output the given sentence as well as the converted * sentence on two different lines. 
================================ EOKW
--------------------------------
output:
Enter a sentence
wELCOME tO sANFOUNDRY
The given sentence is   : wELCOME tO sANFOUNDRY
Case changed sentence is: Welcome To Sanfoundry
--------------------------------
/*
 * C program to read an English sentence and replace
 * lowercase characters by uppercase and vice-versa.
 * Output the given sentence as well as the converted
 * sentence on two different lines.
 */
#include <stdio.h>
#include <ctype.h>
 
void main()
{
    char sentence[100];
    int count, ch, i;
 
    printf("Enter a sentence \n");
    for (i = 0;(sentence[i] = getchar()) != '\n'; i++)
    {
        ;
    }
    sentence[i] = '\0';
    /*  shows the number of chars accepted in a sentence */
    count = i;
    printf("The given sentence is   : %s", sentence);
    printf("\n Case changed sentence is: ");
    for (i = 0; i < count; i++)
    {
        ch = islower(sentence[i])? toupper(sentence[i]) :
tolower(sentence[i]);
        putchar(ch);
    }
}
 . 
*******************
 C Program to Remove given Word from a String 
================================ EOPN
 /* * C Program to Remove given Word from a String 
================================ EOKW
--------------------------------
output:
$ gcc remove-word.c -o remove-word
$./remove-word
 
Enter the string:
Hello World hello world Hello W
Enter the word to be removed: Hello
 
World hello world W
--------------------------------
 
/*
 * C Program to Remove given Word from a String
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int main ()
{
	char str[100], word[100], twoD[10][30];
	int i = 0, j = 0, k = 0, len1 = 0, len2 = 0;
 
	printf ("Enter the string:\n");
	gets (str);
 
	printf ("Enter the word to be removed:\n");
	gets (word);
 
	// let us convert the string into 2D array
	for (i = 0; str[i] != '\0'; i++)
	{
		if (str[i] == ' ')
		{
			twoD[k][j] = '\0';
			k ++;
			j = 0;
		}
		else
		{
			twoD[k][j] = str[i];
			j ++;
		}
	}
 
	twoD[k][j] = '\0';
 
	j = 0;
	for (i = 0; i < k + 1; i++)
	{
		if (strcmp(twoD[i], word) == 0)
		{
			twoD[i][j] = '\0';
		}
	}
 
	j = 0;
 
	for (i = 0; i < k + 1; i++)
	{
		if (twoD[i][j] == '\0')
			continue;
		else
			printf ("%s ", twoD[i]);
	}
 
	printf ("\n");
 
	return 0;
}
 . 
*******************
 C Program to Remove all Characters in Second String which are present in First String 
================================ EOPN
/*
 * C Program to Remove all Characters in Second String which are 
 * present in First String 
 
================================ EOKW
--------------------------------
output:
$ gcc removecommonchar.c 
$ ./a.out
 
Enter the First string:
Programming
Enter the Second string:
Computer
 
On removing characters from second string we get: Cpute
--------------------------------
 . 
*******************
 C Program to Replace all the Characters by Lowercase 
================================ EOPN
/* * C Program to Replace all the Characters by Lowercase  
================================ EOKW
--------------------------------
output:
Input a string to convert to lower case
CHANDANA chanikya
rAVELLA
 
Input string in lower case:
chandana chanikya
ravella
--------------------------------
/*
 * C Program to Replace all the Characters by Lowercase 
 */
#include <stdio.h>
#include <string.h>
 
int main()
{
   char string[1000];
 
   printf("Input a string to convert to lower case\n");
   gets(string);
 
   printf("Input string in lower case: %s\n",strlwr(string));
 
   return  0;
}
 . 
*******************
C Program to Reverse the String using Recursion
================================ EOPN
/*
 * C Program to Reverse the String using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm12.c
$ a.out
Enter a string to reverse: malayalam
The string after reversing is: malayalam
 
$ a.out
Enter a string to reverse: cprogramming
The string after reversing is: gnimmargorpc
--------------------------------
 . 
*******************
 C Program to Reverse every Word of given String 
================================ EOPN
 /*  *  C Program to Reverse every Word of given String 
================================ EOKW
--------------------------------
output:
enter the string :C Programming Class
C gnimmargorP ssalC
--------------------------------
 
/* 
 *  C Program to Reverse every Word of given String
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    int i, j = 0, k = 0, x, len;
    char str[100], str1[10][20], temp;
 
    printf("enter the string :");
    scanf("%[^\n]s", str);
 
/* reads into 2d character array */
    for (i = 0;str[i] != '\0'; i++)
    {
        if (str[i] == ' ')
        {
            str1[k][j]='\0';
            k++;
            j=0;
        }
        else
        {
            str1[k][j]=str[i];
            j++;
        }
    }
    str1[k][j] = '\0';
 
/* reverses each word of a given string */
    for (i = 0;i <= k;i++)
    {
        len = strlen(str1[i]);
        for (j = 0, x = len - 1;j < x;j++,x--)
        {
            temp = str1[i][j];
            str1[i][j] = str1[i][x];
            str1[i][x] = temp;
        }
    }
    for (i = 0;i <= k;i++)
    {
        printf("%s ", str1[i]);
    }
}
 . 
*******************
 C Program to Count the Number of Vowels & Consonants in a Sentence 
================================ EOPN
/* * C program to read a sentence and count the total number of vowels * and consonants in the sentence. 
================================ EOKW
--------------------------------
output:
Enter a sentence
welcome to sanfoundry
No. of vowels in welcome to sanfoundry = 7
No. of consonants in welcome to sanfoundry = 12
--------------------------------
/*
 * C program to read a sentence and count the total number of vowels
 * and consonants in the sentence.
 */
#include <stdio.h>
 
void main()
{
    char sentence[80];
    int i, vowels = 0, consonants = 0, special = 0;
 
    printf("Enter a sentence \n");
    gets(sentence);
    for (i = 0; sentence[i] != '\0'; i++)
    {
        if ((sentence[i] == 'a' || sentence[i] == 'e' || sentence[i] ==
        'i' || sentence[i] == 'o' || sentence[i] == 'u') ||
        (sentence[i] == 'A' || sentence[i] == 'E' || sentence[i] ==
        'I' || sentence[i] == 'O' || sentence[i] == 'U'))
        {
            vowels = vowels + 1;
        }
        else
        {
            consonants = consonants + 1;
        }
        if (sentence[i] =='\t' ||sentence[i] =='\0' || sentence[i] ==' ')
        {
            special = special + 1;
        }
    }
    consonants = consonants - special;
    printf("No. of vowels in %s = %d\n", sentence, vowels);
    printf("No. of consonants in %s = %d\n", sentence, consonants);
}
 . 
*******************
 C Program to Count the Total Number of Words in the Sentence using Command Line Argument 
================================ EOPN
/* * C Program to Count Number of Words in a given Text Or Sentence 
================================ EOKW
--------------------------------
output:
Enter the string:
welcome to sanfoundry's c-programming class!
Number of words in given string are: 5
 
Enter the string:
Best Reference Books in C Programming
Number of words in given string are: 6
--------------------------------
/*
 * C Program to Count Number of Words in a given Text Or Sentence
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    char s[200];
    int count = 0, i;
 
    printf("Enter the string:\n");
    scanf("%[^\n]s", s);
    for (i = 0;s[i] != '\0';i++)
    {
        if (s[i] == ' ' && s[i+1] != ' ')
            count++;    
    }
    printf("Number of words in given string are: %d\n", count + 1);
}
 . 
*******************
 C Program to Find the Frequency of the Word the in a given Sentence 
================================ EOPN
/* *  C program to accept a string and find the number of times the word * 'the' appears in that string 
================================ EOKW
--------------------------------
output:
Enter a string:
The gandhi jayanthi is celeberated on october 2 is the day
that he has born.
Frequency of the word 'the' is 2
--------------------------------
/*
 *  C program to accept a string and find the number of times the word
 * 'the' appears in that string
 */
#include <stdio.h>
 
void main()
{
    int count = 0, i, times = 0, t, h, e, space;
    char string[100];
 
    puts("Enter a string:");
    gets(string);
   /*   Traverse the string to count the number of characters */
    while (string[count] != '\0')
    {
        count++;
    }
    /*   Finding the frequency of the word 'the' */
    for (i = 0; i <= count - 3; i++)
    {
        t =(string[i] == 't' || string[i] == 'T');
        h =(string[i + 1] == 'h' || string[i + 1] == 'H');
        e =(string[i + 2] == 'e'|| string[i + 2] == 'E');
        space =(string[i + 3] == ' ' || string[i + 3] == '\0');
        if ((t && h && e && space) == 1)
            times++;
    }
    printf("Frequency of the word 'the' is %d\n", times);
}
 . 
*******************
 C Program to Read a String and find the Sum of all Digits in the String   
================================ EOPN
  /* * C program to find the sum of all digits present in the string 
================================ EOKW
--------------------------------
output:
Enter the string containing both digits and alphabet
hello100
NO. of Digits in the string = 3
Sum of all digits = 1
--------------------------------
 
 
/*
 * C program to find the sum of all digits present in the string
 */
#include <stdio.h>
void main()
{
    char string[80];
    int count, nc = 0, sum = 0;
 
    printf("Enter the string containing both digits and alphabet \n");
    scanf("%s", string);
    for (count = 0; string[count] != '\0'; count++)
    {
        if ((string[count] >= '0') && (string[count] <= '9'))
        {
            nc += 1;
            sum += (string[count] - '0');
        }
    }
    printf("NO. of Digits in the string = %d\n", nc);
    printf("Sum of all digits = %d\n", sum);
}
 . 
*******************
C Program to Copy One String to Another using Recursion
================================ EOPN
/*
 * C Program to Copy One String to Another using Recursion
 
================================ EOKW
--------------------------------
output:
$ gcc recursive-copy.c -o recursive-copy
$ ./recursive-copy
 
Enter string to copy: Welcome to Sanfoundry
Copying success.
 
The first string is: Welcome to Sanfoundry
The second string is: Welcome to Sanfoundry
--------------------------------
 . 
*******************
C Program to find the First Capital Letter in a String using Recursion
================================ EOPN
/*
 * C Program to find the first capital letter in a string using 
 * Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm32.c
$ a.out
Enter a string to find it's first capital letter: iloveC
The first capital letter in iloveC is C.
--------------------------------
 . 
*******************
C Program to find the First Capital Letter in a String without using Recursion
================================ EOPN
/*
 * C Program to find the First Capital Letter in a String without 
 * using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm35.c
$ a.out
Enter a string to find it's first capital letter: prOgraMmInG
The first capital letter in prOgraMmInG is O.
--------------------------------
 . 
*******************
 C Program to Find the Frequency of Substring in the given String 
================================ EOPN
/*  * C Program to Find the Frequency of Substring in  * the given String 
================================ EOKW
--------------------------------
output:
Enter the string:
prrrogram is prrrogramming
Enter the substring to be matched:
rr
No of matches of substring in main string is: 4
 
Enter the string:
Sanfoundry C Programming
Enter the substring to be matched:
oun
No of matches of substring in main string is: 1
--------------------------------
/* 
 * C Program to Find the Frequency of Substring in 
 * the given String
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    int count = 0, i, j = 0, k;
    char str[100], str1[20];
 
    printf("Enter the string:\n");
    scanf(" %[^\n]s", str);
 
    printf("Enter the substring to be matched:\n");
    scanf(" %[^\n]s", str1);
 
    k = strlen(str1);
 
    for (i = 0; str[i] != '\0'; i++)
    {
        while (str[i] == str[j])
        {
            j ++;
        }
 
        if (j == k)
        {
            count ++;
            j = 0;
        }
    } 
    printf("No of matches of substring in main string is: %d\n", count);
}
 . 
*******************
C Program to Check whether two Strings are Anagrams
================================ EOPN
 /* * C Program to Check whether two Strings are Anagrams 
================================ EOKW
--------------------------------
output:
 
Enter the string
abll
Enter another string
ball
"abll" and "ball" are anagrams.
 
 
Enter the string
tall
Enter another string
all
"tall" and "all" are not anagrams.
--------------------------------
 
/*
 * C Program to Check whether two Strings are Anagrams
 */
#include <stdio.h>
 
int find_anagram(char [], char []);
 
int main()
{
    char array1[100], array2[100];
    int flag;
 
    printf("Enter the string\n");
    gets(array1);
    printf("Enter another string\n");
    gets(array2);
    flag = find_anagram(array1, array2);
    if (flag == 1)
        printf(""%s" and "%s" are anagrams.\n", array1, array2);
    else
        printf(""%s" and "%s" are not anagrams.\n", array1, array2);
    return 0;
}
 
int find_anagram(char array1[], char array2[])
{
    int num1[26] = {0}, num2[26] = {0}, i = 0;
 
    while (array1[i] != '\0')
    {
        num1[array1[i] - 'a']++;
        i++;
    }
    i = 0;
    while (array2[i] != '\0')
    {
        num2[array2[i] -'a']++;
        i++;
    }
    for (i = 0; i < 26; i++)
    {
        if (num1[i] != num2[i])
            return 0;
    }
    return 1;
}
 . 
*******************
 C Program to Print the Words Ending with Letter S 
================================ EOPN
 /*  * C Program to Print the Words Ending with Letter S 
================================ EOKW
--------------------------------
output:
 
Enter a string : Welcome to Sanfoundry's C Programming Class, Welcome Again to C Class !
Sanfoundry's
Class
--------------------------------
 
/* 
 * C Program to Print the Words Ending with Letter S
 */
#include <stdio.h>
#include <string.h>
 
char str[100];
 
void main()
{
    int i, t, j, len;
 
    printf("Enter a string : ");
    scanf("%[^\n]s", str);
 
    len = strlen(str);
 
    str[len] = ' ';
 
    for (t = 0, i = 0; i < strlen(str); i++)
    {
        if ((str[i] == ' ') && (str[i - 1] == 's'))
        {
            for (j = t; j < i; j++)
                printf("%c", str[j]);
            t = i + 1;
            printf("\n");
        }
        else
        {
            if (str[i] == ' ')
            {
                t = i + 1;
            }
        }
    }
}
 . 
*******************
 C Program to Search a Word & Replace it with the Specified Word 
================================ EOPN
/*
 * C Program to Search a Word & Replace it with the Specified Word
 
================================ EOKW
--------------------------------
output:
 
$ cc string31.c
$ a.out
Enter a string along with characters to be rep_strd:
prrrogram C prrrogramming
Enter the character to be rep_strd:
rr
Enter the new character:
mmm
prrrogram C prrrogramming
pmmmrogram C pmmmrogramming
--------------------------------
 . 
*******************
 C Program to Display the Characters in Prime Position a given String 
================================ EOPN
/* * C Program to Display the Characters in Prime Position a given String 
================================ EOKW
--------------------------------
output:
enter string
welcome to sanfoundry c-programming class!
prime characters in a string are
e
l
o
e
 
a
u
d
c
r
m
c
s
--------------------------------
/*
 * C Program to Display the Characters in Prime Position a given String
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    int i, j, k, count = 0;
    char str[50];
 
    printf("enter string\n");
    scanf("%[^\n]s", str);
    k = strlen(str);
    printf("prime characters in a string are\n");
    for (i = 2;i <= k;i++)
    {    
        count = 0;
        for (j = 2;j <= k;j++)
        {
            if (i % j == 0)
            {
                count++;
            }
        }
        if (count == 1)
        {
            printf("%c\n", str[i - 1]);
        }
    }
}
 . 
*******************
 C Program to Count Number of Words in a given Text Or Sentence 
================================ EOPN
/* * C Program to Count Number of Words in a given Text Or Sentence 
================================ EOKW
--------------------------------
output:
Enter the string:
welcome to sanfoundry's c-programming class!
Number of words in given string are: 5
 
Enter the string:
Best Reference Books in C Programming
Number of words in given string are: 6
--------------------------------
/*
 * C Program to Count Number of Words in a given Text Or Sentence
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    char s[200];
    int count = 0, i;
 
    printf("Enter the string:\n");
    scanf("%[^\n]s", s);
    for (i = 0;s[i] != '\0';i++)
    {
        if (s[i] == ' ' && s[i+1] != ' ')
            count++;    
    }
    printf("Number of words in given string are: %d\n", count + 1);
}
 . 
*******************
 C Program to Print Combination of two Words of two given Strings without any Repetition 
================================ EOPN
/*
 * C Program to Print Combination of two Words of two 
 * given Strings without any Repetition
 
================================ EOKW
--------------------------------
output:
 
$ cc string3.c
$ a.out
Enter a string:welcome to sanfoundry's c programming class,  welcome again to c class
Enter the word to check its occurence:welcome
The number of occ is 2
 
$ cc string3.c
$ a.out
Enter a string:welcome to sanfoundry's c programming class,  welcome again to c class
Enter the word to check its occurence:c
The number of occ is 2
--------------------------------
 . 
*******************
 C Program to Accept 2 String & check whether all Characters in first String is Present in second String & Print 
================================ EOPN
/*
 * C Program to Accept 2 String & check whether all Characters
 * in first String is Present in second String & Print 
 
================================ EOKW
--------------------------------
output:
 
$ cc allchar.c 
$ ./a.out
Enter string1: aspired
Enter string2: despair
All characters match in aspired and despair.
The characters that match are: a, d, e, i, p, r, s,
--------------------------------
 . 
*******************
 C Program to Check whether a given Character is present in a String, Find Frequency & Position of Occurrence 
================================ EOPN
/* 
 * C Program to Check whether a given Character is present in a
 * String, Find Frequency & Position of Occurrence 
 
================================ EOKW
--------------------------------
output:
 
$ cc charfrequency.c
$ ./a.out
Enter character: r
Now enter the word: programming
Positions of 'r' in programming are: 2  5  
Character 'r' occured for 2 times.
--------------------------------
 . 
*******************
 C Program to Find the First Occurence of the any Character of String2 in String1 
================================ EOPN
/
================================ EOKW
--------------------------------
output:
 
enter the string1:C Programming Class
 
enter the string2:rnp
 
first occurance of character of string2 in string1 is at position:3 and character is p
--------------------------------
/*
/*
 * C Program to Find the First Occurence of the any Character of 
 * String2 in string1 & also its Position  
 */
#include <stdio.h>
 
void main()
{
    char s1[50], s2[10];
    int i, flag = 0;
    char *ptr1, *ptr2;
 
    printf("\nenter the string1:");
    scanf(" %[^\n]s", s1);    
    printf("\nenter the string2:");
    scanf(" %[^\n]s", s2);
 
    /*COMPARING THE STRING1 CHARACTER BY CHARACTER WITH ALL CHARACTERS OF STRING1*/
    for (i = 0, ptr1 = s1;*ptr1 !=  '\0';ptr1++)
    {
        i++;
        for (ptr2 = s2; *ptr2 != '\0';ptr2++)
        {
            if (*ptr1  ==  *ptr2)
            {
                flag = 1;
                break;
            }
        }
        if (flag  ==  1)
            break;
    }
 
    if (flag  ==  1)
        printf("\nfirst occurance of character of string2 in string1 is at position:%d and character is %c", i, *ptr2);
    else
        printf("\nnone of the characters of string1 match with mone of characters of string2");
}
 . 
*******************
 C Program to find First and Last Occurrence of given Character in a String 
================================ EOPN
/*  * C Program to find First and Last Occurrence of given  * Character in a String 
================================ EOKW
--------------------------------
output:
enter the string
welcome to sanfoundry's c programming class!
enter character to be searched
m
6 
34
--------------------------------
/* 
 * C Program to find First and Last Occurrence of given 
 * Character in a String
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    int i, count = 0, pos1, pos2;
    char str[50], key, a[10];
 
    printf("enter the string\n");
    scanf(" %[^\n]s", str);
    printf("enter character to be searched\n");
    scanf(" %c", &key);
    for (i = 0;i <= strlen(str);i++)
    {
        if (key == str[i])
        {
            count++;
            if (count  == 1)
            {
                pos1 = i;
                pos2 = i;
                printf("%d\n", pos1 + 1);
            }
            else 
            {
                pos2 = i;
            }
        }
    }
    printf("%d\n", pos2 + 1);
}
 . 
*******************
 C Program to Find the Most/Least Repeated Character in the String 
================================ EOPN
/*
 *C Program to Find the Most/Least Repeated Character in the String
 
================================ EOKW
--------------------------------
output:
 
$ gcc minmaxchar.c 
$ ./a.out
Enter string: I love C programming
The string entered is: I love C programming
The most repeated characters are: g i m o r 
The least repeated characters are: a c e l n p v
--------------------------------
 . 
*******************
 C Program to Count the Occurence of a Substring in String 
================================ EOPN
/*  * C Program To Count the Occurrence of a Substring in String  
================================ EOKW
--------------------------------
output:
 
 
Enter a string : prrrogram c prrrogramming
 
Enter a substring : rr
rr occurs 2 times in prrrogram c prrrogramming
--------------------------------
/* 
 * C Program To Count the Occurrence of a Substring in String 
 */
#include <stdio.h>
#include <string.h>
 
char str[100], sub[100];
int count = 0, count1 = 0;
 
void main()
{
    int i, j, l, l1, l2;
 
    printf("\nEnter a string : ");
    scanf("%[^\n]s", str);
 
    l1 = strlen(str);
 
    printf("\nEnter a substring : ");
    scanf(" %[^\n]s", sub);
 
    l2 = strlen(sub);
 
    for (i = 0; i < l1;)
    {
        j = 0;
        count = 0;
        while ((str[i] == sub[j]))
        {
            count++;
            i++;
            j++;
        }
        if (count == l2)
        {
            count1++;                                   
            count = 0;
        }
        else
            i++;
    }    
    printf("%s occurs %d times in %s", sub, count1, str);
}
 . 
*******************
 C Program to Input a String with at least one Number, Print the Square of all the Numbers in a String 
================================ EOPN
/*
 * C Program to Input a String with atleast one Number, Print
 * the Square of all the Numbers in a String 
 
================================ EOKW
--------------------------------
output:
 
$ gcc numbersquare.c -lm
$ ./a.out
Enter string: 1 2 3 4 5
The string entered is: 1 2 3 4 5
*****************
Number	Square
*****************
1	   1
2	   4
3	   9
4	   16
5	   25
--------------------------------
 . 
*******************
 C Program which Converts an Integer to String & vice-versa 
================================ EOPN
/*
 * C Program which Converts an Integer to String & vice-versa
 
================================ EOKW
--------------------------------
output:
 
$ gcc stringtoint.c -lm
$ ./a.out
Enter a number: 12345
Number converted to string: 12345
Number converted back to integer: 12345
--------------------------------
 . 
*******************
 C program that takes input as 2323 and gives output as 2332. ie. the new number should be greater than the previous number but should have the same digits 
================================ EOPN
/* * C program that takes input as 2323 and gives output as 2332.  * ie.the new number should be greater than the previous number * but should have the same digits 
================================ EOKW
--------------------------------
output:
Enter a number: 56732   
The number greater than 56732 and made of same digits is 57632.
--------------------------------
/*
 * C program that takes input as 2323 and gives output as 2332. 
 * ie.the new number should be greater than the previous number
 * but should have the same digits
 */
#include <stdio.h>
#include <math.h>
 
int evaluate(int [], int);
int find(int);
 
int main()
{
    int num, result;
 
    printf("Enter a number: ");
    scanf("%d", &num);
    result = find(num);
    if (result)
    {
        printf("The number greater than %d and made of same digits is %d.\n", num, result);
    }
    else
    {
        printf("No higher value possible. Either all numbers are same or the digits of the numbers entered are in decreasing order.\n");
    }
 
    return 0;
}
 
int find(int num)
{
    int digit[20];
    int i = 0, len = 0, n, temp;
 
    n = num;
    while (n != 0)
    {
        digit[i] = n % 10;
        n = n / 10;
        i++;
    }
    len = i;
    for (i = 0; i < len - 1; i++)
    {
        if (digit[i] > digit[i + 1])
        {
            temp = digit[i];
            digit[i] = digit[i + 1];
            digit[i + 1] = temp;
 
            return (evaluate(digit, len));
        }
    }
 
    return 0;
}
 
int evaluate(int digit[], int len)
{
    int i, num = 0;
 
    for (i = 0; i < len; i++)
    {
        num += digit[i] * pow(10, i);
    }
 
    return num;
}
 . 
*******************
 C Program to Find the Sum of ASCII values of All Characters in a given String 
================================ EOPN
 /*  * C Program To Find the Sum of ASCII values of All Characters in a  * given String 
================================ EOKW
--------------------------------
output:
Enter the string : Welcome to Sanfoundry's C Programming Class, Welcome Again to C Class !
 
Sum of all characters : 6307
--------------------------------
 
/* 
 * C Program To Find the Sum of ASCII values of All Characters in a 
 * given String
 */
#include <stdio.h>
#include <string.h>
 
void main()
{
    int sum = 0, i, len;
    char string1[100];
 
    printf("Enter the string : ");
    scanf("%[^\n]s", string1);
        len = strlen(string1);
    for (i = 0; i < len; i++)
    {
        sum = sum + string1[i];
    }
    printf("\nSum of all characters : %d ",sum);
}
 . 
*******************
  C Program to Check whether the given Integer has an Alternate Pattern 
================================ EOPN
/*
 * C Program to Check whether the given Integer has an Alternate 
 * Pattern 
 
================================ EOKW
--------------------------------
output:
$ gcc alternative.c -o alternative
$ ./alternative
 
Enter the number: 10
 
COUNT : 4
TRUE : ALTERNATIVE PATTERN DOES EXIST
--------------------------------
 . 
*******************
  C Program to round Floor of integer to next Lower Power of 2 
================================ EOPN
/*
 * C Program to round floor of integer to next lower power of 2
 
================================ EOKW
--------------------------------
output:
$ gcc next_pow.c -o next_pow
$ ./next_pow
 
Enter the number: 10
NEXT NUMBER LOWER TO THE POWER OF 2 : 16
--------------------------------
 . 
*******************
  C Program to Print the Range of Fundamental Data Types 
================================ EOPN
/* * C Program to Print the Range  
================================ EOKW
--------------------------------
output:
 
range of int
-2147483648 to 2147483647
range of unsigned int
0 to 4294967295
range of char
-128 to 127
range of unsigned char
0 to 255
range of short
-32768 to 32767
range of unsigned short
0 to 65535
--------------------------------
/*
 * C Program to Print the Range 
 */
#include <stdio.h>
#define SIZE(x) sizeof(x)*8
 
void signed_one(int);
void unsigned_one(int);
 
void main()
{
    printf("\nrange of int");
    signed_one(SIZE(int));    
    printf("\nrange of unsigned int");
    unsigned_one(SIZE(unsigned int));
    printf("\nrange of char");
    signed_one(SIZE(char));
    printf("\nrange of unsigned char");
    unsigned_one(SIZE(unsigned char));
    printf("\nrange of short");
    signed_one(SIZE(short));
    printf("\nrange of unsigned short");
    unsigned_one(SIZE(unsigned short));
 
}
/* RETURNS THE RANGE SIGNED*/
void signed_one(int count)
{
    int min, max, pro;
    pro = 1;
    while (count != 1)
    {
        pro = pro << 1;
        count--;
    }
    min = ~pro;
    min = min + 1;
    max = pro - 1;
    printf("\n%d to %d", min, max);
}    
/* RETURNS THE RANGE UNSIGNED */
void unsigned_one(int count)
{
    unsigned int min, max, pro = 1;
 
    while (count != 0)
    {
        pro = pro << 1;
        count--;
    }
    min = 0;
    max = pro - 1;
    printf("\n%u to %u", min, max);
}
 . 
*******************
  C Program to Check if All the Bits of a given Integer is One(1) 
================================ EOPN
/*
 * C Program to check if all the bits of a given integer is one(1)
 
================================ EOKW
--------------------------------
output:
$ cc bit22.c
$ a.out
Enter the number : 0
 
FALSE : ALL BITS ARE NOT SET
--------------------------------
 . 
*******************
  C Program to find Next higher Value of N with same 1s 
================================ EOPN
/*
 * C Program to next higher value of n with same 1's
 
================================ EOKW
--------------------------------
output:
 
$ cc bit18.c
$ a.out
Enter a number : 128
The next highest number is : 256 
Enter a number : 127
The next highest number is : 191
Enter a number : 6
The next highest number is : 9
Enter a number : 12
The next highest number is : 17
--------------------------------
 . 
*******************
  C Program to Count the Number of Trailing Zeroes in Integer 
================================ EOPN
/*
 * C Program to Count the Number of Trailing Zeroes in Integer
 
================================ EOKW
--------------------------------
output:
 
$ cc bit4.c
$ ./a.out
enter the number:128
7
$ ./a.out
enter the number:-127
0
--------------------------------
 . 
*******************
  C Program to Use Bitwise Operations to Count the Number of Leading Zeros in a Number x 
================================ EOPN
/*
 * C Program to Use Bitwise Operations to Count the Number of 
 * Leading Zero's in a Number x
 
================================ EOKW
--------------------------------
output:
gcc leading_zeros.c -o leading-zero
./leading-zero
 
Enter the digit: 16
Number of leading zero's is: 27
--------------------------------
 . 
*******************
  C Program to find the Highest Bit Set for any given Integer 
================================ EOPN
/*
 * C Program to find the Highest Bit Set for any given Integer
 
================================ EOKW
--------------------------------
output:
 
$ cc bit17.c
$ a.out
enter the number:10000
000000000000000000010011100010000
the position of the highest bit set is 13
--------------------------------
 . 
*******************
  C Program to Count Number of bits set to 0 in an Integer 
================================ EOPN
/*
 * C Program to Count Number of bits set to 0 in a Integer x
 
================================ EOKW
--------------------------------
output:
$ gcc count_bits_unset.c -o bits_unset_count
$ ./bits_unset_count
 
Enter the number: 1
Number of bit's set to zero's are: 0
--------------------------------
 . 
*******************
  C Program to Replace Bits in Integer from Specified Positions from Another Integer 
================================ EOPN
/*
 * C Program to Replace Bits in Integer from Specified Positions from 
 * Another Integer
 
================================ EOKW
--------------------------------
output:
$ gcc replace_bits.c -o replace
$ ./replace
 
Enter the first number: 10
 
Enter the second number: 10
 
Enter the i'th bit in num1 to replace with j'th bit in num2: 2
 
Enter the j'th bit in num2 to replace with i'th bit in num1: 1
 
Result = 14
--------------------------------
 . 
*******************
  C Program to Replace Bits in Integer x from Bit Position a to b from another Integer y 
================================ EOPN
/*
 * C Program to Replace Bits in Integer x from Bit Position a to b from another Integer y
 
================================ EOKW
--------------------------------
output:
 
$ cc bit13.c
$ a.out
**Replacing the bits in integer x from bit position a to b from another integer y**
read number 1
0x11223344
Read number 2:
0x55667788
Read LSB postion:
12
MSB should always be greater than LSB
Read MSB position:
19
the number num1 after shifting the bits is 0x11267344
--------------------------------
 . 
*******************
  C Program takes Byte as Input and returns all the Bits between given Positions 
================================ EOPN
/*
 * C Program takes Byte as Input and returns all the Bits between 
 * given Positions
 
================================ EOKW
--------------------------------
output:
Enter the BYTE:
101
Enter a full 8-bit value.
--------------------------------
 . 
*******************
  C Program to Swap the ith and jth Bits for a 32-Bit Integer 
================================ EOPN
/*
 * C Program to Swap the ith and jth Bits for a 32-Bit Integer
 
================================ EOKW
--------------------------------
output:
./a.out
Enter the number: 2
 
Enter position 1: 0
 
Enter position 2: 1
 
The result after swapping the respective bits are: 1
--------------------------------
 . 
*******************
  C Program to Check if a given Integer is Power of 2 using Bitwise Operators 
================================ EOPN
/*
 * C Program to Check if a given Integer is Power of 2 using Bitwise Operators
 
================================ EOKW
--------------------------------
output:
 
$ gcc bit25.c
$  a.out
Enter Number128
YES
$  a.out
Enter Number126
NO
--------------------------------
 . 
*******************
  C Program to Swap two Integers without using Temporary Variables and Bitwise Operations 
================================ EOPN
/*
 * C Program to Swap two Integers without using Temporary Variables 
 * and Bitwise Operations
 
================================ EOKW
--------------------------------
output:
 
$ gcc bit28.c
$ a.out
Enter 2 nos:
4
7
 
You have entered x=4 y=7
Swapped . . . .
x=7 y=4
--------------------------------
 . 
*******************
  C Program to Find the Position of String of 1-bits in a Number for a given Length 
================================ EOPN
/*
 * C Program to Find the Position of String of 1-bits in a Number 
 * for a given Length
 
================================ EOKW
--------------------------------
output:
 
$ cc bit7.c
$ a.out
**Finding the position of 1-bits in a number for given length**
enter a number
10000
enter the length
3
the position of 1 in the string : 10
$ a.out
enter a number
700
enter the length
4
the position of 1 in the string : 5
--------------------------------
 . 
*******************
  C Program to Check if nth Bit in a 32-bit Integer is Set or not 
================================ EOPN
/*
 * C Program to Check if nth Bit in a 32-bit Integer is Set or not
 
================================ EOKW
--------------------------------
output:
 
$ cc bit32.c
$ a.out
Enter the unsigned integer:
101
enter position
4
NO
 
$ a.out
Enter the unsigned integer:
113
enter position
4
YES
--------------------------------
 . 
*******************
  C Program to Check if a given Bit Position is set to One or not 
================================ EOPN
/*
 * C Program to Check if a given Bit Position is set to One or not
 
================================ EOKW
--------------------------------
output:
 
$ cc bit14.c
$ a.out
Enter the unsigned integer:
128
enter position to be searched
7
TRUE
--------------------------------
 . 
*******************
  C Program to Perform Binary Addition of Strings and Print it 
================================ EOPN
/*
 *  C Program to Perform Binary Addition of Strings and Print it 
 
================================ EOKW
--------------------------------
output:
 
$ cc bit20.c
$ a.out
enter string1
00010001
enter string2
00010010
binary addition of number is
000100011
--------------------------------
 . 
*******************
  C Program to Reverse all the Bits of an 32-bit Integer using Bitwise 
================================ EOPN
/*
 * C Program to Reverse all the Bits of an 32-bit Integer using 
 * Bitwise 
 
================================ EOKW
--------------------------------
output:
Enter the number: 2
 
The reversed resultant = 1
--------------------------------
 . 
*******************
  C Program to Count the Number of Bits needed to be Flipped to Integer X to Generate Integer Y 
================================ EOPN
/*
 * C Program to Count the Number of Bits needed to be Flipped 
 * to Integer X to Generate Integer Y
 
================================ EOKW
--------------------------------
output:
 
$ cc flip.c
$ a.out
Enter the number
127
Enter another number
125
flip count = 1
$ a.out
Enter the number
127
Enter another number
128
flip count = 8
$ a.out
Enter the number
42
Enter another number
21
flip count = 6
--------------------------------
 . 
*******************
  C Program to Count the Number of Bits set to One using Bitwise Operations 
================================ EOPN
/*
 * C Program to Count the Number of Bits set to One using 
 * Bitwise Operations
 
================================ EOKW
--------------------------------
output:
 
$ cc bit2.c
$ a.out
Enter the unsigned integer:
128
number of one's are :
1
 
$ a.out
Enter the unsigned integer:
-127
number of one's are :
26
--------------------------------
 . 
*******************
  C Program To Identify the Missing Number in an Integer Array of Size N-1 with Numbers[1,N] 
================================ EOPN
/*
 * C Program To Identify the Missing Number in an Integer 
 * Array of Size N-1 with Numbers[1,N]
 
================================ EOKW
--------------------------------
output:
 
$ cc bit29.c
$ a.out
enter the range of array
9
enter a[0]element into the array:1
enter a[1]element into the array:5
enter a[2]element into the array:2
enter a[3]element into the array:7
enter a[4]element into the array:3
enter a[5]element into the array:4
enter a[6]element into the array:10
enter a[7]element into the array:9
enter a[8]element into the array:6
The missing number -> 8
$ a.out
enter the range of array
4
enter a[0]element into the array:1
enter a[1]element into the array:5
enter a[2]element into the array:3
enter a[3]element into the array:2
The missing number -> 4
$ a.out
enter the range of array
4
enter a[0]element into the array:3
enter a[1]element into the array:2
enter a[2]element into the array:5
enter a[3]element into the array:4
The missing number -> 1
--------------------------------
 . 
*******************
  C Program to Check whether the given Number is Palindrome or not using Bitwise Operator 
================================ EOPN
/*
 * C Program to Check whether the given Number is Palindrome 
 * or not using Bitwise Operator
 
================================ EOKW
--------------------------------
output:
 
$ cc bits21.c
$ a.out
Enter a number(max 255)153
The number 153 in binary is:10011001
NUMBER IS PALINDROME
 
$ a.out
Enter a number(max 255)24
The number 24 in binary is:00011000
NUMBER IS PALINDROME
--------------------------------
 . 
*******************
 C Program to Implement a Stack  
================================ EOPN
/* * C program to implement stack. Stack is a LIFO data structure. * Stack operations: PUSH(insert operation), POP(Delete operation) * and Display stack. 
================================ EOKW
--------------------------------
output:
STACK OPERATION
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
1
Enter the element to be pushed
34
Do you want to continue(Type 0 or 1)?
0
$ a.out
STACK OPERATION
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
1
Enter the element to be pushed
34
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
2
poped element is = 34
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
3
Stack is empty
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
1
Enter the element to be pushed
50
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
1
Enter the element to be pushed
60
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
3
 
The status of the stack is
60
50
 
Do you want to continue(Type 0 or 1)?
1
------------------------------------------
      1    -->    PUSH
      2    -->    POP
      3    -->    DISPLAY
      4    -->    EXIT
------------------------------------------
Enter your choice
4
--------------------------------
/*
 * C program to implement stack. Stack is a LIFO data structure.
 * Stack operations: PUSH(insert operation), POP(Delete operation)
 * and Display stack.
 */
#include <stdio.h>
#define MAXSIZE 5
 
struct stack
{
    int stk[MAXSIZE];
    int top;
};
typedef struct stack STACK;
STACK s;
 
void push(void);
int  pop(void);
void display(void);
 
void main ()
{
    int choice;
    int option = 1;
    s.top = -1;
 
    printf ("STACK OPERATION\n");
    while (option)
    {
        printf ("------------------------------------------\n");
        printf ("      1    -->    PUSH               \n");
        printf ("      2    -->    POP               \n");
        printf ("      3    -->    DISPLAY               \n");
        printf ("      4    -->    EXIT           \n");
        printf ("------------------------------------------\n");
 
        printf ("Enter your choice\n");
        scanf    ("%d", &choice);
        switch (choice)
        {
        case 1:
            push();
            break;
        case 2:
            pop();
            break;
        case 3:
            display();
            break;
        case 4:
            return;
        }
        fflush (stdin);
        printf ("Do you want to continue(Type 0 or 1)?\n");
        scanf    ("%d", &option);
    }
}
/*  Function to add an element to the stack */
void push ()
{
    int num;
    if (s.top == (MAXSIZE - 1))
    {
        printf ("Stack is Full\n");
        return;
    }
    else
    {
        printf ("Enter the element to be pushed\n");
        scanf ("%d", &num);
        s.top = s.top + 1;
        s.stk[s.top] = num;
    }
    return;
}
/*  Function to delete an element from the stack */
int pop ()
{
    int num;
    if (s.top == - 1)
    {
        printf ("Stack is Empty\n");
        return (s.top);
    }
    else
    {
        num = s.stk[s.top];
        printf ("poped element is = %dn", s.stk[s.top]);
        s.top = s.top - 1;
    }
    return(num);
}
/*  Function to display the status of the stack */
void display ()
{
    int i;
    if (s.top == -1)
    {
        printf ("Stack is empty\n");
        return;
    }
    else
    {
        printf ("\n The status of the stack is \n");
        for (i = s.top; i >= 0; i--)
        {
            printf ("%d\n", s.stk[i]);
        }
    }
    printf ("\n");
}
 . 
*******************
C Program to Implement a Queue using an Array
================================ EOPN
/* * C Program to Implement a Queue using an Array 
================================ EOKW
--------------------------------
output:
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 10
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 15
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 20
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 1
Inset the element in queue : 30
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 2
Element deleted from queue is : 10
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 3
Queue is :
15 20 30
1.Insert element to queue
2.Delete element from queue
3.Display all elements of queue
4.Quit
Enter your choice : 4
--------------------------------
/*
 * C Program to Implement a Queue using an Array
 */
#include <stdio.h>
 
#define MAX 50
 
void insert();
void delete();
void display();
int queue_array[MAX];
int rear = - 1;
int front = - 1;
main()
{
    int choice;
    while (1)
    {
        printf("1.Insert element to queue \n");
        printf("2.Delete element from queue \n");
        printf("3.Display all elements of queue \n");
        printf("4.Quit \n");
        printf("Enter your choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
            insert();
            break;
            case 2:
            delete();
            break;
            case 3:
            display();
            break;
            case 4:
            exit(1);
            default:
            printf("Wrong choice \n");
        } /* End of switch */
    } /* End of while */
} /* End of main() */
 
void insert()
{
    int add_item;
    if (rear == MAX - 1)
    printf("Queue Overflow \n");
    else
    {
        if (front == - 1)
        /*If queue is initially empty */
        front = 0;
        printf("Inset the element in queue : ");
        scanf("%d", &add_item);
        rear = rear + 1;
        queue_array[rear] = add_item;
    }
} /* End of insert() */
 
void delete()
{
    if (front == - 1 || front > rear)
    {
        printf("Queue Underflow \n");
        return ;
    }
    else
    {
        printf("Element deleted from queue is : %d\n", queue_array[front]);
        front = front + 1;
    }
} /* End of delete() */
 
void display()
{
    int i;
    if (front == - 1)
        printf("Queue is empty \n");
    else
    {
        printf("Queue is : \n");
        for (i = front; i <= rear; i++)
            printf("%d ", queue_array[i]);
        printf("\n");
    }
} /* End of display() */
 . 
*******************
 C Program to Implement Priority Queue to Add and Delete Elements 
================================ EOPN
/*  * C Program to Implement Priority Queue to Add and Delete Elements 
================================ EOKW
--------------------------------
output:
1 - Insert an element into queue
2 - Delete an element from queue
3 - Display queue elements
4 - Exit
Enter your choice : 1
 
Enter value to be inserted : 20
 
Enter your choice : 1
 
Enter value to be inserted : 45
 
Enter your choice : 1
 
Enter value to be inserted : 89
 
Enter your choice : 3
 89  45  20 
Enter your choice : 1
 
Enter value to be inserted : 56
 
Enter your choice : 3
 89  56  45  20 
Enter your choice : 2
 
Enter value to delete : 45
 
Enter your choice : 3
 89  56  20 
Enter your choice : 4
--------------------------------
/* 
 * C Program to Implement Priority Queue to Add and Delete Elements
 */
#include <stdio.h>
#include <stdlib.h>
 
#define MAX 5
 
void insert_by_priority(int);
void delete_by_priority(int);
void create();
void check(int);
void display_pqueue();
 
int pri_que[MAX];
int front, rear;
 
void main()
{
    int n, ch;
 
    printf("\n1 - Insert an element into queue");
    printf("\n2 - Delete an element from queue");
    printf("\n3 - Display queue elements");
    printf("\n4 - Exit");
 
    create();
 
    while (1)
    {
        printf("\nEnter your choice : ");    
        scanf("%d", &ch);
 
        switch (ch)
        {
        case 1: 
            printf("\nEnter value to be inserted : ");
            scanf("%d",&n);
            insert_by_priority(n);
            break;
        case 2:
            printf("\nEnter value to delete : ");
            scanf("%d",&n);
            delete_by_priority(n);
            break;
        case 3: 
            display_pqueue();
            break;
        case 4: 
            exit(0);
        default: 
            printf("\nChoice is incorrect, Enter a correct choice");
        }
    }
}
 
/* Function to create an empty priority queue */
void create()
{
    front = rear = -1;
}
 
/* Function to insert value into priority queue */
void insert_by_priority(int data)
{
    if (rear >= MAX - 1)
    {
        printf("\nQueue overflow no more elements can be inserted");
        return;
    }
    if ((front == -1) && (rear == -1))
    {
        front++;
        rear++;
        pri_que[rear] = data;
        return;
    }    
    else
        check(data);
    rear++;
}
 
/* Function to check priority and place element */
void check(int data)
{
    int i,j;
 
    for (i = 0; i <= rear; i++)
    {
        if (data >= pri_que[i])
        {
            for (j = rear + 1; j > i; j--)
            {
                pri_que[j] = pri_que[j - 1];
            }
            pri_que[i] = data;
            return;
        }
    }
    pri_que[i] = data;
}
 
/* Function to delete an element from queue */
void delete_by_priority(int data)
{
    int i;
 
    if ((front==-1) && (rear==-1))
    {
        printf("\nQueue is empty no elements to delete");
        return;
    }
 
    for (i = 0; i <= rear; i++)
    {
        if (data == pri_que[i])
        {
            for (; i < rear; i++)
            {
                pri_que[i] = pri_que[i + 1];
            }
 
        pri_que[i] = -99;
        rear--;
 
        if (rear == -1) 
            front = -1;
        return;
        }
    }
    printf("\n%d not found in queue to delete", data);
}
 
/* Function to display queue elements */
void display_pqueue()
{
    if ((front == -1) && (rear == -1))
    {
        printf("\nQueue is empty");
        return;
    }
 
    for (; front <= rear; front++)
    {
        printf(" %d ", pri_que[front]);
    }
 
    front = 0;
}
 . 
*******************
 C Program to Check String is Palindrome using Stack 
================================ EOPN
/* * C Program to Identify whether the String is Palindrome or not using Stack 
================================ EOKW
--------------------------------
output:
1-enter string
2-exit
enter your choice
1
Enter the String
madam
madam is palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
ugesh
ugesh is not a palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
abccba
abccba is palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
abdbca
abdbca is not a palindrome
1-enter string
2-exit
enter your choice
2
--------------------------------
/*
 * C Program to Identify whether the String is Palindrome or not using Stack
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 50
 
int top = -1, front = 0;
int stack[MAX];
void push(char);
void pop();
 
void main()
{
    int i, choice;
    char s[MAX], b;
    while (1)
    {
        printf("1-enter string\n2-exit\n");
        printf("enter your choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the String\n");
            scanf("%s", s);
            for (i = 0;s[i] != '\0';i++)
            {
                b = s[i];
                push(b);
            }
            for (i = 0;i < (strlen(s) / 2);i++)
            {
                if (stack[top] == stack[front])
                {
                    pop();
                    front++;
                }
                else
                {
                    printf("%s is not a palindrome\n", s);
                    break; 
                }
            }
            if ((strlen(s) / 2)  =  =  front)
                printf("%s is palindrome\n",  s);
            front  =  0;
            top  =  -1;
            break;
        case 2:
            exit(0);
        default:
            printf("enter correct choice\n");
        }
    }
}
 
/* to push a character into stack */
void push(char a)
{
    top++;
    stack[top]  =  a;
}
 
/* to delete an element in stack */
void pop()
{
    top--;
}
 . 
*******************
 C Program to Check if Expression is correctly Parenthesized 
================================ EOPN
/* * C Program to Check if Expression is correctly Parenthesized   
================================ EOKW
--------------------------------
output:
enter expression
(a+b)
expression is valid
 
 
enter expression
(a+b))
expression is invalid
 
 
enter expression
((a+b)
expression is invalid
 
 
enter expression
((a+b)*(c+d))
expression is valid
--------------------------------
/*
 * C Program to Check if Expression is correctly Parenthesized  
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
 
int top = -1;
char stack[100];
 
// function prototypes
void push(char);
void pop();
void find_top();
 
void main()
{
	int i;
	char a[100];
	printf("enter expression\n");
	scanf("%s", &a);
	for (i = 0; a[i] != '\0';i++)
	{
		if (a[i] == '(')
		{
			push(a[i]);
		}
		else if (a[i] == ')')
		{
			pop();
		}
	}
	find_top();
}
 
// to push elements in stack
void push(char a)
{
	stack[top] = a;
	top++;
}
 
// to pop elements from stack
void pop()
{
	if (top == -1)
	{
		printf("expression is invalid\n");
		exit(0);
	}	
	else
	{		
		top--;
	}
}
 
// to find top element of stack
void find_top()
{
	if (top == -1)
		printf("\nexpression is valid\n");
	else
		printf("\nexpression is invalid\n");
}
 . 
*******************
 C Program to Identify whether the String is Palindrome or not using Stack 
================================ EOPN
/* * C Program to Identify whether the String is Palindrome or not using Stack 
================================ EOKW
--------------------------------
output:
1-enter string
2-exit
enter your choice
1
Enter the String
madam
madam is palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
ugesh
ugesh is not a palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
abccba
abccba is palindrome
1-enter string
2-exit
enter your choice
1
Enter the String
abdbca
abdbca is not a palindrome
1-enter string
2-exit
enter your choice
2
--------------------------------
/*
 * C Program to Identify whether the String is Palindrome or not using Stack
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 50
 
int top = -1, front = 0;
int stack[MAX];
void push(char);
void pop();
 
void main()
{
    int i, choice;
    char s[MAX], b;
    while (1)
    {
        printf("1-enter string\n2-exit\n");
        printf("enter your choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the String\n");
            scanf("%s", s);
            for (i = 0;s[i] != '\0';i++)
            {
                b = s[i];
                push(b);
            }
            for (i = 0;i < (strlen(s) / 2);i++)
            {
                if (stack[top] == stack[front])
                {
                    pop();
                    front++;
                }
                else
                {
                    printf("%s is not a palindrome\n", s);
                    break; 
                }
            }
            if ((strlen(s) / 2)  =  =  front)
                printf("%s is palindrome\n",  s);
            front  =  0;
            top  =  -1;
            break;
        case 2:
            exit(0);
        default:
            printf("enter correct choice\n");
        }
    }
}
 
/* to push a character into stack */
void push(char a)
{
    top++;
    stack[top]  =  a;
}
 
/* to delete an element in stack */
void pop()
{
    top--;
}
 . 
*******************
 C Program to Implement various Queue Functions using Dynamic Memory Allocation 
================================ EOPN
/* * C Program to Implement various Queue Functions using Dynamic Memory Allocation 
================================ EOKW
--------------------------------
output:
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
6
 
**************Size is 0 ************
 
enter your choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
queue is empty
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
4
queue is empty
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
5
****************The queue is empty****************
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
45
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
56
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
67
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
78
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
89
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
6
- 45 -- 56 -- 67 -- 78 -- 89 -
**************Size is 5 ************
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
5
****************The front element is 45 ***********
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
******45 has been removed******
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
******56 has been removed******
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
******67 has been removed******
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
6
- 78 -- 89 -
**************Size is 2 ************
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
******78 has been removed******
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
3
******89 has been removed******
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
6
 
**************Size is 0 ************
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
2
enter value to insert
34
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
6
- 34 -
**************Size is 1 ************
 
enter the choice
1 : create an empty queue
2 : Insert element
3 : Dequeue an element
4 : Check if empty
5 : Get the first element of the queue
6 : Get the number of entries in the queue
7 : Exit
7
--------------------------------
/*
 * C Program to Implement various Queue Functions using Dynamic Memory Allocation
 */
#include <stdio.h>
#include <stdlib.h>
#define MAX 10
 
struct node
{
    int data;
    struct node *link;
}*front, *rear;
 
// function protypes
void insert();
void delete();
void queue_size();
void check();
void first_element();
 
void main()
{
    int choice, value;
 
    while(1)
    {
        printf("enter the choice \n");
        printf("1 : create an empty queue \n2 : Insert element\n");
        printf("3 : Dequeue an element \n4 : Check if empty\n");
        printf("5. Get the first element of the queue\n");
        printf("6. Get the number of entries in the queue\n");
        printf("7. Exit\n");
        scanf("%d", &choice);
        switch (choice)    // menu driven program
        {
        case 1: 
            printf("Empty queue is created with a capacity of %d\n", MAX);
            break;
        case 2:    
            insert();
            break;
        case 3: 
            delete();
            break;
        case 4: 
            check();
            break;
        case 5: 
            first_element();
            break;
        case 6: 
            queue_size();
            break;
        case 7: 
            exit(0);
        default: 
            printf("wrong choice\n");
            break;
        }
    }
}
 
// to insert elements in queue
void insert()
{
    struct node *temp;
 
    temp = (struct node*)malloc(sizeof(struct node));
    printf("Enter value to be inserted \n");
    scanf("%d", &temp->data);
    temp->link = NULL;
    if (rear  ==  NULL)
    {
        front = rear = temp;
    }
    else
    {
        rear->link = temp;
        rear = temp;
    }    
}
 
// delete elements from queue
void delete()
{
    struct node *temp;
 
    temp = front;
    if (front == NULL)
    {
        printf("queue is empty \n");
        front = rear = NULL;
    }
    else
    {    
        printf("deleted element is %d\n", front->data);
        front = front->link;
        free(temp);
    }
}
 
// check if queue is empty or not
void check()
{
    if (front == NULL)
        printf("\nQueue is empty\n");
    else
        printf("*************** Elements are present in the queue **************\n");
}
 
// returns first element of queue
void first_element()
{
    if (front == NULL)
    {
        printf("**************** The queue is empty ****************\n");
    }
    else
        printf("**************** The front element is %d ***********\n", front->data);        
}
 
// returns number of entries and displays the elements in queue
void queue_size()
{
    struct node *temp;
 
    temp = front;
    int cnt = 0;
    if (front  ==  NULL)
    {
        printf(" queue empty \n");
    }
    while (temp)
    {
        printf("%d  ", temp->data);
        temp = temp->link;
        cnt++;
    }
    printf("********* size of queue is %d ******** \n", cnt);
}
 . 
*******************
 C Program to Implement Queue Functions Using Arrays and Macros 
================================ EOPN
/* * C Program to Implement Queue Functions Using Arrays and Macros 
================================ EOKW
--------------------------------
output:
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:3
QUEUE EMPTY
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:2
QUEUE EMPTY
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:4
QUEUE EMPTY
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:5
QUEUE EMPTY
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:1
 
Enter the value you want to insert in the queue:67
 
Element successfully inserted in the queue
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:1
 
Enter the value you want to insert in the queue:45
 
Element successfully inserted in the queue
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:3
67->45->
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:6
 
the queue size is: 2
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:5
The first element of the queue is: 67
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:2
 
The deleted element is: 67
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:3
45->
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:7
 
 
QUEUE DESTROYED
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:1
 
Enter the value you want to insert in the queue:45
 
Element successfully inserted in the queue
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:3
45->
Do you want to continue:y
MENU
Enter 1 to INSERT an element in the queue
Enter 2 to DELETE an element in the queue
Enter 3 to DISPLAY the elements of the queue
Enter 4 to CHECK if the queue is EMPTY
Enter 5 to KNOW the FIRST element of the queue
Enter 6 to KNOW the queue SIZE
Enter 7 to Destroy the Queue
Enter 8 to EXIT the program
Enter your Choice:8
--------------------------------
/*
 * C Program to Implement Queue Functions Using Arrays and Macros
 */
#include <stdio.h>
#include<stdlib.h>
 
/* Macro  Definition */
#define MAX 10
#define EMPTY "QUEUE EMPTY"
#define ISFULL rear >=  MAX - 1
#define FULL "QUEUE FULL"
#define ISEMPTY rear == -1
 
/* Global Variable Declaration */
int queue[MAX], front = 0, rear = -1;
 
/* Fucntion Prototypes */
void insert_rear();
void delete_front();
void display_queue();
void empty_queue();
void front_ele();
int queue_size();
void destroy();
 
void main()
{
    int choice, n, flag = 0;
    char ch;
 
    do
    {
        printf("MENU\n");
        printf("Enter 1 to INSERT an element in the queue\n");
        printf("Enter 2 to DELETE an element in the queue\n");
        printf("Enter 3 to DISPLAY the elements of the queue\n");
        printf("Enter 4 to CHECK if the queue is EMPTY\n");
        printf("Enter 5 to KNOW the FIRST element of the queue\n");
        printf("Enter 6 to KNOW the queue SIZE\n");
        printf("Enter 7 to Destroy the Queue\n");
        printf("Enter 8 to EXIT the program\n");
        printf("Enter your Choice:");
        scanf("%d", &choice);
        switch(choice)
        {
        case 1: 
            insert_rear();
            break;
        case 2: 
            delete_front();
            break;
        case 3: 
            display_queue();
            break;
        case 4: 
            empty_queue();
            break;
        case 5: 
            front_ele();
            break;
        case 6: 
            n = queue_size();
            printf("\nthe queue size is: %d", n);
            break;
        case 7: 
            destroy();
            flag = 1;
            break;
        case 8: 
            exit(0);
            break;
        default: 
            printf("WRONG CHOICE\n");
        }
        printf("\nDo you want to continue:");
        scanf(" %c", &ch);
    } while(ch == 'y' || ch == 'Y');
    if (flag == 0)
    {
        destroy();
    }
}
 
/* Code to Insert the element in Queue */
void insert_rear()
{
    int val;
 
    if (ISFULL)
    {
        printf(FULL);
    }
    else
    {
        printf("\nEnter the value you want to insert in the queue:");
        scanf("%d", &val);
        rear++;
        queue[rear] = val;
        printf("\nElement successfully inserted in the queue");
    }    
}
 
/* Code to Delete the element in Queue */
void delete_front()
{
    if (ISEMPTY)
    {
        printf(EMPTY);
    }
    else
    {
        printf("\nThe deleted element is: %d", queue[front]);
        front++;
    }
}
 
/* Code to Display the Elements of Queue */
void display_queue()
{
    int i;
 
    if (ISEMPTY)
    {
        printf(EMPTY);
    }
    else
    {
        for (i = front;i <= rear;i++)
        {
            printf("%d->", queue[i]);
        }
    }
}
 
/* Code to Check the Queue is Empty or Not */
void empty_queue()
{
    if (ISEMPTY)
    {
        printf(EMPTY);
    }
    else
    {
        printf("\nTHE QUEUE has elements\n");
    }
}
 
 
/* Code to Check the First element of Queue */
void front_ele()
{
    if (ISEMPTY)
    {
        printf(EMPTY);
    }
    else
    {
        printf("The first element of the queue is: %d", queue[front]);
    }
}
 
/* Code to Check the Size of Queue */
int queue_size()
{
    int i = 0, count = 0;
 
    if (ISEMPTY)
    {
        printf(EMPTY);
    }
    else
    {
        for (i = front;i <= rear;i++)
        {
            count++;
        }
    }
    return count;
}    
 
/* Code to destroy the queue */    
void destroy()
{
    int size, i;
 
    if (ISEMPTY)
    {
        printf("EMPTY QUEUE CANNOT BE DESTROYED");
    }
    else
    {
        size = queue_size();
 
        for (i = 0;i < size;i++)
        {    
            front++;
        }
        front = 0;
        rear = -1;
        printf("\n\nQUEUE DESTROYED");
    }
}
 . 
*******************
 C Program to Implement Queues using Stacks 
================================ EOPN
/* * C Program to Implement Queues using Stacks 
================================ EOKW
--------------------------------
output:
1 - Enqueue element into queue
2 - Dequeu element from queue
3 - Display from queue
4 - Exit
Enter choice1
Enter data into queue10
 
Enter choice1
Enter data into queue20
 
Enter choice1
Enter data into queue30
 
Enter choice1
Enter data into queue40
 
Enter choice3
 10  20  30  40
Enter choice2
 
Enter choice3
 20  30  40
Enter choice4
--------------------------------
/*
 * C Program to Implement Queues using Stacks
 */
#include <stdio.h>
#include <stdlib.h>
 
void push1(int);
void push2(int);
int pop1();
int pop2();
void enqueue();
void dequeue();
void display();
void create();
 
int st1[100], st2[100];
int top1 = -1, top2 = -1;
int count = 0;
 
void main()
{
    int ch;
 
    printf("\n1 - Enqueue element into queue");
    printf("\n2 - Dequeu element from queue");
    printf("\n3 - Display from queue");
    printf("\n4 - Exit");
    create();
    while (1)
    {
        printf("\nEnter choice");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            enqueue();
            break;
        case 2:
            dequeue();
            break;
        case 3:
            display();
            break;
        case 4:
            exit(0);
        default:
            printf("Wrong choice");
        }
    }
}
 
/*Function to create a queue*/
void create()
{
    top1 = top2 = -1;
}
 
/*Function to push the element on to the stack*/
void push1(int data)
{
    st1[++top1] = data;
}
 
/*Function to pop the element from the stack*/
int pop1()
{
    return(st1[top1--]);
}
 
/*Function to push an element on to stack*/
void push2(int data)
{
    st2[++top2] = data;
}
 
/*Function to pop an element from th stack*/
 
int pop2()
{
    return(st2[top2--]);
}
 
/*Function to add an element into the queue using stack*/
void enqueue()
{
    int data, i;
 
    printf("Enter data into queue");
    scanf("%d", &data);
    push1(data);
    count++;
}
 
/*Function to delete an element from the queue using stack*/
 
void dequeue()
{
    int i;
 
    for (i = 0;i <= count;i++)
    {
        push2(pop1());
    }
    pop2();
    count--;
    for (i = 0;i <= count;i++)
    {
        push1(pop2());
    }
}
 
/*Function to display the elements in the stack*/
 
void display()
{
    int i;
 
    for (i = 0;i <= top1;i++)
    {
        printf(" %d ", st1[i]);
    }
}
 . 
*******************
 C Program to Illustrate Stack Operations using MACROS 
================================ EOPN
/* * C Program to Illustrate Stack Operations using MACROS 
================================ EOKW
--------------------------------
output:
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT3
Stack is EmptyEnter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT2
Stack is EmptyEnter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack1
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack2
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack3
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack4
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack5
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT3
5
4
3
2
1
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT4
the size of the stack is 5
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT6
5
4
3
2
1
Stack is fullEnter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT2
the popped element is 5Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT2
the popped element is 4Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT2
the popped element is 3Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT3
2
1
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT5
the popped element is 2the popped element is 1Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT1
enter the value to be pushed on to the stack12
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT3
12
Enter Your choice:
1.PUSH
2.POP
3.DISPLAY
4.STACKSIZE
5.DESTROY
6.SATCKFULL CHECK
7.EXIT
--------------------------------
/*
 * C Program to Illustrate Stack Operations using MACROS
 */
#include <stdio.h>
#include <stdlib.h>
 
#define MAX 5
#define EMPTY "Stack is Empty"
#define OVERFLOW "Stack Overflow"
#define ISOVERFLOW top >= MAX - 1 /*Macro to find whether the stack is full*/
#define ISEMPTY top == -1    /*Macro to find whether the stack is empty*/
 
void push(int);
void pop();
void display();
void stacksize();
void destroy();
void stackfull();
 
int top = -1;
int stack[MAX];
 
void main()
{
    int choice, value;
 
    while (1)
    {
        printf("Enter Your choice:\n");
        printf("1.PUSH\n2.POP\n3.DISPLAY\n4.STACKSIZE\n5.DESTROY\n6.SATCKFULL CHECK\n7.EXIT");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("enter the value to be pushed on to the stack");
            scanf("%d", &value);
            push(value);
            continue;
        case 2:
            pop();
            continue;
        case 3:
            display();
            continue;
        case 4:
            stacksize();
            continue;
        case 5:
            destroy();
            continue;
        case 6:
            stackfull();
            continue;
        case 7:
            exit(0);
        default:
            printf("YOU HAVE ENTERD A WRONG CHOICE");
        }
    }
}
 
/*Function to add an element into the stack*/
void push(int value)
{
    if (ISOVERFLOW)
    {
        printf(OVERFLOW);
        return;
    }
    top++;
    stack[top] = value;
}
 
/*Function to delete an element from the stack*/
void pop()
{
    if (ISEMPTY)
    {
        printf(EMPTY);
        return;
    }
    printf("the popped element is %d", stack[top]);
    top--;
}
 
/*Function to display all the elements in the stack*/
 
void display()
{
    int temp = top;
 
    if (ISEMPTY)
    {
        printf(EMPTY);
        return;
    }
    while (temp + 1)
    {
        printf("%d\n", stack[temp]);
        temp--;
    }
}
 
/* Function to check whether the stack is full using macro */
void stackfull()
{
    int temp = top, count = 0;
 
    if (ISEMPTY)
    {
        printf(EMPTY);
        return;
    }
    while (temp + 1)
    {
        printf("%d\n", stack[temp]);
        temp--;
        count++;
    }
    if (count >= MAX)
    {
        printf("Stack is full");
    }
    else
    {
        printf("there are %d more spaces in the stack", (MAX-count));
    }
}
 
/* Function to return the size of the stack */
void stacksize()
{
    int temp = top, count = 0;
    if (ISEMPTY)
    {
        printf(EMPTY);
        return;
    }
    while (temp + 1)
    {
          temp--;
        count++;
    }
    printf("the size of the stack is %d\n", count);
}
 
/* Function to delete all the elements in the stack */
 
void destroy()
{
    if (ISEMPTY)
    {
        printf("nothing is there to destroy");
    }
    while (top != -1)
    {
        pop();
    }
}
 . 
*******************
 C Program to Implement Stack Operations using Dynamic Memory Allocation 
================================ EOPN
/* * C Program to Implement Stack Operations using Dynamic Memory  * Allocation 
================================ EOKW
--------------------------------
output:
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
5
size of stack is 0
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
2
**Stack is empty**
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
3
STACK IS EMPTY
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
7
 
**Top is not available for an EMPTY stack**
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
10
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
20
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
30
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
40
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
50
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
5
 50
 40
 30
 20
 10
size of stack is 5
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
4
stack is full
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
2
Value popped out is 50
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
2
Value popped out is 40
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
2
Value popped out is 30
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
6
Value popped out is 20
Value popped out is 10
stack destroyed
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
1
 
Enter value which you want to push into the stack :
25
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
5
 25
size of stack is 1
1. push an element
2. pop an element
3. check if stack is empty
4. check if stack is full
5. count/display elements present in stack
6. empty and destroy stack
7. Print top of the stack
8. exit
Enter your choice
8
--------------------------------
/*
 * C Program to Implement Stack Operations using Dynamic Memory 
 * Allocation
 */
#include <stdio.h>
#include <stdlib.h>
 
struct node
{
    int data;
    struct node *link;
}*top = NULL;
 
#define MAX 5
 
// function prototypes
void push();
void pop();
void empty();
void stack_full();
void stack_count();
void destroy();
void print_top();
 
void main()
{
    int choice;
 
    while (1)
    {
        printf("1. push an element \n");
        printf("2. pop an element \n");
        printf("3. check if stack is empty \n");
        printf("4. check if stack is full \n");
        printf("5. count/display elements present in stack \n");
        printf("6. empty and destroy stack \n");
        printf("7. Print top of the stack \n");
        printf("8. exit \n");
        printf("Enter your choice \n");
        scanf("%d",&choice);
        switch (choice)
        {
        case 1:    
            push();
            break;         
        case 2:    
            pop();
            break;         
        case 3:    
            empty();
            break;         
        case 4:    
            stack_full();
            break;         
        case 5:    
            stack_count();
            break;         
        case 6:    
            destroy();
            break;         
        case 7:    
            print_top();
            break;
        case 8:    
            exit(0);
        default:
            printf("wrong choice\n");         
        }
    }
}
 
// to insert elements in stack
void push()
{
    int val,count;
    struct node *temp;
    temp = (struct node*)malloc(sizeof(struct node));
 
    count = st_count();
    if (count <= MAX - 1)
    {
        printf("\nEnter value which you want to push into the stack :\n");
        scanf("%d",&val);
        temp->data = val;
        temp->link = top;
        top = temp;
    }
    else
        printf("WARNING: STACK FULL\n");
}
 
// to delete elements from stack
void pop()
{
    struct node *temp;
    if (top =  = NULL)
        printf("**Stack is empty**\n");
    else
    {
        temp = top;
        printf("Value popped out is %d \n",temp->data);
        top = top->link;
        free(temp);
    }
}
 
// to check if stack is empty
void empty()
{
    if (top == NULL)
        printf("STACK IS EMPTY\n");
    else
        printf("elements are present, stack is not empty \n");
}
 
// to check if stack is full
void stack_full()
{
    int count;
 
    count = st_count();
    if (count =  = MAX)
    {
        printf("stack is full\n");
    }
    else
        printf("stack is not full \n");
}
 
// to count the number of elements
void stack_count()
{
    int count = 0;
    struct node *temp;
 
    temp = top;
    while (temp! = NULL)
    {
        printf(" %d\n",temp->data);
        temp = temp->link;
        count++;
    }
    printf("size of stack is %d \n",count);
}
 
int st_count()
{
    int count = 0;
    struct node *temp;
    temp = top;
    while (temp! = NULL)
    {
        temp = temp->link;
        count++;
    }
    return count;
}
 
// to empty and destroy the stack
void destroy()
{
    struct node *temp;
    temp = top;
    while (temp! = NULL)
    {
        pop();
        temp = temp->link;
    }
    printf("stack destroyed\n");
}
 
// to print top element of stack
void print_top()
{
    if (top == NULL)
        printf("\n**Top is not available for an EMPTY stack**\n");
    else
        printf("\nTop of the stack is %d \n",top->data);
}
 . 
*******************
C Program to Sort the Array in an Ascending Order 
================================ EOPN
     /*     * C program to accept N numbers and arrange them in an ascending order     
================================ EOKW
--------------------------------
output:
 
Enter the value of N
6
Enter the numbers
3
78
90
456
780
200
The numbers arranged in ascending order are given below
3
78
90
200
456
780
--------------------------------
 
    /*
     * C program to accept N numbers and arrange them in an ascending order
     */
 
    #include <stdio.h>
    void main()
    {
 
        int i, j, a, n, number[30];
        printf("Enter the value of N \n");
        scanf("%d", &n);
 
        printf("Enter the numbers \n");
        for (i = 0; i < n; ++i)
            scanf("%d", &number[i]);
 
        for (i = 0; i < n; ++i) 
        {
 
            for (j = i + 1; j < n; ++j)
            {
 
                if (number[i] > number[j]) 
                {
 
                    a =  number[i];
                    number[i] = number[j];
                    number[j] = a;
 
                }
 
            }
 
        }
 
        printf("The numbers arranged in ascending order are given below \n");
        for (i = 0; i < n; ++i)
            printf("%d\n", number[i]);
 
    }
 . 
*******************
 C Program to Sort the N Names in an Alphabetical Order
================================ EOPN
    /*     * C program to read N names, store them in the form of an array     * and sort them in alphabetical order. Output the given names and     * the sorted names in two columns side by side.     
================================ EOKW
--------------------------------
output:
Enter the value of n
7
Enter 7 names
heap
stack
queue
object
class
program
project
 
----------------------------------------
Input Names    Sorted names
------------------------------------------
heap           class
stack          heap
queue          object
object         program
class          project
program        queue
project        stack
------------------------------------------
--------------------------------
    /*
     * C program to read N names, store them in the form of an array
     * and sort them in alphabetical order. Output the given names and
     * the sorted names in two columns side by side.
     */
 
    #include <stdio.h>
    #include <string.h>
    void main()
    {
 
        char name[10][8], tname[10][8], temp[8];
        int i, j, n;
 
        printf("Enter the value of n \n");
        scanf("%d", &n);
        printf("Enter %d names n \n", n);
 
        for (i = 0; i < n; i++) 
        {
            scanf("%s", name[i]);
            strcpy(tname[i], name[i]);
        }
 
        for (i = 0; i < n - 1 ; i++)
        {
            for (j = i + 1; j < n; j++)
            {
                if (strcmp(name[i], name[j]) > 0) 
                {
                    strcpy(temp, name[i]);
                    strcpy(name[i], name[j]);
                    strcpy(name[j], temp);
                }
            }
        }
 
        printf("\n----------------------------------------\n");
        printf("Input NamestSorted names\n");
        printf("------------------------------------------\n");
 
        for (i = 0; i < n; i++) 
        {
            printf("%s\t\t%s\n", tname[i], name[i]);
        }
 
        printf("------------------------------------------\n");
 
    }
 . 
*******************
 C Program to Read an Array and Search for an Element 
================================ EOPN
     /*     * C program accept an array of N elements and a key to search.     * If the search is successful, it displays "SUCCESSFUL SEARCH".     * Otherwise, a message "UNSUCCESSFUL SEARCH" is displayed.     
================================ EOKW
--------------------------------
output:
Enter the size of an array
4
Enter the array elements
90
560
300
390
Enter the key
90
SUCCESSFUL SEARCH
 
$ a.out
Enter the size of an array
4
Enter the array elements
100
500
580
470
Enter the key
300
UNSUCCESSFUL SEARCH
--------------------------------
 
    /*
     * C program accept an array of N elements and a key to search.
     * If the search is successful, it displays "SUCCESSFUL SEARCH".
     * Otherwise, a message "UNSUCCESSFUL SEARCH" is displayed.
     */
 
    #include <stdio.h>
    void main()
    {
 
        int array[20];
        int i, low, mid, high, key, size;
 
        printf("Enter the size of an array\n");
        scanf("%d", &size);
 
        printf("Enter the array elements\n");
        for (i = 0; i < size; i++) 
        {
            scanf("%d", &array[i]);
        }
 
        printf("Enter the key\n");
        scanf("%d", &key);
 
        /*  search begins */
 
        low = 0;
        high = (size - 1);
 
        while (low <= high) 
        {
            mid = (low + high) / 2;
 
            if (key == array[mid]) 
            {
                printf("SUCCESSFUL SEARCH\n");
                return;
            }
 
            if (key < array[mid])
                high = mid - 1;
 
            else
                low = mid + 1;
 
        }
 
        printf("UNSUCCESSFUL SEARCH\n");
 
    }
 . 
*******************
C Program to accept Sorted Array and do Search using Binary Search 
================================ EOPN
/* * C program to accept N numbers sorted in ascending order * and to search for a given number using Binary Search. * Report success or failure. 
================================ EOKW
--------------------------------
output:
If the input array is {1, 2, 3, 4, 5, 6}
and the key to be searched for is 6
then the expected output will be "Search Successful".
--------------------------------
/*
 * C program to accept N numbers sorted in ascending order
 * and to search for a given number using Binary Search.
 * Report success or failure.
 */
#include <stdio.h>
 
void main()
{
    int array[10];
    int i, j, num, temp, keynum;
    int low, mid, high; 
    printf("Enter the value of num \n");
    scanf("%d", &num);
    printf("Enter the elements one by one \n");
    for (i = 0; i < num; i++)
    {
        scanf("%d", &array[i]);
    }
    printf("Input array elements \n");
    for (i = 0; i < num; i++)
    {
        printf("%d\n", array[i]);
    }
    /*  Bubble sorting begins */
    for (i = 0; i < num; i++)
    {
        for (j = 0; j < (num - i - 1); j++)
        {
            if (array[j] > array[j + 1])
            {
                temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
    printf("Sorted array is...\n");
    for (i = 0; i < num; i++)
    {
        printf("%d\n", array[i]);
    }
    printf("Enter the element to be searched \n");
    scanf("%d", &keynum);
    /*  Binary searching begins */
    low = 1;
    high = num;
    do
    {
        mid = (low + high) / 2;
        if (keynum < array[mid])
            high = mid - 1;
        else if (keynum > array[mid])
            low = mid + 1;
    } while (keynum != array[mid] && low <= high);
    if (keynum == array[mid])
    {
        printf("SEARCH SUCCESSFUL \n");
    }
    else
    {
        printf("SEARCH FAILED \n");
    }
}
 . 
*******************
C Program to Perform Binary Search using Recursion
================================ EOPN
/* * C Program to Perform Binary Search using Recursion 
================================ EOKW
--------------------------------
output:
If the input array is {1, 2, 3, 4, 5, 6}
and the key to be searched for is 6
then the expected output will be "Search Successful".
--------------------------------
/*
 * C Program to Perform Binary Search using Recursion
 */
 
#include <stdio.h>
 
void binary_search(int [], int, int, int);
void bubble_sort(int [], int);
 
int main()
{
    int key, size, i;
    int list[25];
 
    printf("Enter size of a list: ");
    scanf("%d", &size);
    printf("Enter elements\n");
    for(i = 0; i < size; i++)
    {
        scanf("%d",&list[i]);
    }
    bubble_sort(list, size);
    printf("\n");
    printf("Enter key to search\n");
    scanf("%d", &key);
    binary_search(list, 0, size, key);
 
}
 
void bubble_sort(int list[], int size)
{
    int temp, i, j;
    for (i = 0; i < size; i++)
    {
        for (j = i; j < size; j++)
        {
            if (list[i] > list[j])
            {
                temp = list[i];
                list[i] = list[j];
                list[j] = temp;
            }
        }
    }
}
 
void binary_search(int list[], int lo, int hi, int key)
{
    int mid;
 
    if (lo > hi)
    {
        printf("Key not found\n");
        return;
    }
    mid = (lo + hi) / 2;
    if (list[mid] == key)
    {
        printf("Key found\n");
    }
    else if (list[mid] > key)
    {
        binary_search(list, lo, mid - 1, key);
    }
    else if (list[mid] < key)
    {
        binary_search(list, mid + 1, hi, key);
    }
}
 . 
*******************
C Program to Implement Linear Search
================================ EOPN
/* * C program to input N numbers and store them in an array. * Do a linear search for a given key and report success * or failure. 
================================ EOKW
--------------------------------
output:
If the input array is {4, 6, 1, 2, 5, 3}
and if the element searched is 6,
then the expected output will be Position 2.
--------------------------------
/*
 * C program to input N numbers and store them in an array.
 * Do a linear search for a given key and report success
 * or failure.
 */
#include <stdio.h>
 
void main()
{  int num;
 
    int i,  keynum, found = 0;
 
    printf("Enter the number of elements ");
    scanf("%d", &num);
    int array[num];
    printf("Enter the elements one by one \n");
    for (i = 0; i < num; i++)
    {
        scanf("%d", &array[i]);
    }
 
    printf("Enter the element to be searched ");
    scanf("%d", &keynum);
    /*  Linear search begins */
    for (i = 0; i < num ; i++)
    {
        if (keynum == array[i] )
        {
            found = 1;
            break;
        }
    }
    if (found == 1)
        printf("Element is present in the array at position %d",i+1);
    else
        printf("Element is not present in the array\n");
}
 . 
*******************
 C Program to Implement Insertion Sort 
================================ EOPN
/* C Program to sort an array in ascending order using Insertion Sort 
================================ EOKW
--------------------------------
output:
If the input array is {4, 6, 1, 2, 5, 3}
the expected output array will have data as {1, 2, 3, 4, 5, 6}
--------------------------------
/* C Program to sort an array in ascending order using Insertion Sort */
#include <stdio.h>
int main()
{
    int n, i, j, temp;
    int arr[64];
 
    printf("Enter number of elements\n");
    scanf("%d", &n);
 
    printf("Enter %d integers\n", n);
    for (i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }
    for (i = 1 ; i <= n - 1; i++)
    {
	    j = i;
            while ( j > 0 && arr[j-1] > arr[j])
            {	        
                temp     = arr[j];
                arr[j]   = arr[j-1];
                arr[j-1] = temp;
                j--;
            }
    }
    printf("Sorted list in ascending order:\n");
    for (i = 0; i <= n - 1; i++)
    {
        printf("%d\n", arr[i]);
    }
    return 0;
}
 . 
*******************
C Program to Search an Element in a Tree Recursively
================================ EOPN
/* * C Program to search an element in a Binary Search Tree 
================================ EOKW
--------------------------------
output:
If the input tree is              
                    25
                  /    \  
                 17     35   
                / \     / \ 
              13  19   27 55 
and the key to be searched for is 15,
then the output will be : Key not found.
--------------------------------
/*
 * C Program to search an element in a Binary Search Tree
 */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
int search(struct node *head, int key)
{
    while (head != NULL)
    {
        if (key > head->info)
        {
            return search(head->right, key);
        }
        else if (key < head->info)
        {
            return search(head->left, key);
        }
        else
        {
            return 1;
        }
    }
    return 0;
}
/*
 * Main Function
 */
int main()
{
    int flag = 0;
    /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(17);
    newnode->right = createnode(35);
    newnode->left->left = createnode(13);
    newnode->left->right = createnode(19);
    newnode->right->left = createnode(27);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *               25
     *             /    \
     *            17     35
     *           / \     / \
     *         13  19   27 55
     */
    flag = search(newnode,15);
    if (flag)
    {
        printf("Key %d found in tree 1 \n", 15);
    }
    else
    {
        printf("Key %d not found in tree 1\n", 15);
    }
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    flag = search(node,4);
    if (flag)
    {
        printf("Key %d found in tree 2\n", 4);
    }
    else
    {
        printf("Key %d not found in tree 2\n", 4);
    }
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3- Tree having just one root node.
     *              15
     */
    flag = search(root,15);
    if (flag)
    {
        printf("Key %d found in tree 3 \n", 15);
    }
    else
    {
       	printf("Key %d not found in tree 3\n", 15);
    }
    return 0;
}
 . 
*******************
 C Program to Find the Largest value in a Tree using Inorder Traversal 
================================ EOPN
/* * C Program for finding the largest node * in a Binary Search Tree using  Inorder Traversal  
================================ EOKW
--------------------------------
output:
                    25
                  /    \  
                 17     35   
                / \     / \ 
              13  19   27 55
--------------------------------
/*
 * C Program for finding the largest node
 * in a Binary Search Tree using  Inorder Traversal 
 */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
void inorder(struct node *root)
{
    if(root != NULL)
    {
        inorder(root->left);
        printf(" %d ",root->info);
        inorder(root->right);
    }
}
void largest(struct node *root)
{
    while (root != NULL && root->right != NULL)
    {
        root = root->right;
    }
    printf("\nLargest value is %d\n", root->info);
}
/*
 * Main Function
 */
int main()
{
    /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(17);
    newnode->right = createnode(35);
    newnode->left->left = createnode(13);
    newnode->left->right = createnode(19);
    newnode->right->left = createnode(27);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *               25
     *             /    \
     *            17     35
     *           / \     / \
     *         13  19   27 55
     */
    printf("Inorder traversal of tree 1 :");
    inorder(newnode);
    largest(newnode);
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    printf("\nInorder traversal of tree 2 :");
    inorder(node);
    largest(node);
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3- Tree having just one root node.
     *              15
     */
    printf("\nInorder traversal of tree 3 :");
    inorder(root);
    largest(root);
    return 0;
}
 . 
*******************
 C Program to Find the Largest value in a Tree using Inorder Traversal 
================================ EOPN
/* * C Program for finding the largest node * in a Binary Search Tree using  Inorder Traversal  
================================ EOKW
--------------------------------
output:
                    25
                  /    \  
                 17     35   
                / \     / \ 
              13  19   27 55
--------------------------------
/*
 * C Program for finding the largest node
 * in a Binary Search Tree using  Inorder Traversal 
 */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
void inorder(struct node *root)
{
    if(root != NULL)
    {
        inorder(root->left);
        printf(" %d ",root->info);
        inorder(root->right);
    }
}
void largest(struct node *root)
{
    while (root != NULL && root->right != NULL)
    {
        root = root->right;
    }
    printf("\nLargest value is %d\n", root->info);
}
/*
 * Main Function
 */
int main()
{
    /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(17);
    newnode->right = createnode(35);
    newnode->left->left = createnode(13);
    newnode->left->right = createnode(19);
    newnode->right->left = createnode(27);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *               25
     *             /    \
     *            17     35
     *           / \     / \
     *         13  19   27 55
     */
    printf("Inorder traversal of tree 1 :");
    inorder(newnode);
    largest(newnode);
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    printf("\nInorder traversal of tree 2 :");
    inorder(node);
    largest(node);
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3- Tree having just one root node.
     *              15
     */
    printf("\nInorder traversal of tree 3 :");
    inorder(root);
    largest(root);
    return 0;
}
 . 
*******************
 C Program To Find the Smallest and Largest Elements in the Binary Search Tree 
================================ EOPN
/* * C Program for finding the smallest * and the largest node in a Binary Search Tree 
================================ EOKW
--------------------------------
output:
                    25
                  /    \  
                 17     35   
                / \     / \ 
              13  19   27 55
--------------------------------
/*
 * C Program for finding the smallest
 * and the largest node in a Binary Search Tree
 */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
void inorder(struct node *root)
{
    if(root != NULL)
    {
        inorder(root->left);
        printf(" %d ",root->info);
        inorder(root->right);
    }
}
void smallest(struct node *root)
{
    while(root != NULL && root->left != NULL)
    {
        root = root->left;
    }
    printf("\nSmallest value is %d\n", root->info);
}
void largest(struct node *root)
{
    while (root != NULL && root->right != NULL)
    {
        root = root->right;
    }
    printf("\nLargest value is %d", root->info);
}
/*
 * Main Function
 */
int main()
{
    /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(17);
    newnode->right = createnode(35);
    newnode->left->left = createnode(13);
    newnode->left->right = createnode(19);
    newnode->right->left = createnode(27);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *               25
     *             /    \
     *            17     35
     *           / \     / \
     *         13  19   27 55
     */
    printf("Inorder traversal of tree 1 :");
    inorder(newnode);
    largest(newnode);
    smallest(newnode);
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    printf("\nInorder traversal of tree 2 :");
    inorder(node);
    largest(node);
    smallest(node);
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3- Tree having just one root node.
     *              15
     */
    printf("\nInorder traversal of tree 3 :");
    inorder(root);
    largest(root);
    smallest(root);
    return 0;
}
 . 
*******************
 C Program to Count Number of Leaf Node in a Tree 
================================ EOPN
/* C Program to find the number of leaf nodes in a Tree 
================================ EOKW
--------------------------------
output:
If the input tree is      
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55
then number of leaf nodes in this tree will be 4
--------------------------------
/* C Program to find the number of leaf nodes in a Tree */
#include <stdio.h>
#include <stdlib.h>
 
struct node
{
    int info;
    struct node* left, *right;
 
};
 
/*
 * Function to create new nodes
 */
 
struct node* createnode(int key)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
 
    return(newnode);
}
 
/* 
 * Function to count number of leaf nodes
 */
 
int count = 0;
int leafnodes(struct node* newnode)
{
 
    if(newnode != NULL)
    {
        leafnodes(newnode->left);
        if((newnode->left == NULL) && (newnode->right == NULL))
        {
            count++;
        }
        leafnodes(newnode->right);
    }
    return count;
 
}
 
/*
 * Main Function
 */
 
int main()
{
   /* Creating first Tree.*/
 
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
 
    /* Sample Tree 1- Balanced Tree
 
 
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55
 
    */
    printf("Number of leaf nodes in first Tree are\t%d\n",leafnodes(newnode));
    count = 0;
 
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
 
    /* Sample Tree 2-   Right Skewed Tree (Unbalanced).
 
                    1
                     \
                      2
                       \
                        3
                         \
                          4
                           \
                            5
    */
 
    printf("\nNumber of leaf nodes in second tree are\t%d\n",leafnodes(node));
    count = 0;
 
    /*Creating third Tree. */
 
    struct node *root = createnode(15);
 
    /* Sample Tree 3-  Tree having just one root node.
 
                   15
    */
 
    printf("\nNumber of leaf nodes in third tree are\t%d",leafnodes(root));
 
    return 0;
}
 . 
*******************
 C Program to Find the Number of Nodes in a Binary Tree 
================================ EOPN
/* C Program for counting the number of nodes in a Tree 
================================ EOKW
--------------------------------
output:
                    25
                  /    \  
                 27     19   
                / \     / \ 
              17  91   13 55
--------------------------------
/* C Program for counting the number of nodes in a Tree */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
static int count = 0;
int countnodes(struct node *root)
{
    if(root != NULL)
    {
        countnodes(root->left);
        count++;
        countnodes(root->right);
    }
    return count;
}
/*
 * Main Function
 */
int main()
{
    /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *                25
     *             /    \
     *            27     19
     *           / \     / \
     *         17  91   13 55
     */
    printf("Number of nodes in tree 1 = %d ",countnodes(newnode));
    printf("\n");
    count = 0;
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    printf("Number of nodes in tree 2 = %d ",countnodes(node));
    printf("\n");
    count = 0;
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3- Tree having just one root node.
     *              15
     */
    printf("Number of nodes in tree 3 = %d",countnodes(root));
    return 0;
}
 . 
*******************
 C Program to Count Number of Non Leaf Nodes of a given Tree 
================================ EOPN
/* C Program to find the number of non leaf nodes in a Tree 
================================ EOKW
--------------------------------
output:
If the input tree is   
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55 
The number of internal or non leaf nodes in this tree are 3
--------------------------------
/* C Program to find the number of non leaf nodes in a Tree */
#include <stdio.h>
#include <stdlib.h>
 
struct node
{
    int info;
    struct node* left, *right;
 
};
 
/*
 * Function to create new nodes
 */
 
struct node* createnode(int key)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
 
    return(newnode);
}
 
/* 
 * Function to count number of leaf nodes
 */
 
int count = 0;
int nonleafnodes(struct node* newnode)
{
 
    if(newnode != NULL)
    {
        nonleafnodes(newnode->left);
        if((newnode->left != NULL) || (newnode->right != NULL))
        {
            count++;
        }
        nonleafnodes(newnode->right);
    }
    return count;
 
}
 
/*
 * Main Function
 */
 
int main()
{
   /* Creating first Tree.*/
 
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
 
    /* Sample Tree 1- Balanced Tree
 
 
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55
 
    */
    printf("Number of non leaf nodes in first Tree are\t%d",nonleafnodes(newnode));
    printf("\n");
    count = 0;
 
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
 
    /* Sample Tree 2-   Right Skewed Tree (Unbalanced).
 
                    1
                     \
                      2
                       \
                        3
                         \
                          4
                           \
                            5
    */
    printf("\n");
    printf("Number of non leaf nodes in second tree are\t%d",nonleafnodes(node));
    printf("\n");
    count = 0;
 
    /*Creating third Tree. */
 
    struct node *root = createnode(15);
 
    /* Sample Tree 3-  Tree having just one root node.
 
                   15
    */
    printf("\n");
    printf("Number of non leaf nodes in third tree are\t%d",nonleafnodes(root));
 
    return 0;
}
 . 
*******************
 C Program to Convert Binary Tree to Binary Search Tree 
================================ EOPN
/* C Program to convert given binary tree to BST 
================================ EOKW
--------------------------------
output:
 
                    25                   |          25   
                  /    \                 |        /    \
                 27     19               |       17     55
                / \     / \              |      /  \    / \
              17  91   13 55             |    13   19  27  91
 
                 Binary Tree                  Binary Search Tree
--------------------------------
/* C Program to convert given binary tree to BST */
 
#include <stdio.h>
#include <stdlib.h>
 
struct node
{
    int info;
    struct node* left, *right;
};
 
int data[100];
int i = 0;
 
/*creates a new node */
 
struct node* createnode(int key)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
 
    return(newnode);
}
 
/* counts the number of nodes in a tree */
 
int count(struct node *n)
{
    int c = 1;
 
    if (n == NULL)
        return 0;
    else
    {
        c += count(n->left);
        c += count(n->right);
        return c;
    }
}
 
/*
 * Copies the nodes of Binary Tree in an array
 */
void binarytoarray(struct node * root, int data[], int *ptr)
{
    if(root != NULL)
    {
    binarytoarray(root->left, data, ptr);
    data[*ptr] = root->info;
    (*ptr)++;
    binarytoarray(root->right, data, ptr);
    }
}
 
/*
 * Copies the element of array to bst
 */
void arraytobst(int *arr, struct node *root, int *index)
{
    if(root != NULL)
    {
        arraytobst(arr, root->left, index);
        root->info = arr[i++];
        arraytobst(arr, root->right, index);
    }
}
 
int compare(const void *a, const void *b)
{
    return *(int*)a-*(int*)b;
}
 
/*
 * Inorder traversal of a tree
 */
 
void inorder(struct node *root)
{
    if(root !=NULL)
    {
        inorder(root->left);
        printf("%d\t",root->info);
        inorder(root->right);
    }
}
 
/*
 * Converts binary tree to bst
 */
void binary_to_bst(struct node *root)
{
    int n, i;
 
    if (root == NULL)
        return;
    n = count(root);
    i = 0;
    binarytoarray(root, data, &i);
    qsort(&data, n, sizeof(data[0]), compare);
    i = 0;
    arraytobst(data, root, &i);
}
 
/*
 * Main Function
 */
 
int main()
{
    int flag = 0;
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
 
    /* Sample Tree 1- Balanced Tree
 
 
                    25                   |          25   
                  /    \                 |        /    \
                 27     19               |       17      55
                / \     / \              |      /  \    /  \
              17  91   13 55             |    13   19  27   91
 
    */
 
    printf("Inorder traversal of Input Binary Tree is\n");
    inorder(newnode);
    binary_to_bst(newnode);
    printf("\nInorder traversal of the converted Binary Search Tree is\n");
    inorder(newnode);
    return 0;
}
 . 
*******************
 C Program to Find the Sum of All Nodes in a Binary Tree 
================================ EOPN
/* C Program for finding the sum of all the nodes in a Tree 
================================ EOKW
--------------------------------
output:
                    25
                  /    \  
                 27     19   
                / \     / \ 
              17  91   13 55
--------------------------------
/* C Program for finding the sum of all the nodes in a Tree */
#include <stdio.h>
#include <stdlib.h>
struct node
{
    int info;
    struct node *left, *right;
};
struct node *createnode(int key)
{
    struct node *newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
    return(newnode);
}
int sumofnodes(struct node *root)
{
    int rightsubtree, leftsubtree, sum = 0;
    if(root != NULL)
    {
        leftsubtree = sumofnodes(root->left);
        rightsubtree = sumofnodes(root->right);
        sum = (root->info) + leftsubtree + rightsubtree;
        return sum;
    }
}
/*
 * Main Function
 */
int main()
{
   /* Creating first Tree. */
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
    /* Sample Tree 1:
     *                25
     *             /    \
     *            27     19
     *           / \     / \
     *         17  91   13 55
     */
    printf("Sum of nodes in tree 1 = %d", sumofnodes(newnode));
    printf("\n");
 
    /* Creating second Tree. */
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
    /* Sample Tree 2:   Right Skewed Tree (Unbalanced).
     *               1
     *                \
     *                 2
     *                  \
     *                   3
     *                    \
     *                     4
     *                      \
     *                       5
     */
    printf("Sum of nodes in tree 2 = %d", sumofnodes(node));
    printf("\n");
 
    /* Creating third Tree. */
    struct node *root = createnode(15);
    /* Sample Tree 3: Tree having just one root node.
     *              15
     */
    printf("Sum of nodes in tree 3 = %d", sumofnodes(root));
    printf("\n");
    return 0;
}
 . 
*******************
 C Program to Count Number of Leaf Node in a Tree 
================================ EOPN
/* C Program to find the number of leaf nodes in a Tree 
================================ EOKW
--------------------------------
output:
If the input tree is      
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55
then number of leaf nodes in this tree will be 4
--------------------------------
/* C Program to find the number of leaf nodes in a Tree */
#include <stdio.h>
#include <stdlib.h>
 
struct node
{
    int info;
    struct node* left, *right;
 
};
 
/*
 * Function to create new nodes
 */
 
struct node* createnode(int key)
{
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->info = key;
    newnode->left = NULL;
    newnode->right = NULL;
 
    return(newnode);
}
 
/* 
 * Function to count number of leaf nodes
 */
 
int count = 0;
int leafnodes(struct node* newnode)
{
 
    if(newnode != NULL)
    {
        leafnodes(newnode->left);
        if((newnode->left == NULL) && (newnode->right == NULL))
        {
            count++;
        }
        leafnodes(newnode->right);
    }
    return count;
 
}
 
/*
 * Main Function
 */
 
int main()
{
   /* Creating first Tree.*/
 
    struct node *newnode = createnode(25);
    newnode->left = createnode(27);
    newnode->right = createnode(19);
    newnode->left->left = createnode(17);
    newnode->left->right = createnode(91);
    newnode->right->left = createnode(13);
    newnode->right->right = createnode(55);
 
    /* Sample Tree 1- Balanced Tree
 
 
                    25
                  /    \
                 27     19
                / \     / \
              17  91   13 55
 
    */
    printf("Number of leaf nodes in first Tree are\t%d\n",leafnodes(newnode));
    count = 0;
 
    struct node *node = createnode(1);
    node->right = createnode(2);
    node->right->right = createnode(3);
    node->right->right->right = createnode(4);
    node->right->right->right->right = createnode(5);
 
    /* Sample Tree 2-   Right Skewed Tree (Unbalanced).
 
                    1
                     \
                      2
                       \
                        3
                         \
                          4
                           \
                            5
    */
 
    printf("\nNumber of leaf nodes in second tree are\t%d\n",leafnodes(node));
    count = 0;
 
    /*Creating third Tree. */
 
    struct node *root = createnode(15);
 
    /* Sample Tree 3-  Tree having just one root node.
 
                   15
    */
 
    printf("\nNumber of leaf nodes in third tree are\t%d",leafnodes(root));
 
    return 0;
}
 . 
*******************
C Program to Delete a specific Line from a Text File
================================ EOPN
/* * C Program Delete a specific Line from a Text File 
================================ EOKW
--------------------------------
output:
 
$ cc pgm47.c
$ a.out
Enter file name: pgm1.c
/*
 * C PROGRAM TO CONVERSION FROM Decimal to hexadecimal
 */
 
#include<stdio.h>
int main()
{
    long int decimalnum, remainder, quotient;
    int i = 1, j, temp;
    char hexadecimalnum[100];
 
    printf("Enter any decimal number: ");
    scanf("%ld", &decimalnum);
 
    quotient = decimalnum;
 
    while (quotient != 0)
    {
        temp = quotient % 16;
        //To convert integer into character
        if (temp < 10)
            temp = temp + 48;
        else
            temp = temp + 55;
 
        hexadecimalnum[i++] = temp;
        quotient = quotient / 16;
   }
 
    printf("Equivalent hexadecimal value of decimal number %d: ", decimalnum);
    for (j = i - 1; j > 0; j--)
        printf("%c", hexadecimalnum[j]);
    return 0;
}
 
 
 Enter line number of the line to be deleted: 10
 
 The contents of file after being modified are as follows:
*
 * C PROGRAM TO CONVERSION FROM Decimal to hexadecimal
 */
 
#include<stdio.h>
int main()
{
    long int decimalnum, remainder, quotient;
    int i = 1, j, temp;
 
    printf("Enter any decimal number: ");
    scanf("%ld", &decimalnum);
 
    quotient = decimalnum;
 
    while (quotient != 0)
    {
        temp = quotient % 16;
        //To convert integer into character
        if (temp < 10)
            temp = temp + 48;
        else
            temp = temp + 55;
 
        hexadecimalnum[i++] = temp;
        quotient = quotient / 16;
   }
 
    printf("Equivalent hexadecimal value of decimal number %d: ", decimalnum);
    for (j = i - 1; j > 0; j--)
        printf("%c", hexadecimalnum[j]);
    return 0;
}
--------------------------------
/*
 * C Program Delete a specific Line from a Text File
 */
#include <stdio.h>
 
int main()
{
    FILE *fileptr1, *fileptr2;
    char filename[40];
    char ch;
    int delete_line, temp = 1;
 
    printf("Enter file name: ");
    scanf("%s", filename);
    //open file in read mode
    fileptr1 = fopen(filename, "r");
    ch = getc(fileptr1);
 `  while (ch != EOF)
    {
        printf("%c", ch);
        ch = getc(fileptr1);
    }
    //rewind
    rewind(fileptr1);
    printf(" \n Enter line number of the line to be deleted:");
    scanf("%d", &delete_line);
    //open new file in write mode
    fileptr2 = fopen("replica.c", "w");
    ch = getc(fileptr1);
    while (ch != EOF)
    {
        ch = getc(fileptr1);
        if (ch == '\n')
            temp++;
            //except the line to be deleted
            if (temp != delete_line)
            {
                //copy all lines in file replica.c
                putc(ch, fileptr2);
            }
    }
    fclose(fileptr1);
    fclose(fileptr2);
    remove(filename);
    //rename the file replica.c to original name
    rename("replica.c", filename);
    printf("\n The contents of file after being modified are as follows:\n");
    fileptr1 = fopen(filename, "r");
    ch = getc(fileptr1);
    while (ch != EOF)
    {
        printf("%c", ch);
        ch = getc(fileptr1);
    }
    fclose(fileptr1);
    return 0;
}
 . 
*******************
 C Program to Find Sum of Numbers given in Command Line Arguments Recursively 
================================ EOPN
/*
 * C Program to Find Sum of Numbers given in Command Line Arguments 
 * Recursively
 
================================ EOKW
--------------------------------
output:
 
$ cc arg4.c
$ a.out 1 2 3 4
sum is 10
--------------------------------
 . 
*******************
 C Program to Count No of Lines, Blank Lines, Comments in a given Program 
================================ EOPN
/* * C Program to Count No of Lines, Blank Lines, Comments in a given Program 
================================ EOKW
--------------------------------
output:
 
Total no of lines: 204
Total no of comment line: 19
Total no of blank lines: 11
Total no of non blank lines: 193
Total no of lines end with semicolon: 66
--------------------------------
/*
 * C Program to Count No of Lines, Blank Lines, Comments in a given Program
 */
#include <stdio.h>
 
void main(int argc, char* argv[])
{
    int line_count = 0, n_o_c_l = 0, n_o_n_b_l = 0, n_o_b_l = 0, n_e_c = 0;
    FILE *fp1;
    char ch;
    fp1 = fopen(argv[1], "r");
 
    while ((ch = fgetc(fp1))! = EOF)
    {
        if (ch  ==  '\n')
        {
            line_count++;
        }
        if (ch  ==  '\n')
        {
            if ((ch = fgetc(fp1))  ==  '\n')
            {
                fseek(fp1, -1, 1);
                n_o_b_l++;
            }
        }
        if (ch  ==  ';')
        {
            if ((ch = fgetc(fp1))  ==  '\n')
            {
                fseek(fp1, -1, 1);
                n_e_c++;
            }
        }
    }
    fseek(fp1, 0, 0);
    while ((ch = fgetc(fp1))! = EOF)
    {
        if (ch  ==  '/')
        {
            if ((ch = fgetc(fp1))  ==  '/')
            {
                n_o_c_l++;
            }
        }
    }
    printf("Total no of lines: %d\n", line_count);
    printf("Total no of comment line: %d\n", n_o_c_l);
    printf("Total no of blank lines: %d\n", n_o_b_l);
    printf("Total no of non blank lines: %d\n", line_count-n_o_b_l);
    printf("Total no of lines end with semicolon: %d\n", n_e_c);
}
 . 
*******************
 C Program to Calculate the Simple Interest 
================================ EOPN
/*
 * C program to find the simple interest, given principal,
 * rate of interest and time.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm3.c
$ a.out
Enter the values of principal_amt, rate and time
12
10
5
Amount = Rs. 12.00
Rate = Rs. 10.00%
Time = 5 years
Simple interest =  6.00
--------------------------------
 . 
*******************
 C Program to Find out the Roots of a Quadratic Equation 
================================ EOPN
/*
 * C program to find out the roots of a quadratic equation
 * for non-zero coefficients. In case of errors the program
 * should report suitable error message.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm7.c -lm
$ a.out
Enter the values of a, b and c
45 50 65
Imaginary Roots
Root1 = -0.555556  +i 1.065740
Root2 = -0.555556  -i 1.065740
--------------------------------
 . 
*******************
 C Program to Simulate a Simple Calculator 
================================ EOPN
/*
 * C program to simulate a simple calculator to perform arithmetic
 * operations like addition, subtraction, multiplication and division
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm.c
$ a.out8
Simulation of a Simple Calculator
*********************************
Enter two numbers
2 3
Enter the operator [+,-,*,/]
+
 
2.00 +  3.00 =  5.00
 
$ a.out
Simulation of a Simple Calculator
*********************************
Enter two numbers
50 40
Enter the operator [+,-,*,/]
*
 
50.00 * 40.00 = 2000.00
 
$ a.out
Simulation of a Simple Calculator
*********************************
Enter two numbers
500 17
Enter the operator [+,-,*,/]
/
 
500.00 / 17.00 = 29.41
 
$ a.out
Simulation of a Simple Calculator
*********************************
Enter two numbers
65000 4700
Enter the operator [+,-,*,/]
-
 
65000.00 - 4700.00 = 60300.00
--------------------------------
 . 
*******************
 C Program to Generate Fibonacci Series 
================================ EOPN
/*
 * C program to generate Fibonacci Series. Fibonacci Series
 * is 0 1 1 2 3 5 8 13 21 ...
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm40.c
$ a.out
Enter the limit to generate the Fibonacci Series
6
Fibonacci Series is ...
0
1
1
2
3
5
--------------------------------
 . 
*******************
C Program to find HCF of a given Number using Recursion
================================ EOPN
/*
 * C Program to find HCF of a given Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm32.c
$ a.out
Enter the two numbers to find their HCF: 24 36
The HCF of 24 and 36 is 12.
--------------------------------
 . 
*******************
C Program to find LCM of a Number using Recursion
================================ EOPN
/*
 * C Program to Find LCM of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm22.c
$ a.out
Enter two numbers: 456
12
The LCM of 456 and 12 is 456
 
$ a.out
Enter two numbers: 45 75
The LCM of 45 and 75 is 225
--------------------------------
 . 
*******************
C Program to find GCD of given Numbers using Recursion
================================ EOPN
/*
 * C Program to find GCD of given Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc gcd_recr.c -o gcd_recr
$ a.out
Enter the two numbers to find their GCD: 100 70
The GCD of 100 and 70 is 10.
--------------------------------
 . 
*******************
 C Program to Calculate the Value of sin(x) 
================================ EOPN
/*
 * C program to find the value of sin(x) using the series
 * up to the given accuracy (without using user defined function)
 * also print sin(x) using library function.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm14.c -lm
$ a.out
Enter the value of x (in degrees)
60
Enter the accuracy for the result
0.86602540378443864676372317075294
Sum of the sine series         = 0.855862
Using Library function sin(60) = 0.866093
 
$ a.out
Enter the value of x (in degrees)
45
Enter the accuracy for the result
0.70710678118654752440084436210485
Sum of the sine series         = 0.704723
Using Library function sin(45) = 0.707179
--------------------------------
 . 
*******************
 C Program to Calculate the Value of cos(x) 
================================ EOPN
/*
 * C program to find the value of cos(x) using the series
 * up to the given accuracy (without using user defined function)
 * also print cos(x) using library function.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm15.c -lm
$ a.out
Enter the value of x (in degrees)
60
Enter the accuracy for the result
0.86602
Sum of the cosine series       = 0.451546
Using Library function cos(60) = 0.499882
 
$ a.out
Enter the value of x (in degrees)
45
Enter the accuracy for the result
0.7071
Sum of the cosine series       = 0.691495
Using Library function cos(45) = 0.707035
--------------------------------
 . 
*******************
 C Program to Calculate the Sum of cos(x) Series 
================================ EOPN
/*
 * C program to find the sum of cos(x) series
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm63.c -lm
$ a.out
Enter the number of the terms in a series
3
Enter the value of x(in degrees)
90
Sum of the cosine series =   -0.23
The value of cos(90) using library function = -0.000204
--------------------------------
 . 
*******************
 C Program to Check if a given Number is Prime number 
================================ EOPN
/* * C program to check whether a given number is prime or not * and output the given number with suitable message. 
================================ EOKW
--------------------------------
output:
 
Enter a number
23
23 is a prime number
 
 
Enter a number
15
15 is not a prime number
--------------------------------
/*
 * C program to check whether a given number is prime or not
 * and output the given number with suitable message.
 */
#include <stdio.h>
#include <stdlib.h>
 
void main()
{
    int num, j, flag;
 
    printf("Enter a number \n");
    scanf("%d", &num);
 
    if (num <= 1)
    {
        printf("%d is not a prime numbers \n", num);
        exit(1);
    }
    flag = 0;
    for (j = 2; j <= num / 2; j++)
    {
        if ((num % j) == 0)
        {
            flag = 1;
            break;
        }
    }
    if (flag == 0)
        printf("%d is a prime number \n", num);
     else
        printf("%d is not a prime number \n", num);
}
 . 
*******************
 C Program to Find Prime Numbers in a given Range 
================================ EOPN
#include <stdio.h>#include <stdlib.h> void main(){    int num1, num2, i, j, flag, temp, count = 0;     printf("Enter the value of num1 and num2 \n");    scanf("%d %d", &num1, &num2);    if (num2 < 2)    {        printf("There are no primes upto %d\n", num2);        exit(0);    }    printf("Prime numbers are \n");    temp = num1;    if ( num1 % 2 == 0)    {        num1++;    }    for (i = num1; i <= num2; i = i + 2)    {        flag = 0;        for (j = 2; j <= i / 2; j++)        {            if ((i % j) == 0)            {                flag = 1;                break;            }        }        if (flag == 0)        {            printf("%d\n", i);            count++;        }    }    printf("Number of primes between %d & %d = %d\n", temp, num2, count);}
================================ EOKW
--------------------------------
output:
Case:1
Enter the value of num1 and num2
70 85
Prime numbers are
71
73
79
83
Number of primes between 70 and 85 = 4
Case:2
Enter the value of num1 and num2
0 1
There are no primes upto 1
--------------------------------
#include <stdio.h>
#include <stdlib.h>
 
void main()
{
    int num1, num2, i, j, flag, temp, count = 0;
 
    printf("Enter the value of num1 and num2 \n");
    scanf("%d %d", &num1, &num2);
    if (num2 < 2)
    {
        printf("There are no primes upto %d\n", num2);
        exit(0);
    }
    printf("Prime numbers are \n");
    temp = num1;
    if ( num1 % 2 == 0)
    {
        num1++;
    }
    for (i = num1; i <= num2; i = i + 2)
    {
        flag = 0;
        for (j = 2; j <= i / 2; j++)
        {
            if ((i % j) == 0)
            {
                flag = 1;
                break;
            }
        }
        if (flag == 0)
        {
            printf("%d\n", i);
            count++;
        }
    }
    printf("Number of primes between %d & %d = %d\n", temp, num2, count);
}
 . 
*******************
 C Program to Calculate the Mean, Variance & Standard Deviation 
================================ EOPN
/*
 * C program to input real numbers and find the mean, variance
 * and standard deviation
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm23.c -lm
$ a.out
Enter the value of N
5
Enter 5 real numbers
34
88
32
12
10
Average of all elements = 35.20
variance of all elements = 794.56
Standard deviation = 28.19
--------------------------------
 . 
*******************
 C Program to Evaluate the given Polynomial Equation 
================================ EOPN
/*
 * C program to evaluate a given polynomial by reading its coefficients
 * in an array.
 * P(x) = AnXn + An-1Xn-1 + An-2Xn-2+... +A1X + A0
 *
 * The polynomial can be written as:
 * P(x) = A0 + X(A1 + X(A2 + X(A3 + X(Q4 + X(...X(An-1 + XAn))))
 * and evaluated starting from the inner loop
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm.c
$ a.out
Enter the order of the polynomial
2
Enter the value of x
2
Enter 3 coefficients
3
2
6
Given polynomial is:
 + 3x^2   + 2x^1   + 6x^0
Sum of the polynomial =  22.00
 
$ a.out
Enter the order of the polynomial
4
Enter the value of x
1
Enter 5 coefficients
3
-5
6
8
-9
Given polynomial is:
 + 3x^4   - 5x^3   + 6x^2   + 8x^1   - 9x^0
Sum of the polynomial =   3.00
--------------------------------
 . 
*******************
 C Program to Read a Coordinate Point and Determine its Quadrant 
================================ EOPN
/*
 * C program to accept a coordinate point in a XY coordinate system
 * and determine its quadrant
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm76.c
$ a.out
Enter the values for X and Y
20 30
point (-1079549476, -1079549480) lies in the First quandrant
 
$ a.out
Enter the values for X and Y
-30 -60
point (-1080802740, -1080802744) lies in the Third quandrant
 
$ a.out
Enter the values for X and Y
300 -8
point (-1078902004, -1078902008) lies in the Fourth quandrant
 
$ a.out
Enter the values for X and Y
-180 180
point (-1076456724, -1076456728) lies in the Second quandrant
--------------------------------
 . 
*******************
C Program to find Power of a Number using Recursion
================================ EOPN
/*
 * C Program to find Power of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm30.c
$ a.out
Enter a number: 456
Enter it's power: 3
456^3 is 94818816
--------------------------------
 . 
*******************
C Program to find the Factorial of a Number using Recursion
================================ EOPN
/*
 * C Program to find factorial of a given number using recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm5.c
$ a.out
Enter a number to find it's Factorial: 6
The Factorial of 6 is 720.
--------------------------------
 . 
*******************
C Program to Compute the Value of X ^ N 
================================ EOPN
/*
 * C program to compute the value of X ^ N given X and N as inputs
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm55.c -lm
$ a.out
Enter the values of X and N
2 5
X to the power N = 32
--------------------------------
 . 
*******************
C Program to Print the Factorial of a given Number
================================ EOPN
/*
 * C program to find the factorial of a given number
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm79.c
$ a.out
Enter the number
10
Factorial of 10 = 3628800
--------------------------------
 . 
*******************
C program to Calculate the value of nCr 
================================ EOPN
/*
 * C program to Calculate the value of nCr
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm12.c
$ a.out
Enter the value for N and R
5 2
 
The value of ncr is: 10
--------------------------------
 . 
*******************
C Program to Find & Display Multiplication Table 
================================ EOPN
/* * C Program to Find & Display Multiplication table 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the Number:6
Multiplication table of 6:
--------------------------
 6 x 1 = 6
 6 x 2 = 12
 6 x 3 = 18
 6 x 4 = 24
 6 x 5 = 30
 6 x 6 = 36
 6 x 7 = 42
 6 x 8 = 48
 6 x 9 = 54
 6 x 10 = 60
--------------------------------
/*
 * C Program to Find & Display Multiplication table
 */
#include <stdio.h>
 
int main()
{
    int number, i = 1;
 
    printf(" Enter the Number:");
    scanf("%d", &number);
    printf("Multiplication table of %d:\n ", number);
    printf("--------------------------\n");
    while (i <= 10)
    {
        printf(" %d x %d = %d \n ", number, i, number * i);
        i++;
    }
    return 0;
}
 . 
*******************
C Program to Find out the Sum of Series 1^2 + 2^2 +    + n^2 
================================ EOPN
/*
 * C Program to find the sum of series 1^2 + 2^2 + . + n^2.
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm18.c
$ a.out
Enter maximum values of series number: 4
Sum of the above given series : 1^2 + 2^2 + 3^2 + 4^2 = 30
--------------------------------
 . 
*******************
C Program to Find the Sum of Series 1 + 1/2 + 1/3 + 1/4 +  + 1/N
================================ EOPN
/*
 * C Program to find the Sum of Series 1 + 1/2 + 1/3 + 1/4 + ... + 1/N
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm.c
$ a.out
 
enter the number 4
 
1 + (1/2.000000) +  (1/3.000000) +  (1/4.000000)
The sum of the given series is 2.08
--------------------------------
 . 
*******************
C Program to Find Sum of the Series 1/1! + 2/2! + 3/3! + 1/N!
================================ EOPN
/*
 * C Program to Find find Sum of the Series 1/1! + 2/2! + 3/3! + 1/N!
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm20.c
$ a.out
 
Enter the value:  5
Sum of the above series = 2.708333
--------------------------------
 . 
*******************
C Program to Find the Sum of A.P Series
================================ EOPN
/*
 * C Program to Find the Sum of A.P Series
 
================================ EOKW
--------------------------------
output:
 
Output:
$cc pgm21.c
$ a.out
Enter the first term value of the A.P. series: 1
Enter the total numbers in the A.P. series: 5
Enter the common difference of A.P. series: 2
Sum of the A.P series is: 1 + 3 + 5 + 7 + 9 = 25
--------------------------------
 . 
*******************
C Program to Find the Sum of G.P Series
================================ EOPN
/*
 * C Program to Find the Sum of G.P Series
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm22.c -lm
$ a.out
Enter the first term of the G.P. series: 3
Enter the total numbers in the G.P. series: 7
Enter the common ratio of G.P. series: 2
last_term term of G.P.: 192.000000
Sum of the G.P.: 765.000000
--------------------------------
 . 
*******************
C Program to Find the Sum of H.P Series
================================ EOPN
/*
 * C Program to Find the Sum of H.P Series
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm23.c
$ a.out
1 + 1 / 2 + 1 / 3 +......+1 / n
Enter the value of n
5
the Sum of H.P Series is = 2.283334
--------------------------------
 . 
*******************
 C Program to Calculate the Area of a Triangle 
================================ EOPN
/*
 * C program to find the area of a triangle, given three sides
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm1.c -lm
$ a.out
Enter the values of a, b and c
12 10 8
Area of a triangle = 39
--------------------------------
 . 
*******************
 C Program to Calculate the Area of a Circle 
================================ EOPN
/*
 * C program to find the area of a circle, given the radius
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm2.c -lm
$ a.out
Enter the radius of a circle
30
Area of a circle = 2827.80
--------------------------------
 . 
*******************
C Program to Find the Area of Right angled Triangle
================================ EOPN
/*
 * C Program to Find Area of a Right Angled Triangle
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm24.c
$ a.out
Enter height and width of the given triangle:
 10 15
Area of right angled triangle is: 75.000
--------------------------------
 . 
*******************
C Program to Find the Area of Trapezium 
================================ EOPN
/*
 * C Program to Find Area of Trapezium
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm25.c
$ a.out
Enter the value for two bases and height of the trapezium :
10 15 20
Area of the trapezium is: 250.000
--------------------------------
 . 
*******************
C Program to Find the Area of Rhombus 
================================ EOPN
/*
 * C Program to Find Area of rhombus
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm26.c
$ a.out
Enter diagonals of the given rhombus:
 30 40
Area of rhombus is: 600.000
--------------------------------
 . 
*******************
C Program to Find the Area of Parallelogram 
================================ EOPN
/*
 * C Program to Find Area of Parallelogram
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm27.c
$ a.out
Enter base and altitude of the given Parallelogram:
 17 19
Area of Parallelogram is: 323.000
--------------------------------
 . 
*******************
 C Program to Compute the Surface Area & Volume of a Cube 
================================ EOPN
/*
 * C program to compute the surface area and volume of a cube
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm45.c -lm
$ a.out
Enter the length of a side
34
Surface area = 6936.00 and Volume = 39304.00
--------------------------------
 . 
*******************
 C Program to Find the Areas of Different Geometrical Figures  
================================ EOPN
/*
 * C program to find the areas of different geometrical shapes such as
 * circle, square, rectangle etc using switch statements.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm77.c
$ a.out
-------------------------
 1 --> Circle
 2 --> Rectangle
 3 --> Triangle
 4 --> Square
-------------------------
Enter the Figure code
1
Enter the radius
30
Area of a circle = 2827.800049
 
$ a.out
-------------------------
 1 --> Circle
 2 --> Rectangle
 3 --> Triangle
 4 --> Square
-------------------------
Enter the Figure code
2
Enter the breadth and length
20 30
Area of a Reactangle = 600.000000
 
$ a.out
-------------------------
 1 --> Circle
 2 --> Rectangle
 3 --> Triangle
 4 --> Square
-------------------------
Enter the Figure code
3
Enter the base and height
45 80
Area of a Triangle = 1800.000000
 
$ a.out
-------------------------
 1 --> Circle
 2 --> Rectangle
 3 --> Triangle
 4 --> Square
-------------------------
Enter the Figure code
4
Enter the side
100
Area of a Square=10000.000000
--------------------------------
 . 
*******************
 C Program to Find the Volume and Surface Area of cylinder 
================================ EOPN
/*
 * C Program to Find the Volume and Surface Area of cylinder
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm29.c -lm
$ a.out
Enter  value for  radius and height of a cylinder :
15 17
Surface area of cylinder is: 2880.000
Volume of cylinder is : 11475.000
--------------------------------
 . 
*******************
C Program to Find the Volume and Surface Area of Cuboids
================================ EOPN
/*
 * C Program to Find the Volume and Surface Area of Cuboids
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm28.c -lm
$ a.out
Enter value of width, length & height of the cuboids :
 22 23 24
Surface area of cuboids is: 3172.000
Volume of cuboids is : 12144.000
Space diagonal of cuboids is : 39.862
--------------------------------
 . 
*******************
C Program to Find the Surface Area and Volume of a Cone
================================ EOPN
/*
 * C Program to Find the volume and surface area of cone
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm31.c -lm
$ a.out
Enter value of radius and height of a cone :
 6 9
Surface area of cone is: 302.700
Volume of cone is : 324.000
--------------------------------
 . 
*******************
C Program to Find the Volume and Surface Area of Sphere
================================ EOPN
/*
 * C Program to Find Volume and Surface Area of Sphere
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm30.c
$ a.out
Enter radius of the sphere :
40
Surface area of sphere is: 19200.000
Volume of sphere is : 256000.000
--------------------------------
 . 
*******************
C Program to Find the Perimeter of a Circle, Rectangle and Triangle
================================ EOPN
/*
 * C Program to Find the Perimeter of a Circle, Rectangle and Triangle
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm32.c -lm
$ a.out
 Perimeter of rectangle
---------------------------
 
Enter width and length of the rectangle : 12 13
Perimeter of rectangle is: 50.000
 
Perimeter of triangle
---------------------------
 
Enter the size of all sides of the triangle : 12 16 18
Perimeter of triangle is: 46.000
 
Perimeter of circle
---------------------------
 
Enter the radius of the circle : 10
Perimeter of circle is: 60.000
 
Perimeter of equilateral triangle
---------------------------
 
Enter any side of the equilateral triangle : 19 34
Perimeter of equilateral triangle is: 57.000
 
Perimeter of right angled triangle
---------------------------
 
Enter the width and height of the right angled triangle : 5 7
Perimeter of right angled triangle is: 73.366
--------------------------------
 . 
*******************
C Program to Display Floyds Triangle
================================ EOPN
/*
 * C Program to Display Floyds triangle
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm36.c
$ a.out
floyds triangle is
1
 
2 3
 
4 5 6
 
7 8 9 10
 
11 12 13 14 15
 
16 17 18 19 20 21
--------------------------------
 . 
*******************
C Program to Display Pascal triangle
================================ EOPN
/*
 * C Program to Display Pascal triangle
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm37.c
$ a.out
 
enter the number of rows:2
                             1
                           1   1
--------------------------------
 . 
*******************
C Program to Calculate the Value of nPr
================================ EOPN
/*
 * C program to Calculate the Value of nPr
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm13.c
$ a.out
40320
Enter value for n and r
5 4
 
Permutation values is = 120
--------------------------------
 . 
*******************
C Program to find the Biggest Number in an Array of Numbers using Recursion
================================ EOPN
     /*     * C Program to find the Biggest Number in an Array of Numbers using      * Recursion     
================================ EOKW
--------------------------------
output:
Enter size of the list:8
Printing the list:
7	6	1	3	1	7	2	4
The largest number in the list is: 7
--------------------------------
 
    /*
     * C Program to find the Biggest Number in an Array of Numbers using 
     * Recursion
     */
 
    #include <stdio.h>
    int large(int[], int, int);
 
    int main()
    {
 
        int size;
        int largest;
        int list[20];
        int i;
 
        printf("Enter size of the list:");
        scanf("%d", &size);
 
        printf("Printing the list:\n");
        for (i = 0; i < size ; i++) 
        {
            list[i] = rand() % size;
            printf("%d \t", list[i]);
        }
 
        if (size == 0) 
        {
            printf("Empty list\n");
        }
 
        else 
        {
            largest = list[0];
            largest = large(list, size - 1, largest);
            printf("\nThe largest number in the list is: %d\n", largest);
        }
 
    }
 
    int large(int list[], int position, int largest)
    {
 
        if (position == 0)
            return largest;
 
        if (position > 0) 
        {
            if (list[position] > largest)
            {
                largest = list[position];
            }
            return large(list, position - 1, largest);
        }
 
    }
 . 
*******************
C Program to find Sum of Digits of a Number using Recursion
================================ EOPN
/*  
 * C Program to find Sum of Digits of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm25.c
$ a.out
Enter the number: 2345
Sum of digits in 2345 is 14
--------------------------------
 . 
*******************
C Program to find Sum of N Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Sum of N Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm33.c
$ a.out
Enter the Nth number: 3
Sum of first N numbers is 6
 
$ a.out
Enter the Nth number: 5
Sum of first N numbers is 15
--------------------------------
 . 
*******************
C Program to Perform Binary Search using Recursion
================================ EOPN
/* * C Program to Perform Binary Search using Recursion 
================================ EOKW
--------------------------------
output:
If the input array is {1, 2, 3, 4, 5, 6}
and the key to be searched for is 6
then the expected output will be "Search Successful".
--------------------------------
/*
 * C Program to Perform Binary Search using Recursion
 */
 
#include <stdio.h>
 
void binary_search(int [], int, int, int);
void bubble_sort(int [], int);
 
int main()
{
    int key, size, i;
    int list[25];
 
    printf("Enter size of a list: ");
    scanf("%d", &size);
    printf("Enter elements\n");
    for(i = 0; i < size; i++)
    {
        scanf("%d",&list[i]);
    }
    bubble_sort(list, size);
    printf("\n");
    printf("Enter key to search\n");
    scanf("%d", &key);
    binary_search(list, 0, size, key);
 
}
 
void bubble_sort(int list[], int size)
{
    int temp, i, j;
    for (i = 0; i < size; i++)
    {
        for (j = i; j < size; j++)
        {
            if (list[i] > list[j])
            {
                temp = list[i];
                list[i] = list[j];
                list[j] = temp;
            }
        }
    }
}
 
void binary_search(int list[], int lo, int hi, int key)
{
    int mid;
 
    if (lo > hi)
    {
        printf("Key not found\n");
        return;
    }
    mid = (lo + hi) / 2;
    if (list[mid] == key)
    {
        printf("Key found\n");
    }
    else if (list[mid] > key)
    {
        binary_search(list, lo, mid - 1, key);
    }
    else if (list[mid] < key)
    {
        binary_search(list, mid + 1, hi, key);
    }
}
 . 
*******************
C Program to Reverse the String using Recursion
================================ EOPN
/*
 * C Program to Reverse the String using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm12.c
$ a.out
Enter a string to reverse: malayalam
The string after reversing is: malayalam
 
$ a.out
Enter a string to reverse: cprogramming
The string after reversing is: gnimmargorpc
--------------------------------
 . 
*******************
C Program to find Reverse of a Number using Recursion
================================ EOPN
/*  
 * C program to find the reverse of a number using recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm34.c
$ a.out
Enter an integer number to reverse: 1234
The reverse of 1234 is 4321.
--------------------------------
 . 
*******************
C Program to Copy One String to Another using Recursion
================================ EOPN
/*
 * C Program to Copy One String to Another using Recursion
 
================================ EOKW
--------------------------------
output:
$ gcc recursive-copy.c -o recursive-copy
$ ./recursive-copy
 
Enter string to copy: Welcome to Sanfoundry
Copying success.
 
The first string is: Welcome to Sanfoundry
The second string is: Welcome to Sanfoundry
--------------------------------
 . 
*******************
C Program to Check whether a given String is Palindrome or not using Recursion
================================ EOPN
/*  
 * C Program to Check whether a given String is Palindrome or not 
 * using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc palindrome.c -o palindrome
$ a.out
Enter a word to check if it is a palindrome
malayalam
The entered word is a palindrome
--------------------------------
 . 
*******************
C Program to find whether a Number is Prime or Not using Recursion
================================ EOPN
/*
 * C Program to find whether a Number is Prime or Not using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm24.c
$ a.out
Enter a number: 456
456 is not a prime number
 
$ a.out
Enter a number: 89
89 is a prime number
--------------------------------
 . 
*******************
C Program to find the Factorial of a Number using Recursion
================================ EOPN
/*
 * C Program to find factorial of a given number using recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm5.c
$ a.out
Enter a number to find it's Factorial: 6
The Factorial of 6 is 720.
--------------------------------
 . 
*******************
C Program to find LCM of a Number using Recursion
================================ EOPN
/*
 * C Program to Find LCM of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm22.c
$ a.out
Enter two numbers: 456
12
The LCM of 456 and 12 is 456
 
$ a.out
Enter two numbers: 45 75
The LCM of 45 and 75 is 225
--------------------------------
 . 
*******************
C Program to find GCD of given Numbers using Recursion
================================ EOPN
/*
 * C Program to find GCD of given Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc gcd_recr.c -o gcd_recr
$ a.out
Enter the two numbers to find their GCD: 100 70
The GCD of 100 and 70 is 10.
--------------------------------
 . 
*******************
C Program to find HCF of a given Number using Recursion
================================ EOPN
/*
 * C Program to find HCF of a given Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm32.c
$ a.out
Enter the two numbers to find their HCF: 24 36
The HCF of 24 and 36 is 12.
--------------------------------
 . 
*******************
C Program to find Product of 2 Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Product of 2 Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm20.c
$ a.out
Enter two numbers to find their product: 176 340
Product of 176 and 340 is 59840
--------------------------------
 . 
*******************
C Program to find Power of a Number using Recursion
================================ EOPN
/*
 * C Program to find Power of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm30.c
$ a.out
Enter a number: 456
Enter it's power: 3
456^3 is 94818816
--------------------------------
 . 
*******************
C Program to Print Binary Equivalent of an Integer using Recursion
================================ EOPN
/*  
 * C Program to Print Binary Equivalent of an Integer using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc binary_recr.c -o binary_recr
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010
--------------------------------
 . 
*******************
C Program to Convert a Number Decimal System to Binary System using Recursion
================================ EOPN
/*  
 * C Program to Convert a Number Decimal System to Binary System using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm31.c
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010.
--------------------------------
 . 
*******************
C Program to find the First Capital Letter in a String using Recursion
================================ EOPN
/*
 * C Program to find the first capital letter in a string using 
 * Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm32.c
$ a.out
Enter a string to find it's first capital letter: iloveC
The first capital letter in iloveC is C.
--------------------------------
 . 
*******************
