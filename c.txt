 C Program to Check if a given Integer is Odd or Even 
================================ EOPN
#include <stdio.h> void main(){    int ival, remainder;     printf("Enter an integer : ");    scanf("%d", &ival);    remainder = ival % 2;    if (remainder == 0)        printf("%d is an even integer\n", ival);    else        printf("%d is an odd integer\n", ival);}
================================ EOKW
--------------------------------
output:
 
Case 1:
Enter an integer : 24
24 is an even integer
 
Case 2:
Enter an integer : 75
75 is an odd integer
 
Case 3:
Enter an integer : 0
0 is an even integer
--------------------------------
 ETP 
********************************
 C Program to Calculate the Sum of Odd & Even Numbers 
================================ EOPN
 #include <stdio.h> void main(){    int i, num, odd_sum = 0, even_sum = 0;     printf("Enter the value of num\n");    scanf("%d", &num);    for (i = 1; i <= num; i++)    {        if (i % 2 == 0)            even_sum = even_sum + i;        else            odd_sum = odd_sum + i;    }    printf("Sum of all odd numbers  = %d\n", odd_sum);    printf("Sum of all even numbers = %d\n", even_sum);}
================================ EOKW
--------------------------------
output:
Case 1:
Enter the value of num
10
Sum of all odd numbers  = 25
Sum of all even numbers = 30
 
Case 2:
Enter the value of num
100
Sum of all odd numbers  = 2500
Sum of all even numbers = 2550
--------------------------------
 ETP 
********************************
 C Program to Check if a given Integer is Positive or Negative 
================================ EOPN
#include <stdio.h> void main(){    int number;     printf("Enter a number \n");    scanf("%d", &number);    if (number >= 0)        printf("%d is a positive number \n", number);    else        printf("%d is a negative number \n", number);}
================================ EOKW
--------------------------------
output:
Case:1
Enter a number
-10
-10 is a negative number
 
Case:2
Enter a number
45
45 is a positive number
--------------------------------
 ETP 
********************************
 C Program to Find the Number of Integers Divisible by 5  
================================ EOPN
/* * C program to find the number of integers divisible by  * 5 between the given range num1 and num2, where num1 < num2. * * Also find the sum of all these integer numbers which are divisible * by 5 and display the total. 
================================ EOKW
--------------------------------
output:
Case:1
Enter the value of num1 and num2
12 17
Integers divisible by 5 are
 15,
Number of integers divisible by 5 between 12 and 17 = 1
Sum of all integers that are divisible by 5 = 15
 
Case:2
Enter the value of num1 and num2
1 10
Integers divisible by 5 are
 5,10
Number of integers divisible by 5 between 1 and 10 = 2
Sum of all integers that are divisible by 5 = 15
--------------------------------
#include <stdio.h>

void main()
{
int i, num1, num2, count = 0, sum = 0;

printf("Enter the value of num1 and num2 \n");
scanf("%d %d", &num1, &num2);
/* Count the number and compute their sum*/
printf("Integers divisible by 5 are \n");
for (i = num1; i < num2; i++)
{
if (i % 5 == 0)
{
printf("%3d,", i);
count++;
sum = sum + i;
}
}
printf("\n Number of integers divisible by 5 between %d and %d =
%d\n", num1, num2, count);
printf("Sum of all integers that are divisible by 5 = %d\n", sum);
}
 ETP 
********************************
 C Program to Read Two Integers M and N & Swap their Values 
================================ EOPN
/* * C program to read two integers M and N and to swap their values. * Use a user-defined function for swapping. Output the values of M * and N before and after swapping. 
================================ EOKW
--------------------------------
output:
Enter the values of M and N
2 3
Before Swapping:M =  2.00    N =  3.00
After Swapping:M  =  3.00    N =  2.00
--------------------------------
#include <stdio.h>
void swap(float *ptr1, float  *ptr2);

void main()
{
float m, n;

printf("Enter the values of M and N \n");
scanf("%f %f", &m, &n);
printf("Before Swapping:M = %5.2ftN = %5.2f\n", m, n);
swap(&m, &n);
printf("After Swapping:M  = %5.2ftN = %5.2f\n", m, n);
}
/*  Function swap - to interchanges the contents of two items */
void swap(float *ptr1, float *ptr2)
{
float temp;

temp = *ptr1;
*ptr1 = *ptr2;
*ptr2 = temp;
}
 ETP 
********************************
 C Program to Accept two Integers and Check if they are Equal 
================================ EOPN
/* * C program to accept two integers and check if they are equal 
================================ EOKW
--------------------------------
output:
Case:1
Enter the values for M and N
3 3
M and N are equal
 
Case:2
Enter the values for M and N
5 8
M and N are not equal
--------------------------------
#include <stdio.h>
void main()
{
int m, n;

printf("Enter the values for M and N\n");
scanf("%d %d", &m, &n);
if (m == n)
printf("M and N are equal\n");
else
printf("M and N are not equal\n");
}
 ETP 
********************************
 C Program to Compute the Sum of Digits in a given Integer 
================================ EOPN
/* * C program to accept an integer & find the sum of its digits 
================================ EOKW
--------------------------------
output:
Enter the number
300
Given number = 300
Sum of the digits 300 = 3
 
 
Enter the number
16789
Given number = 16789
Sum of the digits 16789 = 31
--------------------------------
#include <stdio.h>

void main()
{
long num, temp, digit, sum = 0;

printf("Enter the number \n");
scanf("%ld", &num);
temp = num;
while (num > 0)
{
digit = num % 10;
sum  = sum + digit;
num /= 10;
}
printf("Given number = %ld\n", temp);
printf("Sum of the digits %ld = %ld\n", temp, sum);
}
 ETP 
********************************
 C Program to Convert the given Binary Number into Decimal 
================================ EOPN
/* * C program to convert the given binary number into decimal 
================================ EOKW
--------------------------------
output:
 
Enter a binary number(1s and 0s)
10101001
The Binary number is = 10101001
Its decimal equivalent is = 169
--------------------------------
#include <stdio.h>

void main()
{
int  num, binary_val, decimal_val = 0, base = 1, rem;

printf("Enter a binary number(1s and 0s) \n");
scanf("%d", &num); /* maximum five digits */
binary_val = num;
while (num > 0)
{
rem = num % 10;
decimal_val = decimal_val + rem * base;
num = num / 10 ;
base = base * 2;
}
printf("The Binary number is = %d \n", binary_val);
printf("Its decimal equivalent is = %d \n", decimal_val);
}
 ETP 
********************************
 C Program to Convert a Decimal Number to Binary & Count the Number of 1s 
================================ EOPN
/*
 * C program to accept a decimal number and convert it to binary
 * and count the number of 1's in the binary number
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm46.c
$ a.out
Enter a decimal integer
134
Input number is = 134
Its binary equivalent is = 10000110
No.of 1's in the binary number is = 3
--------------------------------

#include <stdio.h>
 
void main()
{
    long num, decimal_num, remainder, base = 1, binary = 0, no_of_1s = 0;
 
    printf("Enter a decimal integer \n");
    scanf("%ld", &num);
    decimal_num = num;
    while (num > 0)
    {
        remainder = num % 2;
        /*  To count no.of 1s 
 ETP 
********************************
 C Program to Convert a Given Number of Days in terms of Years, Weeks & Days 
================================ EOPN
/* * C program to convert given number of days to a measure of time given * in years, weeks and days. For example 375 days is equal to 1 year * 1 week and 3 days (ignore leap year) 
================================ EOKW
--------------------------------
output:
Case:1
Enter the number of days
29
29 is equivalent to 0 years, 4 weeks and 1 days
 
Case:2
Enter the number of days
1000
1000 is equivalent to 2 years, 38 weeks and 4 days
--------------------------------
#include <stdio.h>
#define DAYSINWEEK 7

void main()
{
int ndays, year, week, days;

printf("Enter the number of days\n");
scanf("%d", &ndays);
year = ndays / 365;
week =(ndays % 365) / DAYSINWEEK;
days =(ndays % 365) % DAYSINWEEK;
printf ("%d is equivalent to %d years, %d weeks and %d daysn",
ndays, year, week, days);
}
 ETP 
********************************
C Program to Convert Binary to Octal
================================ EOPN
/* * C Program to Convert Binary to Octal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the value for  binary number: 10101
Equivalent octal value: 25
--------------------------------
#include <stdio.h>

int main()
{
long int binarynum, octalnum = 0, j = 1, remainder;

printf("Enter the value for  binary number: ");
scanf("%ld", &binarynum);
while (binarynum != 0)
{
remainder = binarynum % 10;
octalnum = octalnum + remainder * j;
j = j * 2;
binarynum = binarynum / 10;
}
printf("Equivalent octal value: %lo", octalnum);
return 0;
}
 ETP 
********************************
C Program to Convert Binary to Hexadecimal
================================ EOPN
/* * C Program to Convert Binary to Hexadecimal  
================================ EOKW
--------------------------------
output:
Output:
Enter the binary number: 10000
Equivalent hexadecimal value: 10
--------------------------------
#include <stdio.h>

int main()
{
long int binaryval, hexadecimalval = 0, i = 1, remainder;

printf("Enter the binary number: ");
scanf("%ld", &binaryval);
while (binaryval != 0)
{
remainder = binaryval % 10;
hexadecimalval = hexadecimalval + remainder * i;
i = i * 2;
binaryval = binaryval / 10;
}
printf("Equivalent hexadecimal value: %lX", hexadecimalval);
return 0;
}
 ETP 
********************************
C Program to Convert Decimal to Octal 
================================ EOPN
/* * C program to Convert Decimal to Octal 
================================ EOKW
--------------------------------
output:
Output:
Enter the decimal number: 68
Equivalent octal value of decimal no 68: 104
--------------------------------
#include <stdio.h>

int main()
{
long decimalnum, remainder, quotient;
int octalNumber[100], i = 1, j;

printf("Enter the decimal number: ");
scanf("%ld", &decimalnum);
quotient = decimalnum;
while (quotient != 0)
{
octalNumber[i++] = quotient % 8;
quotient = quotient / 8;
}
printf("Equivalent octal value of decimal no %d: ", decimalnum);
for (j = i - 1; j > 0; j--)
printf("%d", octalNumber[j]);
return 0;
}
 ETP 
********************************
C program to Convert Decimal to Hexadecimal
================================ EOPN
/* * C program to Convert Decimal to Hexadecimal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter decimal number: 12
Equivalent hexadecimal value of 12 : C
--------------------------------
#include <stdio.h>

int main()
{
long decimalnum, quotient, remainder;
int i, j = 0;
char hexadecimalnum[100];

printf("Enter decimal number: ");
scanf("%ld", &decimalnum);

quotient = decimalnum;

while (quotient != 0)
{
remainder = quotient % 16;
if (remainder < 10)
hexadecimalnum[j++] = 48 + remainder;
else
hexadecimalnum[j++] = 55 + remainder;
quotient = quotient / 16;
}

// display integer into character
for (i = j; i >= 0; i--)
printf("%c", hexadecimalnum[i]);
return 0;
}
 ETP 
********************************
C Program to Convert Roman Number to Decimal Number
================================ EOPN
/
================================ EOKW
--------------------------------
output:
Output:
Enter any roman number (Valid digits are I, V, X, L, C, D, M):
XVII
Its decimal value is: 17
--------------------------------

#include<stdio.h>
#include<string.h>

int digit(char);

int main(){

char roman_Number[1000];
int i=0;
long int number =0;

printf("Enter any roman number (Valid digits are I, V, X, L, C, D, M):  \n");
scanf("%s",roman_Number);

while(roman_Number[i]){

if(digit(roman_Number[i]) < 0){
printf("Invalid roman digit : %c",roman_Number[i]);
return 0;
}

if((strlen(roman_Number) -i) > 2){
if(digit(roman_Number[i]) < digit(roman_Number[i+2])){
printf("Invalid roman number");
return 0;
}
}

if(digit(roman_Number[i]) >= digit(roman_Number[i+1]))
number = number + digit(roman_Number[i]);
else{
number = number + (digit(roman_Number[i+1]) - digit(roman_Number[i]));
i++;
}
i++;
}

printf("Its decimal value is : %ld",number);

return 0;

}

int digit(char c){

int value=0;

switch(c){
case 'I': value = 1; break;
case 'V': value = 5; break;
case 'X': value = 10; break;
case 'L': value = 50; break;
case 'C': value = 100; break;
case 'D': value = 500; break;
case 'M': value = 1000; break;
case '\0': value = 0; break;
default: value = -1;
}

return value;
}
 ETP 
********************************
C Program to Convert Octal to Binary
================================ EOPN
/* * C Program to Convert Octal to Binary 
================================ EOKW
--------------------------------
output:
Output:
 
Enter any octal number: a
Equivalent binary value:
Invalid octal digit a
 
 
Enter any octal number: 160
Equivalent binary value: 001110000
--------------------------------
#include <stdio.h>
#define MAX 1000

int main()
{
char octalnum[MAX];
long i = 0;

printf("Enter any octal number: ");
scanf("%s", octalnum);
printf("Equivalent binary value: ");
while (octalnum[i])
{
switch (octalnum[i])
{
case '0':
printf("000"); break;
case '1':
printf("001"); break;
case '2':
printf("010"); break;
case '3':
printf("011"); break;
case '4':
printf("100"); break;
case '5':
printf("101"); break;
case '6':
printf("110"); break;
case '7':
printf("111"); break;
default:
printf("\n Invalid octal digit %c ", octalnum[i]);
return 0;
}
i++;
}
return 0;
}
 ETP 
********************************
C Program to Convert Hexadecimal to Binary
================================ EOPN
/* * C Program to Convert Hexadecimal to Binary 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the value for hexadecimal ab
Equivalent binary value: 10101011
--------------------------------
#include <stdio.h>
#define MAX 1000

int main()
{
char binarynum[MAX], hexa[MAX];
long int i = 0;

printf("Enter the value for hexadecimal ");
scanf("%s", hexa);
printf("\n Equivalent binary value: ");
while (hexa[i])
{
switch (hexa[i])
{
case '0':
printf("0000"); break;
case '1':
printf("0001"); break;
case '2':
printf("0010"); break;
case '3':
printf("0011"); break;
case '4':
printf("0100"); break;
case '5':
printf("0101"); break;
case '6':
printf("0110"); break;
case '7':
printf("0111"); break;
case '8':
printf("1000"); break;
case '9':
printf("1001"); break;
case 'A':
printf("1010"); break;
case 'B':
printf("1011"); break;
case 'C':
printf("1100"); break;
case 'D':
printf("1101"); break;
case 'E':
printf("1110"); break;
case 'F':
printf("1111"); break;
case 'a':
printf("1010"); break;
case 'b':
printf("1011"); break;
case 'c':
printf("1100"); break;
case 'd':
printf("1101"); break;
case 'e':
printf("1110"); break;
case 'f':
printf("1111"); break;
default:
printf("\n Invalid hexa digit %c ", hexa[i]);
return 0;
}
i++;
}
return 0;
}
 ETP 
********************************
C Program to Convert Numbers to Roman Numerals
================================ EOPN
/* * C Program to Convert Numbers to Roman Numerals 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the number: 500
Roman number is be: D
--------------------------------
#include <stdio.h>

void predigit(char num1, char num2);
void postdigit(char c, int n);

char romanval[1000];
int i = 0;
int main()
{
int j;
long number;

printf("Enter the number: ");
scanf("%d", &number);
if (number <= 0)
{
printf("Invalid number");
return 0;
}
while (number != 0)
{
if (number >= 1000)
{
postdigit('M', number / 1000);
number = number - (number / 1000) * 1000;
}
else if (number >= 500)
{
if (number < (500 + 4 * 100))
{
postdigit('D', number / 500);
number = number - (number / 500) * 500;
}
else
{
predigit('C','M');
number = number - (1000-100);
}
}
else if (number >= 100)
{
if (number < (100 + 3 * 100))
{
postdigit('C', number / 100);
number = number - (number / 100) * 100;
}
else
{
predigit('L', 'D');
number = number - (500 - 100);
}
}
else if (number >= 50 )
{
if (number < (50 + 4 * 10))
{
postdigit('L', number / 50);
number = number - (number / 50) * 50;
}
else
{
predigit('X','C');
number = number - (100-10);
}
}
else if (number >= 10)
{
if (number < (10 + 3 * 10))
{
postdigit('X', number / 10);
number = number - (number / 10) * 10;
}
else
{
predigit('X','L');
number = number - (50 - 10);
}
}
else if (number >= 5)
{
if (number < (5 + 4 * 1))
{
postdigit('V', number / 5);
number = number - (number / 5) * 5;
}
else
{
predigit('I', 'X');
number = number - (10 - 1);
}
}
else if (number >= 1)
{
if (number < 4)
{
postdigit('I', number / 1);
number = number - (number / 1) * 1;
}
else
{
predigit('I', 'V');
number = number - (5 - 1);
}
}
}
printf("Roman number is: ");
for(j = 0; j < i; j++)
printf("%c", romanval[j]);
return 0;
}

void predigit(char num1, char num2)
{
romanval[i++] = num1;
romanval[i++] = num2;
}

void postdigit(char c, int n)
{
int j;
for (j = 0; j < n; j++)
romanval[i++] = c;
}
 ETP 
********************************
C Program to Convert Octal to Decimal 
================================ EOPN
/* * C Program to Convert Octal to Decimal 
================================ EOKW
--------------------------------
output:
Output:
 
Enter any octal number: 67
Equivalent decimal value: 55
--------------------------------
#include <stdio.h>
#include <math.h>

int main()
{

long int octal, decimal = 0;
int i = 0;

printf("Enter any octal number: ");
scanf("%ld", &octal);
while (octal != 0)
{
decimal =  decimal +(octal % 10)* pow(8, i++);
octal = octal / 10;
}
printf("Equivalent decimal value: %ld",decimal);
return 0;
}
 ETP 
********************************
C Program to Convert a Number Decimal System to Binary System using Recursion
================================ EOPN
/*  
 * C Program to Convert a Number Decimal System to Binary System using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm31.c
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010.
--------------------------------

#include <stdio.h>
 
int convert(int);
 
int main()
{
    int dec, bin;
 
    printf("Enter a decimal number: ");
    scanf("%d", &dec);
    bin = convert(dec);
    printf("The binary equivalent of %d is %d.\n", dec, bin);
 
    return 0;
}
 
int convert(int dec)
{
    if (dec == 0)
    {
        return 0;
    }
    else
    {
        return (dec % 2 + 10 * convert(dec / 2));
    }
}
 ETP 
********************************
C Program to Convert Binary Code of a Number into its Equivalent Gray’s Code without using Recursion
================================ EOPN
/*  
 * C Program to Convert Binary Code of a Number into its Equivalent 
 * Gray's Code without using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm26.c -lm
$ a.out
Enter a binary number: 1111001010
The gray code of 1111001010 is 1000101111
--------------------------------

#include <stdio.h>
#include <math.h>
 
int bintogray(int);
 
int main ()
{
    int bin, gray;
 
    printf("Enter a binary number: ");
    scanf("%d", &bin);
    gray = bintogray(bin);
    printf("The gray code of %d is %d\n", bin, gray);
    return 0;
}
 
int bintogray(int bin)
{
    int a, b, result = 0, i = 0;
 
    while (bin != 0)
    {
        a = bin % 10;
        bin = bin / 10;
        b = bin % 10;
        if ((a && !b) || (!a && b))
        {
            result = result + pow(10, i);
        }
        i++;
    }
    return result;
}
 ETP 
********************************
C Program to Convert Binary Code of a Number into its Equivalent Gray’s Code using Recursion
================================ EOPN
/* 
 * C Program to Convert Binary Code of a Number into its Equivalent 
 * Gray's Code using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm21.c
$ a.out
Enter a binary number:  1011101
The gray code of 1011101 is 1110011
--------------------------------

#include <stdio.h>
 
int bintogray(int);
 
int main ()
{
    int bin, gray;
 
    printf("Enter a binary number: ");
    scanf("%d", &bin);
    gray = bintogray(bin);
    printf("The gray code of %d is %d\n", bin, gray);
    return 0;
}
 
int bintogray(int bin)
{
    int a, b, result = 0, i = 0;
 
    if (!bin)
    {
        return 0;
    }
    else
    {
        a = bin % 10;
        bin = bin / 10;
        b = bin % 10;
        if ((a && !b) || (!a && b))
        {
            return (1 + 10 * bintogray(bin));
        }
        else
        {
            return (10 * bintogray(bin));
        }
    }
}
 ETP 
********************************
C Program to find Sum of Digits of a Number using Recursion
================================ EOPN
/*  
 * C Program to find Sum of Digits of a Number using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm25.c
$ a.out
Enter the number: 2345
Sum of digits in 2345 is 14
--------------------------------

#include <stdio.h>
 
int sum (int a);
 
int main()
{
    int num, result;
 
    printf("Enter the number: ");
    scanf("%d", &num);
    result = sum(num);
    printf("Sum of digits in %d is %d\n", num, result);
    return 0;
}
 
int sum (int num)
{
    if (num != 0)
    {
        return (num % 10 + sum (num / 10));
    }
    else
    {
       return 0;
    }
}
 ETP 
********************************
C Program to find Reverse of a Number using Recursion
================================ EOPN
/*  
 * C program to find the reverse of a number using recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm34.c
$ a.out
Enter an integer number to reverse: 1234
The reverse of 1234 is 4321.
--------------------------------

#include <stdio.h>
#include <math.h>
 
int rev(int, int);
 
int main()
{
    int num, result;
    int length = 0, temp;
 
    printf("Enter an integer number to reverse: ");
    scanf("%d", &num);
    temp = num;
    while (temp != 0)
    {
        length++;
        temp = temp / 10;
    }
    result = rev(num, length);
    printf("The reverse of %d is %d.\n", num, result);
    return 0;
}
 
int rev(int num, int len)
{
    if (len == 1)
    {
        return num;
    }
    else
    {
        return (((num % 10) * pow(10, len - 1)) + rev(num / 10, --len));
    }
}
 ETP 
********************************
C Program to find Sum of N Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Sum of N Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm33.c
$ a.out
Enter the Nth number: 3
Sum of first N numbers is 6
 
$ a.out
Enter the Nth number: 5
Sum of first N numbers is 15
--------------------------------

#include <stdio.h>
 
void display_sum(int);
 
int main()
{
    int num;
 
    printf("Enter the Nth number: ");
    scanf("%d", &num);
    display_sum(num);
    return 0;
}
 
void display_sum(int num)
{
    static int sum = 0;
 
    if (num == 0)
    {
        printf("Sum of first N numbers is %d\n", sum);
        return;
    }
    else
    {
        sum += num;
        display_sum(--num);
    }
}
 ETP 
********************************
C Program to find whether a Number is Prime or Not using Recursion
================================ EOPN
/*
 * C Program to find whether a Number is Prime or Not using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm24.c
$ a.out
Enter a number: 456
456 is not a prime number
 
$ a.out
Enter a number: 89
89 is a prime number
--------------------------------

#include <stdio.h>
 
int primeno(int, int);
 
int main()
{
    int num, check;
    printf("Enter a number: ");
    scanf("%d", &num);
    check = primeno(num, num / 2);
    if (check == 1)
    {
        printf("%d is a prime number\n", num);
    }
    else
    {
        printf("%d is not a prime number\n", num);
    }
    return 0;
}
 
int primeno(int num, int i)
{
    if (i == 1)
    {
        return 1;
    }
    else
    {
       if (num % i == 0)
       {
         return 0;
       }
       else
       {
         return primeno(num, i - 1);
       }       
    }
}
 ETP 
********************************
C Program to Print Binary Equivalent of an Integer using Recursion
================================ EOPN
/*  
 * C Program to Print Binary Equivalent of an Integer using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ gcc binary_recr.c -o binary_recr
$ a.out
Enter a decimal number: 10
The binary equivalent of 10 is 1010
--------------------------------

#include <stdio.h>
 
int binary_conversion(int);
 
int main()
{
   int num, bin;
 
   printf("Enter a decimal number: ");
   scanf("%d", &num);
   bin = binary_conversion(num);
   printf("The binary equivalent of %d is %d\n", num, bin);
}
 
int binary_conversion(int num)
{
    if (num == 0)
    {
        return 0;
    }
    else
    {
        return (num % 2) + 10 * binary_conversion(num / 2);
    }
}
 ETP 
********************************
C Program to find Product of 2 Numbers using Recursion
================================ EOPN
/*  
 * C Program to find Product of 2 Numbers using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm20.c
$ a.out
Enter two numbers to find their product: 176 340
Product of 176 and 340 is 59840
--------------------------------

#include <stdio.h>
 
int product(int, int);
 
int main()
{
    int a, b, result;
 
    printf("Enter two numbers to find their product: ");
    scanf("%d%d", &a, &b);
    result = product(a, b);
    printf("Product of %d and %d is %d\n", a, b, result);
    return 0;
}
 
int product(int a, int b)
{
    if (a < b)
    {
        return product(b, a);
    }
    else if (b != 0)
    {
        return (a + product(a, b - 1));
    }
    else
    {
        return 0;
    }
}
 ETP 
********************************
 C Program to Find the Biggest of 3 Numbers 
================================ EOPN
/* * C program to find the biggest of three numbers 
================================ EOKW
--------------------------------
output:
Case:1
Enter the values of num1, num2 and num3
6 8 10
num1 = 6  num2 = 8  num3 = 10
num3 is the greatest among three
 
Case:2
Enter the values of num1, num2 and num3
10 87 99
num1 = 10  num2 = 87  num3 = 99
num3 is the greatest among three
--------------------------------
#include <stdio.h>

void main()
{
int num1, num2, num3;

printf("Enter the values of num1, num2 and num3\n");
scanf("%d %d %d", &num1, &num2, &num3);
printf("num1 = %d\tnum2 = %d\tnum3 = %d\n", num1, num2, num3);
if (num1 > num2)
{
if (num1 > num3)
{
printf("num1 is the greatest among three \n");
}
else
{
printf("num3 is the greatest among three \n");
}
}
else if (num2 > num3)
printf("num2 is the greatest among three \n");
else
printf("num3 is the greatest among three \n");
}
 ETP 
********************************
 C Program to Reverse a Given Number 
================================ EOPN
 #include <stdio.h> void main(){    long  num, reverse = 0, temp, remainder;     printf("Enter the number\n");    scanf("%ld", &num);    temp = num;    while (num > 0)    {        remainder = num % 10;        reverse = reverse * 10 + remainder;        num /= 10;    }    printf("Given number = %ld\n", temp);    printf("Its reverse is = %ld\n", reverse);}
================================ EOKW
--------------------------------
output:
Case:1
Enter the number
567865
Given number   = 567865
Its reverse is = 568765
 
Case:2
Enter the number
00001
Given number   = 00001
Its reverse is = 10000
--------------------------------
 ETP 
********************************
 C Program to Reverse a Number & Check if it is a Palindrome 
================================ EOPN
  #include <stdio.h> void main(){    int num, temp, remainder, reverse = 0;     printf("Enter an integer \n");    scanf("%d", &num);    /*  original number is stored at temp 
================================ EOKW
--------------------------------
output:
Case:1
Enter an integer
6789
Given number is = 6789
Its reverse is  = 9876
Number is not a palindrome
 
Case:2
Enter an integer
58085
Given number is = 58085
Its reverse is  = 58085
Number is a palindrome
--------------------------------
temp = num;
while (num > 0)
{
remainder = num % 10;
reverse = reverse * 10 + remainder;
num /= 10;
}
printf("Given number is = %d\n", temp);
printf("Its reverse is  = %d\n", reverse);
if (temp == reverse)
printf("Number is a palindrome \n");
else
printf("Number is not a palindrome \n");
}
 ETP 
********************************
C Program to Find the Sum of two Binary Numbers
================================ EOPN
/* * C Program to Find the Sum of two Binary Numbers 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the first binary number: 100000
Enter the second binary number: 101010
Sum of two binary numbers: 1001010
--------------------------------
#include <stdio.h>

int main()
{

long binary1, binary2;
int i = 0, remainder = 0, sum[20];

printf("Enter the first binary number: ");
scanf("%ld", &binary1);
printf("Enter the second binary number: ");
scanf("%ld", &binary2);
while (binary1 != 0 || binary2 != 0)
{
sum[i++] =(binary1 % 10 + binary2 % 10 + remainder) % 2;
remainder =(binary1 % 10 + binary2 % 10 + remainder) / 2;
binary1 = binary1 / 10;
binary2 = binary2 / 10;
}
if (remainder != 0)
sum[i++] = remainder;
--i;
printf("Sum of two binary numbers: ");
while (i >= 0)
printf("%d", sum[i--]);
return 0;
}
 ETP 
********************************
C Program to Find Multiplication of two Binary Numbers
================================ EOPN
/* * C Program to Find Multiplication of two Binary Numbers 
================================ EOKW
--------------------------------
output:
Output:
 
Enter the first binary number: 10010
Enter the second binary number: 10101
Product of two binary numbers: 101111010
--------------------------------
#include <stdio.h>

int binaryproduct(int, int);

int main()
{

long binary1, binary2, multiply = 0;
int digit, factor = 1;

printf("Enter the first binary number: ");
scanf("%ld", &binary1);
printf("Enter the second binary number: ");
scanf("%ld", &binary2);
while (binary2 != 0)
{
digit =  binary2 % 10;
if (digit == 1)
{
binary1 = binary1 * factor;
multiply = binaryproduct(binary1, multiply);
}
else
binary1 = binary1 * factor;
binary2 = binary2 / 10;
factor = 10;
}
printf("Product of two binary numbers: %ld", multiply);
return 0;
}

int binaryproduct(int binary1, int binary2)
{
int i = 0, remainder = 0, sum[20];
int binaryprod = 0;

while (binary1 != 0 || binary2 != 0)
{
sum[i++] =(binary1 % 10 + binary2 % 10 + remainder) % 2;
remainder =(binary1 % 10 + binary2 % 10 + remainder) / 2;
binary1 = binary1 / 10;
binary2 = binary2 / 10;
}
if (remainder != 0)
sum[i++] = remainder;
--i;
while (i >= 0)
binaryprod = binaryprod * 10 + sum[i--];
return binaryprod;
}
 ETP 
********************************
C Program to find Product of 2 Numbers without using Recursion
================================ EOPN
/*  
 * C Program to find Product of 2 Numbers without using Recursion
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm19.c
$ a.out
Enter two numbers to find their product:  89  458
Product of 89 and 458 is 40762
--------------------------------

 
#include <stdio.h>
 
int product(int, int);
 
int main()
{
    int a, b, result;
 
    printf("Enter two numbers to find their product: ");
    scanf("%d%d", &a, &b);
    result = product(a, b);
    printf("Product of %d and %d is %d\n", a, b, result);
    return 0;
}
 
int product(int a, int b)
{
    int temp = 0;
 
    while (b != 0)
    {
        temp += a;
        b--;
    }
    return temp;
}
 ETP 
********************************
C Program to Check whether a given Number is Armstrong
================================ EOPN
/*
 * C Program to Check whether a given Number is Armstrong
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm41.c -lm
$ a.out
enter a number370
The given no is armstrong no
 
$ a.out
enter a number1500
The given no is not a armstrong no
--------------------------------

#include <stdio.h>
#include <math.h>
 
void main()
{
    int number, sum = 0, rem = 0, cube = 0, temp;
 
    printf ("enter a number");
    scanf("%d", &number);
    temp = number;
    while (number != 0)
    {
        rem = number % 10;
        cube = pow(rem, 3);
        sum = sum + cube;
        number = number / 10;
    }
    if (sum == temp)
        printf ("The given no is armstrong no");
    else
        printf ("The given no is not a armstrong no");
}
 ETP 
********************************
C Program to Check whether a given Number is Perfect Number
================================ EOPN
/*
 * C Program to Check whether a given Number is Perfect Number
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm42.c
$ a.out
Enter a Number
6
Entered Number is perfect number
 
$ a.out
Enter a Number
100
Entered Number is not a perfect number
--------------------------------

#include <stdio.h>
 
int main()
{
    int number, rem, sum = 0, i;
 
    printf("Enter a Number\n");
    scanf("%d", &number);
    for (i = 1; i <= (number - 1); i++)
    {
        rem = number % i;
    if (rem == 0)
        {
            sum = sum + i;
        }
    }
    if (sum == number)
        printf("Entered Number is perfect number");
    else
        printf("Entered Number is not a perfect number");
    return 0;
}
 ETP 
********************************
C Program to Print Armstrong Number from 1 to 1000
================================ EOPN
/*
 * C Program to Print Armstrong Number from 1 to 1000
 
================================ EOKW
--------------------------------
output:
 
Output:
$ cc pgm44.c
$ a.out
Print all Armstrong numbers between 1 and 1000:
 
Amstrong no is:1
Amstrong no is:153
Amstrong no is:370
Amstrong no is:371
Amstrong no is:407
--------------------------------

#include <stdio.h>
 
main()
{
    int number, temp, digit1, digit2, digit3;
 
    printf("Print all Armstrong numbers between 1 and 1000:\n");
    number = 001;
    while (number <= 900)
    {
        digit1 = number - ((number / 10) * 10);
        digit2 = (number / 10) - ((number / 100) * 10);
        digit3 = (number / 100) - ((number / 1000) * 10);
        temp = (digit1 * digit1 * digit1) + (digit2 * digit2 * digit2) + (digit3 * digit3 * digit3);
        if (temp == number)
        {
            printf("\n Armstrong no is:%d", temp);
        }
        number++;
    }
}
 ETP 
********************************
C Program to Add two Complex Numbers
================================ EOPN
/*
 * C Program to Add two Complex Numbers
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm55.c
$ a.out
Enter value of a and b complex number a + ib.
value of complex number a is = 10
value of complex number b is = 12
Enter value of c and d complex number c + id.
value of complex number c is = 15
value of complex number d is = 22
complex numbers sum is = 25 + 34i
--------------------------------

#include <stdio.h>
 
struct complex
{
   int realpart, imaginary;
};
 
main()
{
    struct complex a, b, c;
 
    printf("Enter value of a and b complex number a + ib.\n");
    printf("value of complex number a is = ");
    scanf("%d", &a.realpart);
    printf("value of complex number b is = ");
    scanf("%d", &a.imaginary);
    printf("Enter value of c and d complex number c + id.\n");
    printf("value of complex number c is = ");
    scanf("%d", &b.realpart);
    printf("value of complex number d is = ");
    scanf("%d", &b.imaginary);
    c.realpart = a.realpart + b.realpart;
    c.imaginary = a.imaginary + b.imaginary;
    if (c.imaginary >= 0)
        printf("complex numbers sum is = %d + %di\n", c.realpart, c.imaginary);
    else
        printf("complex numbers sum = %d %di\n", c.realpart, c.imaginary);
    return 0;
}
 ETP 
********************************
C Program to Generate Fibonacci Series of N Numbers using Command-Line Argument
================================ EOPN
/*
 * C program to generate Fibonacci Series. Fibonacci Series
 * is 0 1 1 2 3 5 8 13 21 ...
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm40.c
$ a.out
Enter the limit to generate the Fibonacci Series
6
Fibonacci Series is ...
0
1
1
2
3
5
--------------------------------

#include <stdio.h>
 
void main()
{
    int  fib1 = 0, fib2 = 1, fib3, limit, count = 0;
 
    printf("Enter the limit to generate the Fibonacci Series \n");
    scanf("%d", &limit);
    printf("Fibonacci Series is ...\n");
    printf("%d\n", fib1);
    printf("%d\n", fib2);
    count = 2;
    while (count < limit)
    {
        fib3 = fib1 + fib2;
        count++;
        printf("%d\n", fib3);
        fib1 = fib2;
        fib2 = fib3;
    }
}
 ETP 
********************************
C Program to Compute First N Fibonacci Numbers using Command Line Arguments
================================ EOPN
/* * C Program to Compute First N Fibonacci Numbers using Command Line Arguments 
================================ EOKW
--------------------------------
output:
$ cc arg6.c
$ a.out 10
0       1       1       2       3       5       8       13      21      34
--------------------------------
#include <stdio.h>

/* Global Variable Declaration */
int first = 0;
int second = 1;
int third;
/* Function Prototype */
void rec_fibonacci(int);

void main(int argc, char *argv[])/* Command line Arguments*/
{
int number = atoi(argv[1]);
printf("%d\t%d", first, second); /* To print first and second number of fibonacci series */
rec_fibonacci(number);
printf("\n");
}

/* Code to print fibonacci series using recursive function */
void rec_fibonacci(int num)
{
if (num == 2)    /* To exit the function as the first two numbers are already printed */
{
return;
}
third = first + second;
printf("\t%d", third);
first = second;
second = third;
num--;
rec_fibonacci(num);
}
 ETP 
********************************
 C Program to Find the Sum of first 50 Natural Numbers using For Loop   
================================ EOPN
/*
 * C program to find the sum of first 50 natural numbers
 * using for loop
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm73.c
$ a.out
Sum = 1275
--------------------------------

#include <stdio.h>
 
void main()
{
    int  num, sum = 0;
 
    for (num = 1; num <= 50; num++)
    {
        sum = sum + num;
    }
    printf("Sum = %4d\n", sum);
}
 ETP 
********************************
 C Program to Swap the Contents of two Numbers using Bitwise XOR Operation 
================================ EOPN
/*
 * C program to swap the contents of two numbers using bitwise XOR
 * operation. Don't use either the temporary variable or arithmetic
 * operators
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm48.c
$ a.out
Enter two integers
45
89
 
Before swapping i= 45 and k = 89
After swapping i= 89 and k = 45
--------------------------------

#include <stdio.h>
 
void main()
{
    long i, k;
 
    printf("Enter two integers \n");
    scanf("%ld %ld", &i, &k);
    printf("\n Before swapping i= %ld and k = %ld", i, k);
    i = i ^ k;
    k = i ^ k;
    i = i ^ k;
    printf("\n After swapping i= %ld and k = %ld", i, k);
}
 ETP 
********************************
 C Program to Multiply given Number by 4 using Bitwise Operators  
================================ EOPN
/*
 * C program to multiply given number by 4 using bitwise operators
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm62.c
$ a.out
Enter an integer
450
450 x 4 = 1800
--------------------------------

#include <stdio.h>
 
void main()
{
    long number, tempnum;
 
    printf("Enter an integer \n");
    scanf("%ld", &number);
    tempnum = number;
    /*  left shift by two bits 
 ETP 
********************************
 C Program to Illustrate how User Authentication is Done 
================================ EOPN
/* * C program is to illustrate how user authentication is done. * Program asks for the user name and password and displays * the password as '*' character 
================================ EOKW
--------------------------------
output:
 
Enter User name: rajaraman
Enter the password <any 8 characters>: shashi12
********
Your password is :shashi12
--------------------------------
#include <stdio.h>

void main()
{
char password[10], username[10], ch;
int i;

printf("Enter User name: ");
gets(username);
printf("Enter the password < any 8 characters>: ");
for (i = 0; i < 8; i++)
{
ch = getchar();
password[i] = ch;
ch = '*' ;
printf("%c", ch);
}
password[i] = '\0';
/*  Original password can be printed, if needed */
printf("\n Your password is :");
for (i = 0; i < 8; i++)
{
printf("%c", password[i]);
}
}
 ETP 
********************************
C Program to Display the IP Address of the System
================================ EOPN
/* * C Program to Get IP Address 
================================ EOKW
--------------------------------
output:
 
IP Address is eth0 - 192.168.225.135
--------------------------------
#include <stdio.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <unistd.h>
#include <arpa/inet.h>

int main()
{
int n;
struct ifreq ifr;
char array[] = "eth0";

n = socket(AF_INET, SOCK_DGRAM, 0);
//Type of address to retrieve - IPv4 IP address
ifr.ifr_addr.sa_family = AF_INET;
//Copy the interface name in the ifreq structure
strncpy(ifr.ifr_name , array , IFNAMSIZ - 1);
ioctl(n, SIOCGIFADDR, &ifr);
close(n);
//display result
printf("IP Address is %s - %s\n" , array , inet_ntoa(( (struct sockaddr_in *)&ifr.ifr_addr )->sin_addr) );
return 0;
}
 ETP 
********************************
C Program to Shutdown or Turn Off the Computer in Linux
================================ EOPN
/* * C Program to Shutdown or Turn Off the Computer in Linux. 
================================ EOKW
--------------------------------
output:
 
shutdown: Need to be root
--------------------------------
#include <stdio.h>

int main()
{
system("shutdown -P now");
return 0;
}
 ETP 
********************************
 C Program to Find if a given Year is a Leap Year 
================================ EOPN
/* * C program to find whether a given year is leap year or not 
================================ EOKW
--------------------------------
output:
 
Enter a year
2012
2012 is a leap year
 
 
Enter a year
2009
2009 is not a leap year
--------------------------------
void main()
{
int year;

printf("Enter a year \n");
scanf("%d", &year);
if ((year % 400) == 0)
printf("%d is a leap year \n", year);
else if ((year % 100) == 0)
printf("%d is a not leap year \n", year);
else if ((year % 4) == 0)
printf("%d is a leap year \n", year);
else
printf("%d is not a leap year \n", year);
}
 ETP 
********************************
C Program to Extract Last two Digits of a given Year
================================ EOPN
/* * C Program to Extract Last two Digits of a given Year 
================================ EOKW
--------------------------------
output:
Output:
Enter the year 2012
Last two digits of year is: 12
--------------------------------
#include <stdio.h>

int main()
{
int year, yr;

printf("Enter the year ");
scanf("%d", &year);
yr = year % 100;
printf("Last two digits of year is: %02d", yr);
return 0;
}
 ETP 
********************************
 C Program to Display the Inventory of Items in a Store 
================================ EOPN
/*
 * C program to display the inventory of items in a store / shop
 * The inventory maintains details such as name, price, quantity
 * and manufacturing date of each item.
 
================================ EOKW
--------------------------------
output:
 
$ cc pgm60.c
$ a.out
Enter number of items:3
Item name:
pendrive
Item code:
123
Quantity:
6
price:
3000
Manufacturing date(dd-mm-yyyy):
30-9-2012
Item name:
computer
Item code:
124
Quantity:
10
price:
10000
Manufacturing date(dd-mm-yyyy):
30-7-2012
Item name:
optical mouse
Item code:
Quantity:
price:
Manufacturing date(dd-mm-yyyy):
             *****  INVENTORY *****
------------------------------------------------------------------
S.N.|    NAME           |   CODE   |  QUANTITY |  PRICE  | MFG.DATE
------------------------------------------------------------------
1     pendrive               123          6        3000     30/9/2012
2     computer               124          10       10000    30/7/2012
3     optical                0            0        0        0/0/0
------------------------------------------------------------------
 
$ a.out
Enter number of items:3
Item name:
pendrive
Item code:
123
Quantity:
6
price:
3000
Manufacturing date(dd-mm-yyyy):
30-9-2012
Item name:
computer
Item code:
124
Quantity:
10
price:
10000
Manufacturing date(dd-mm-yyyy):
30-7-2012
Item name:
Mouse
Item code:
125
Quantity:
10
price:
1500
Manufacturing date(dd-mm-yyyy):
30-6-2012
 
             *****  INVENTORY *****
------------------------------------------------------------------
S.N.|    NAME           |   CODE   |  QUANTITY |  PRICE    | MFG.DATE
------------------------------------------------------------------
1     pendrive               123          6        3000      30/9/2012
2     computer               124          10       10000     30/7/2012
3     Mouse                  125          10       1500      30/6/2012
------------------------------------------------------------------
--------------------------------

#include <stdio.h>
 
void main()
{
    struct date
    {
        int day;
        int month;
        int year;
    };
    struct details
    {
        char name[20];
        int price;
        int code;
        int qty;
        struct date mfg;
    };
    struct details item[50];
    int n, i;
 
    printf("Enter number of items:");
    scanf("%d", &n);
    fflush(stdin);
    for (i = 0; i < n; i++)
    {
        fflush(stdin);
        printf("Item name: \n");
        scanf("%s", item[i].name);
        fflush(stdin);
        printf("Item code: \n");
        scanf("%d", &item[i].code);
        fflush(stdin);
        printf("Quantity: \n");
        scanf("%d", &item[i].qty);
        fflush(stdin);
        printf("price: \n");
        scanf("%d",  &item[i].price);
        fflush(stdin);
        printf("Manufacturing date(dd-mm-yyyy): \n");
        scanf("%d-%d-%d", &item[i].mfg.day,
        &item[i].mfg.month, &item[i].mfg.year);
    }
    printf("             *****  INVENTORY ***** \n");
    printf("---------------------------------------------------------
    ---------\n");
    printf("S.N.|    NAME           |   CODE   |  QUANTITY |  PRICE
    | MFG.DATE \n");
    printf("---------------------------------------------------------
    ---------\n");
    for (i = 0; i < n; i++)
        printf("%d     %-15s        %-d          %-5d     %-5d
        %d/%d/%d \n", i + 1, item[i].name, item[i].code, item[i].qty,
        item[i].price, item[i].mfg.day, item[i].mfg.month,
        item[i].mfg.year);
    printf("---------------------------------------------------------
    ---------\n");
}
 ETP 
********************************
C Program to Display the ATM Transaction
================================ EOPN
/* * C Program to Display the ATM Transaction 
================================ EOKW
--------------------------------
output:
 
 
ENTER YOUR SECRET PIN NUMBER:1520
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 1
 
YOUR BALANCE IN Rs : 1000
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 2
 
ENTER THE AMOUNT TO WITHDRAW: 200
 
 
PLEASE COLLECT CASH
YOUR CURRENT BALANCE IS 800
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 3
 
ENTER THE AMOUNT TO DEPOSIT 5000
YOUR BALANCE IS 5800
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 1
 
YOUR BALANCE IN Rs : 5800
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 4
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: 4
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
********Welcome to ATM Service**************
1. Check Balance
2. Withdraw Cash
3. Deposit Cash
4. Quit
******************?**************************?*
 
Enter your choice: n
 
THANK U USING ATM
 
 
DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n):
 
THANKS FOR USING OUT ATM SERVICE.
--------------------------------
#include <stdio.h>

unsigned long amount=1000, deposit, withdraw;
int choice, pin, k;
char transaction ='y';

void main()
{
while (pin != 1520)
{
printf("ENTER YOUR SECRET PIN NUMBER:");
scanf("%d", &pin);
if (pin != 1520)
printf("PLEASE ENTER VALID PASSWORD\n");
}
do
{
printf("********Welcome to ATM Service**************\n");
printf("1. Check Balance\n");
printf("2. Withdraw Cash\n");
printf("3. Deposit Cash\n");
printf("4. Quit\n");
printf("******************?**************************?*\n\n");
printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice)
{
case 1:
printf("\n YOUR BALANCE IN Rs : %lu ", amount);
break;
case 2:
printf("\n ENTER THE AMOUNT TO WITHDRAW: ");
scanf("%lu", &withdraw);
if (withdraw % 100 != 0)
{
printf("\n PLEASE ENTER THE AMOUNT IN MULTIPLES OF 100");
}
else if (withdraw >(amount - 500))
{
printf("\n INSUFFICENT BALANCE");
}
else
{
amount = amount - withdraw;
printf("\n\n PLEASE COLLECT CASH");
printf("\n YOUR CURRENT BALANCE IS%lu", amount);
}
break;
case 3:
printf("\n ENTER THE AMOUNT TO DEPOSIT");
scanf("%lu", &deposit);
amount = amount + deposit;
printf("YOUR BALANCE IS %lu", amount);
break;
case 4:
printf("\n THANK U USING ATM");
break;
default:
printf("\n INVALID CHOICE");
}
printf("\n\n\n DO U WISH TO HAVE ANOTHER TRANSCATION?(y/n): \n");
fflush(stdin);
scanf("%c", &transaction);
if (transaction == 'n'|| transaction == 'N')
k = 1;
} while (!k);
printf("\n\n THANKS FOR USING OUT ATM SERVICE");
}
 ETP 
********************************
 C Program to Accept the Height of a Person & Categorize as Taller, Dwarf & Average 
================================ EOPN
/* * C program to accept the height of a person in centimeter and * categorize the person based on height as taller, dwarf and * average height person 
================================ EOKW
--------------------------------
output:
Enter  the Height (in centimetres)
165
Average Height
 
Enter  the Height (in centimetres)
140
Dwarf
 
Enter  the Height (in centimetres)
190
Taller
--------------------------------

#include <stdio.h>
void main()
{
float height;

printf("Enter  the Height (in centimetres) \n");
scanf("%f", &height);
if (height < 150.0)
printf("Dwarf \n");
else if ((height >= 150.0) && (height <= 165.0))
printf(" Average Height \n");
else if ((height > 165.0) && (height <= 195.0))
printf("Taller \n");
else
printf("Abnormal height \n");
}
 ETP 
********************************
 C Program to Read a Grade & Display the Equivalent Description 
================================ EOPN
/* * C Program to accept a grade and declare the equivalent description * if code is S, then print SUPER * if code is A, then print VERY GOOD * if code is B, then print FAIR * if code is Y, then print ABSENT * if code is F, then print FAILS 
================================ EOKW
--------------------------------
output:
 
Enter the grade
s
RESULT  :  SUPER
 
Enter the grade
a
RESULT  :  VERY GOOD
 
Enter the grade
b
RESULT  :  FAIR
 
Enter the grade
y
RESULT  :  ABSENT
 
Enter the grade
f
RESULT  :  FAILS
--------------------------------
#include <stdio.h>
#include <ctype.h>
#include <string.h>

void main()
{
char remark[15];
char grade;

printf("Enter the grade \n");
scanf("%c", &grade);
/*  lower case letter to upper case */
grade = toupper(grade);
switch(grade)
{
case 'S':
strcpy(remark, " SUPER");
break;
case 'A':
strcpy(remark, " VERY GOOD");
break;
case 'B':
strcpy(remark, " FAIR");
break;
case 'Y':
strcpy(remark, " ABSENT");
break;
case 'F':
strcpy(remark, " FAILS");
break;
default :
strcpy(remark, "ERROR IN GRADE \n");
break;
}
printf("RESULT  : %s\n", remark);
}
 ETP 
********************************
 C Program to Illustrate the Concept of Unions 
================================ EOPN
/* * C program to illustrate the concept of unions 
================================ EOKW
--------------------------------
output:
 
Enter the value of n1: 10
Value of n1 = 10
Enter the value of n2: 50
Value of n2 = 50.000000
--------------------------------
#include <stdio.h>

void main()
{
union number
{
int  n1;
float n2;
};
union number x;

printf("Enter the value of n1: ");
scanf("%d", &x.n1);
printf("Value of n1 = %d", x.n1);
printf("\nEnter the value of n2: ");
scanf("%f", &x.n2);
printf("Value of n2 = %f\n", x.n2);
}
 ETP 
********************************
 C Program to Find the Size of a Union 
================================ EOPN
/* * C program to find the size of a union 
================================ EOKW
--------------------------------
output:
 
The size of union = 4
25 0.000000 
1045220557 0.200000
1045220464 0.199999
--------------------------------
#include <stdio.h>

void main()
{
union sample
{
int   m;
float n;
char  ch;
};
union sample u;

printf("The size of union = %d\n", sizeof(u));
/*  initialization */
u.m = 25;
printf("%d %f %c\n", u.m, u.n, u.ch);
u.n = 0.2;
printf("%d %f %c\n", u.m, u.n, u.ch);
u.ch = 'p';
printf("%d %f %c\n", u.m, u.n, u.ch);
}
 ETP 
********************************
C Program to Display Function without using the Main Function
================================ EOPN
/* * C Program to display function without using the Main Function 
================================ EOKW
--------------------------------
output:
Output:
 
helloworld
--------------------------------
#include <stdio.h>
#define decode(s,t,u,m,p,e,d) m##s##u##t
#define begin decode(a,n,i,m,a,t,e)

int begin()
{
printf(" helloworld ");
}
 ETP 
********************************
C Program to Print a Semicolon without using a Semicolon anywhere in the Code
================================ EOPN
/* * C Program to Print a Semicolon without using a Semicolon * anywhere in the code 
================================ EOKW
--------------------------------
output:
 
;
--------------------------------
#include <stdio.h>

int main(void)
{
//59 is the ascii value of semicolumn
if (printf("%c ", 59))
{
}
return 0;
}
 ETP 
********************************
C program to Increase 1 to all of the given Integer Digit
================================ EOPN
 /* * C program to Increase 1 to all of the given Integer Digit 
================================ EOKW
--------------------------------
output:
Enter a number: 3456
increasing 1 to all digits:  22
--------------------------------
#include <stdio.h>

int main()
{
int number, sum = 0, remainder, count;

printf("Enter a number: ");
scanf("%d", &number);
while (number)
{
remainder = number % 10;
sum  = sum + (remainder + 1);
number /= 10;
}
printf("increasing 1 to all digits:  %d", sum);
return 0;
}
 ETP 
********************************
C Program to Print Diamond Pattern
================================ EOPN
 /* * C Program to Print Diamond Pattern 
================================ EOKW
--------------------------------
output:
Enter number of rows
5
    *
   ***
  *****
 *******
*********
 *******
  *****
   ***
    *
 
Enter number of rows
2
 *
***
 *
--------------------------------
#include <stdio.h>

int main()
{
int number, i, k, count = 1;

printf("Enter number of rows\n");
scanf("%d", &number);
count = number - 1;
for (k = 1; k <= number; k++)
{
for (i = 1; i <= count; i++)
printf(" ");
count--;
for (i = 1; i <= 2 * k - 1; i++)
printf("*");
printf("\n");
}
count = 1;
for (k = 1; k <= number - 1; k++)
{
for (i = 1; i <= count; i++)
printf(" ");
count++;
for (i = 1 ; i <= 2 *(number - k)-  1; i++)
printf("*");
printf("\n");
}
return 0;
}
 ETP 
********************************
C Program to Print any Print Statement without using Semicolon
================================ EOPN
/* * C Program to Print any Print Statement without using Semicolon 
================================ EOKW
--------------------------------
output:
Output:
 
Hi.. Welcome to sanfoundry
--------------------------------
#include <stdio.h>

void main()
{
if(printf("Hi.. Welcome to sanfoundry"))
{
}
}
 ETP 
********************************
C Program to Display its own Source Code as its Output
================================ EOPN
/* * C Program to Display its own Source Code as its Output 
================================ EOKW
--------------------------------
output:
Output:
 
/*
 * C Program to display its own source code as its output
 */
#include <stdio.h>
 
int main()
{
    FILE *fp;
    char ch;
 
    fp = fopen(__FILE__,"r");
    do
    {
        ch = getc(fp);
        putchar(ch);
     }
     while (ch != EOF);
     fclose(fp);
     return 0;
}
--------------------------------
#include <stdio.h>

int main()
{
FILE *fp;
char ch;

fp = fopen(__FILE__,"r");
do
{
ch = getc(fp);
putchar(ch);
}
while (ch != EOF);
fclose(fp);
return 0;
}
 ETP 
********************************
C Program to Illustrate Pass by Reference
================================ EOPN
/* * C Program to Illustrate Pass by Reference 
================================ EOKW
--------------------------------
output:
output:
the cube of the given number is 1000
--------------------------------
#include <stdio.h>

void cube( int *x);

int main()
{
int num = 10;

cube(&num);
printf("the cube of the given number is %d", num);
return 0;
}

void  cube(int *x)
{
*x = (*x) * (*x) * (*x);
}
 ETP 
********************************
C Program to Illustrate Pass by Value
================================ EOPN
/* * C Program to Illustrate Pass by Value. 
================================ EOKW
--------------------------------
output:
 
Before swapping num1 = 10 num2 = 20
After swapping num1 = 10 num2 = 20
--------------------------------
#include <stdio.h>

void swap(int a, int b)
{
int temp;
temp = a;
a = b;
b = temp;
}

int main()
{
int num1 = 10, num2 = 20;

printf("Before swapping num1 = %d num2 = %d\n", num1, num2);
swap(num1, num2);
printf("After swapping num1 = %d num2 = %d \n", num1, num2);
return 0;
}
 ETP 
********************************
